import numpy as np

def NORMAL(SHAPE, SCALE=0.5):
    """NORMAL DISTRIBUTION CENTERED AT 0 WITH SPECIFIED STANDARD DEVIATION.
    
    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    SCALE : FLOAT
        STANDARD DEVIATION OF THE NORMAL DISTRIBUTION.
        
    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE SHAPE WITH VALUES DRAWN FROM A NORMAL DISTRIBUTION CENTERED AT 0 WITH STANDARD DEVIATION SCALE.
    """
    return np.random.normal(size=SHAPE, scale=SCALE) # RETURN A SAMPLE (OR SAMPLES) FROM THE “STANDARD NORMAL” DISTRIBUTION. IF SHAPE IS AN INTEGER, THEN IT IS TREATED AS A TUPLE OF LENGTH ONE, AND THE METHOD RETURNS A SINGLE NUMPY FLOATING POINT NUMBER. IF SHAPE IS A TUPLE OF INTEGERS, THEN IT IS TREATED AS A VECTOR OF LENGTH SHAPE, AND THE METHOD RETURNS A NUMPY FLOATING POINT VECTOR OF THAT SHAPE. IF SHAPE IS A TUPLE, THEN A FLOATING POINT TENSOR OF SHAPE SHAPE AND STANDARD DEVIATION SCALE IS RETURNED. IF SCALE IS NONE (THE DEFAULT), THEN SAMPLES ARE DRAWN FROM A STANDARD NORMAL DISTRIBUTION (I.E., STANDARD DEVIATION IS 1).

def UNIFORM(SHAPE, SCALE=0.5):
    """UNIFORM DISTRIBUTION BETWEEN -SCALE AND SCALE.
    
    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    SCALE : FLOAT
        HALF THE LENGTH OF THE INTERVAL FROM WHICH VALUES ARE DRAWN.
        
    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE SHAPE WITH VALUES DRAWN FROM A UNIFORM DISTRIBUTION BETWEEN -SCALE AND SCALE.
    """
    return np.random.uniform(size=SHAPE, low=-SCALE, high=SCALE) # RETURN A SAMPLE (OR SAMPLES) FROM THE “UNIFORM” DISTRIBUTION. IF SHAPE IS AN INTEGER, THEN IT IS TREATED AS A TUPLE OF LENGTH ONE, AND THE METHOD RETURNS A SINGLE NUMPY FLOATING POINT NUMBER. IF SHAPE IS A TUPLE OF INTEGERS, THEN IT IS TREATED AS A VECTOR OF LENGTH SHAPE, AND THE METHOD RETURNS A NUMPY FLOATING POINT VECTOR OF THAT SHAPE. IF SHAPE IS A TUPLE, THEN A FLOATING POINT TENSOR OF SHAPE SHAPE AND STANDARD DEVIATION SCALE IS RETURNED. IF SCALE IS NONE (THE DEFAULT), THEN SAMPLES ARE DRAWN FROM A STANDARD NORMAL DISTRIBUTION (I.E., STANDARD DEVIATION IS 1).

def ZERO(SHAPE, **KWARGS):
    """ZERO INITIALIZATION.
    
    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    KWARGS : DICT
        UNUSED.
    
    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE SHAPE WITH VALUES OF 0.
    """
    return np.zeros(SHAPE) # RETURN A NEW ARRAY OF GIVEN SHAPE AND TYPE, FILLED WITH ZEROS.

def ONE(SHAPE, **KWARGS):
    """ONE INITIALIZATION.
    
    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    KWARGS : DICT
        UNUSED.
        
    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE SHAPE WITH VALUES OF 1.
    """
    return np.ones(SHAPE) # RETURN A NEW ARRAY OF GIVEN SHAPE AND TYPE, FILLED WITH ONES.

def ORTHOGONAL(SHAPE, SCALE=0.5):
    """ORTHOGONAL INITIALIZATION.

    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    SCALE : FLOAT
        SCALE OF THE ORTHOGONAL MATRIX.

    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE WITH VALUES DRAWN FROM A NORMAL DISTRIBUTION CENTERED AT 0 WITH STANDARD DEVIATION SCALE.
    """
    FLAT_SHAPE = (SHAPE[0], np.prod(SHAPE[1:])) # RETURN THE PRODUCT OF ARRAY ELEMENTS OVER A GIVEN AXIS.
    ARRAY = np.random.normal(size=FLAT_SHAPE) # RETURN A SAMPLE (OR SAMPLES) FROM THE “STANDARD NORMAL” DISTRIBUTION. IF SHAPE IS AN INTEGER, THEN IT IS TREATED AS A TUPLE OF LENGTH ONE, AND THE METHOD RETURNS A SINGLE NUMPY FLOATING POINT NUMBER. IF SHAPE IS A TUPLE OF INTEGERS, THEN IT IS TREATED AS A VECTOR OF LENGTH SHAPE, AND THE METHOD RETURNS A NUMPY FLOATING POINT VECTOR OF THAT SHAPE. IF SHAPE IS A TUPLE, THEN A FLOATING POINT TENSOR OF SHAPE SHAPE AND STANDARD DEVIATION SCALE IS RETURNED. IF SCALE IS NONE (THE DEFAULT), THEN SAMPLES ARE DRAWN FROM A STANDARD NORMAL DISTRIBUTION (I.E., STANDARD DEVIATION IS 1).
    U, _, V = np.linalg.svd(ARRAY, full_matrices=False) # SINGULAR VALUE DECOMPOSITION. COMPUTE THE SINGULAR VALUES, SINGULAR VECTORS, AND THE PSEUDO-INVERSE OF A MATRIX. THE SINGULAR VALUE DECOMPOSITION IS WRITTEN AS U * SIGMA * V.T, WHERE SIGMA IS AN N-REMINANT OF THE ARRAY A. IF A IS A MATRIX OR A VECTOR, A PSEUDO-INVERSE IS RETURNED BY DEFAULT. IF FLAT_MATRICES IS TRUE, THEN U AND V ARE 1-D ARRAYS.
    if U.shape == FLAT_SHAPE: # IF THE SHAPE OF U IS EQUAL TO THE SHAPE OF FLAT_SHAPE.
        return np.reshape(U, SHAPE) # GIVE A NEW SHAPE TO AN ARRAY WITHOUT CHANGING ITS DATA.
    else: # ELSE.
        return np.reshape(V, SHAPE) # GIVE A NEW SHAPE TO AN ARRAY WITHOUT CHANGING ITS DATA.

def __GLOROT_FAN__(SHAPE):
    """RETURNS THE FAN IN AND FAN OUT FOR THE GLOROT INITIALIZATION.
    
    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
        
    RETURNS
    -------
    FAN_IN : FLOAT
        FAN IN FOR THE GLOROT INITIALIZATION.
    FAN_OUT : FLOAT
        FAN OUT FOR THE GLOROT INITIALIZATION.
    """
    assert len(SHAPE) >= 2 # ASSERTION TO CHECK IF THE LENGTH OF SHAPE IS GREATER THAN OR EQUAL TO 2.
    if len(SHAPE) == 4: # IF THE LENGTH OF SHAPE IS 4.
        RECEPTIVE_FIELD_SIZE = np.prod(SHAPE[2:]) # RETURN THE PRODUCT OF ARRAY ELEMENTS OVER A GIVEN AXIS.
        FAN_IN = SHAPE[1] * RECEPTIVE_FIELD_SIZE # FAN IN = SHAPE[1] * RECEPTIVE_FIELD_SIZE.
        FAN_OUT = SHAPE[0] * RECEPTIVE_FIELD_SIZE # FAN OUT = SHAPE[0] * RECEPTIVE_FIELD_SIZE.
    else: # IF THE LENGTH OF SHAPE IS NOT 4.
        FAN_IN, FAN_OUT = SHAPE[:2] # FAN IN = SHAPE[0], FAN OUT = SHAPE[1].
    return float(FAN_IN), float(FAN_OUT) # RETURN FAN IN AND FAN OUT AS FLOATS.

def GLOROT_NORMAL(SHAPE, **KWARGS):
    """GLOROT NORMAL INITIALIZATION.

    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    KWARGS : DICT
        UNUSED.
    
    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE SHAPE WITH VALUES DRAWN FROM A NORMAL DISTRIBUTION CENTERED AT 0 WITH STANDARD DEVIATION SCALE.
    """
    FAN_IN, FAN_OUT = __GLOROT_FAN__(SHAPE) # FAN IN AND FAN OUT FOR THE GLOROT INITIALIZATION.
    S = np.sqrt(2.0 / (FAN_IN + FAN_OUT)) # S = SQRT(2.0 / (FAN_IN + FAN_OUT)).
    return NORMAL(SHAPE, S) # RETURN A SAMPLE (OR SAMPLES) FROM THE “STANDARD NORMAL” DISTRIBUTION. IF SHAPE IS AN INTEGER, THEN IT IS TREATED AS A TUPLE OF LENGTH ONE, AND THE METHOD RETURNS A SINGLE NUMPY FLOATING POINT NUMBER. IF SHAPE IS A TUPLE OF INTEGERS, THEN IT IS TREATED AS A VECTOR OF LENGTH SHAPE, AND THE METHOD RETURNS A NUMPY FLOATING POINT VECTOR OF THAT SHAPE. IF SHAPE IS A TUPLE, THEN A FLOATING POINT TENSOR OF SHAPE SHAPE AND STANDARD DEVIATION SCALE IS RETURNED. IF SCALE IS NONE (THE DEFAULT), THEN SAMPLES ARE DRAWN FROM A STANDARD NORMAL DISTRIBUTION (I.E., STANDARD DEVIATION IS 1).

def GLOROT_UNIFORM(SHAPE, **KWARGS):
    """GLOROT UNIFORM INITIALIZATION.

    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    KWARGS : DICT
        UNUSED.
    
    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE SHAPE WITH VALUES DRAWN FROM A UNIFORM DISTRIBUTION BETWEEN -LIMIT AND LIMIT.
    """
    FAN_IN, FAN_OUT = __GLOROT_FAN__(SHAPE) # FAN IN AND FAN OUT FOR THE GLOROT INITIALIZATION.
    S = np.sqrt(6.0 / (FAN_IN + FAN_OUT)) # S = SQRT(6.0 / (FAN_IN + FAN_OUT)).
    return UNIFORM(SHAPE, S) # RETURN A SAMPLE (OR SAMPLES) FROM THE “UNIFORM” DISTRIBUTION. IF SHAPE IS AN INTEGER, THEN IT IS TREATED AS A TUPLE OF LENGTH ONE, AND THE METHOD RETURNS A SINGLE NUMPY FLOATING POINT NUMBER. IF SHAPE IS A TUPLE OF INTEGERS, THEN IT IS TREATED AS A VECTOR OF LENGTH SHAPE, AND THE METHOD RETURNS A NUMPY FLOATING POINT VECTOR OF THAT SHAPE. IF SHAPE IS A TUPLE, THEN A FLOATING POINT TENSOR OF SHAPE SHAPE AND STANDARD DEVIATION SCALE IS RETURNED. IF SCALE IS NONE (THE DEFAULT), THEN SAMPLES ARE DRAWN FROM A STANDARD NORMAL DISTRIBUTION (I.E., STANDARD DEVIATION IS 1).

def HE_NORMAL(SHAPE, **KWARGS):
    """HE NORMAL INITIALIZATION.

    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    KWARGS : DICT
        UNUSED.
    
    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE SHAPE WITH VALUES DRAWN FROM A NORMAL DISTRIBUTION CENTERED AT 0 WITH STANDARD DEVIATION SCALE.
    """
    FAN_IN, _ = __GLOROT_FAN__(SHAPE) # FAN IN AND FAN OUT FOR THE GLOROT INITIALIZATION.
    S = np.sqrt(2.0 / FAN_IN) # S = SQRT(2.0 / FAN_IN).
    return NORMAL(SHAPE, S) # RETURN A SAMPLE (OR SAMPLES) FROM THE “STANDARD NORMAL” DISTRIBUTION. IF SHAPE IS AN INTEGER, THEN IT IS TREATED AS A TUPLE OF LENGTH ONE, AND THE METHOD RETURNS A SINGLE NUMPY FLOATING POINT NUMBER. IF SHAPE IS A TUPLE OF INTEGERS, THEN IT IS TREATED AS A VECTOR OF LENGTH SHAPE, AND THE METHOD RETURNS A NUMPY FLOATING POINT VECTOR OF THAT SHAPE. IF SHAPE IS A TUPLE, THEN A FLOATING POINT TENSOR OF SHAPE SHAPE AND STANDARD DEVIATION SCALE IS RETURNED. IF SCALE IS NONE (THE DEFAULT), THEN SAMPLES ARE DRAWN FROM A STANDARD NORMAL DISTRIBUTION (I.E., STANDARD DEVIATION IS 1).

def HE_UNIFORM(SHAPE, **KWARGS):
    """HE UNIFORM INITIALIZATION.

    PARAMETERS
    ----------
    SHAPE : TUPLE OF INTEGERS
        SHAPE OF THE ARRAY TO BE RETURNED.
    KWARGS : DICT
        UNUSED.

    RETURNS
    -------
    ARRAY : NUMPY ARRAY
        ARRAY OF SHAPE SHAPE WITH VALUES DRAWN FROM A UNIFORM DISTRIBUTION BETWEEN -LIMIT AND LIMIT.
    """
    FAN_IN, _ = __GLOROT_FAN__(SHAPE) # FAN IN AND FAN OUT FOR THE GLOROT INITIALIZATION.
    S = np.sqrt(6.0 / FAN_IN) # S = SQRT(6.0 / FAN_IN).
    return UNIFORM(SHAPE, S) # RETURN A SAMPLE (OR SAMPLES) FROM THE “UNIFORM” DISTRIBUTION. IF SHAPE IS AN INTEGER, THEN IT IS TREATED AS A TUPLE OF LENGTH ONE, AND THE METHOD RETURNS A SINGLE NUMPY FLOATING POINT NUMBER. IF SHAPE IS A TUPLE OF INTEGERS, THEN IT IS TREATED AS A VECTOR OF LENGTH SHAPE, AND THE METHOD RETURNS A NUMPY FLOATING POINT VECTOR OF THAT SHAPE. IF SHAPE IS A TUPLE, THEN A FLOATING POINT TENSOR OF SHAPE SHAPE AND STANDARD DEVIATION SCALE IS RETURNED. IF SCALE IS NONE (THE DEFAULT), THEN SAMPLES ARE DRAWN FROM A STANDARD NORMAL DISTRIBUTION (I.E., STANDARD DEVIATION IS 1).