def BATCH_ITERATOR(X, BATCH_SIZE=64):
    """ITERATE OVER BATCHES OF A DATASET.

    PARAMETERS
    ----------
    X : ARRAY-LIKE
        FEATURE DATASET.
    BATCH_SIZE : INTEGER
        SIZE OF EACH BATCH.
    """
    N_SAMPLES = X.shape[0] # SET THE NUMBER OF SAMPLES TO THE FIRST ELEMENT OF THE SHAPE OF X
    N_BATCHES = N_SAMPLES // BATCH_SIZE # SET THE NUMBER OF BATCHES TO THE NUMBER OF SAMPLES DIVIDED BY THE BATCH SIZE
    BATCH_END = 0 # INITIALIZE BATCH_END TO 0
    for B in range(N_BATCHES): # FOR EACH BATCH
        BATCH_BEGIN = B * BATCH_SIZE # SET BATCH_BEGIN TO THE BATCH NUMBER TIMES THE BATCH SIZE
        BATCH_END = BATCH_BEGIN + BATCH_SIZE # SET BATCH_END TO BATCH_BEGIN PLUS THE BATCH SIZE
        X_BATCH = X[BATCH_BEGIN:BATCH_END] # SET X_BATCH TO THE SLICE OF X FROM BATCH_BEGIN TO BATCH_END
        yield X_BATCH # YIELD X_BATCH
    if N_BATCHES * BATCH_SIZE < N_SAMPLES: # IF THE NUMBER OF BATCHES TIMES THE BATCH SIZE IS LESS THAN THE NUMBER OF SAMPLES
        yield X[BATCH_END:] # YIELD THE SLICE OF X FROM BATCH_END TO THE END OF X