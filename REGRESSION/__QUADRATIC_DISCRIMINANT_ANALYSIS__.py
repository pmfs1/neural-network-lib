import numpy as np

# QUADRATIC_DISCRIMINANT_ANALYSIS: IMPLEMENTATION OF QUADRATIC DISCRIMINANT ANALYSIS. QUADRATIC DISCRIMINANT ANALYSIS (QDA) IS A METHOD USED WHEN YOU HAVE A SET OF PREDICTOR VARIABLES AND YOUâ€™D LIKE TO CLASSIFY A RESPONSE VARIABLE INTO TWO OR MORE CLASSES. IT IS CONSIDERED TO BE THE NON-LINEAR EQUIVALENT TO LINEAR DISCRIMINANT ANALYSIS. QDA ASSUMES THAT EACH CLASS FOLLOWS A GAUSSIAN DISTRIBUTION. THE CLASS-SPECIFIC PRIOR IS SIMPLY THE PROPORTION OF DATA POINTS THAT BELONG TO THE CLASS. THE CLASS-SPECIFIC MEAN VECTOR IS THE AVERAGE OF THE INPUT VARIABLES THAT BELONG TO THE CLASS.
class QUADRATIC_DISCRIMINANT_ANALYSIS:
    # INITIALIZES THE QUADRATIC DISCRIMINANT ANALYSIS MODEL.
    def __init__(self, N_COMPONENTS):
        # NUMBER OF COMPONENTS: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF COMPONENTS IN THE DATASET.
        self.N_COMPONENTS = N_COMPONENTS
        # QUADRATIC_DISCRIMINANTS: IT'S THE LIST OF QUADRATIC DISCRIMINANT ANALYSIS MODELS.
        self.QUADRATIC_DISCRIMINANTS = None

    # FIT: IT'S THE FUNCTION THAT TRAINS THE QUADRATIC DISCRIMINANT ANALYSIS MODEL.
    def FIT(self, X, Y):
        # N: IT'S THE NUMBER OF SAMPLES IN THE DATASET.
        N = len(X)
        # K: IT'S THE NUMBER OF CLASSES IN THE DATASET.
        K = len(np.unique(Y))
        # QUADRATIC_DISCRIMINANTS: IT'S THE LIST OF QUADRATIC DISCRIMINANT ANALYSIS MODELS.
        self.QUADRATIC_DISCRIMINANTS = []
        # FOR EACH CLASS IN THE DATASET.
        for _K in range(K):
            # X_K: IT'S THE LIST OF SAMPLES BELONGING TO THE CLASS k.
            X_K = X[Y == _K]
            # N_K: IT'S THE NUMBER OF SAMPLES BELONGING TO THE CLASS k.
            N_K = len(X_K)
            # PRIOR: IT'S THE CLASS-SPECIFIC PRIOR.
            PRIOR = N_K / N
            # MEAN: IT'S THE CLASS-SPECIFIC MEAN VECTOR.
            MEAN = np.mean(X_K, axis = 0)
            # COVARIANCE: IT'S THE CLASS-SPECIFIC COVARIANCE MATRIX.
            COVARIANCE = np.cov(X_K.T)
            # QUADRATIC_DISCRIMINANT: IT'S THE QUADRATIC DISCRIMINANT ANALYSIS MODEL.
            QUADRATIC_DISCRIMINANT = {"PRIOR": PRIOR, "MEAN": MEAN, "COVARIANCE": COVARIANCE}
            # APPEND THE QUADRATIC DISCRIMINANT ANALYSIS MODEL TO THE LIST OF QUADRATIC DISCRIMINANT ANALYSIS MODELS.
            self.QUADRATIC_DISCRIMINANTS.append(QUADRATIC_DISCRIMINANT)

    # PREDICT: IT'S THE FUNCTION THAT USES THE QUADRATIC DISCRIMINANT ANALYSIS MODEL TO MAKE PREDICTIONS.
    def PREDICT(self, X):
        assert self.QUADRATIC_DISCRIMINANTS is not None, "FIT THE MODEL BEFORE USING IT TO MAKE PREDICTIONS."
        # PREDICTIONS: IT'S THE LIST OF PREDICTIONS.
        PREDICTIONS = []
        # FOR EACH SAMPLE IN THE DATASET.
        for x in X:
            # POSTERIORS: IT'S THE LIST OF POSTERIORS.
            POSTERIORS = []
            # FOR EACH QUADRATIC DISCRIMINANT ANALYSIS MODEL.
            for QUADRATIC_DISCRIMINANT in self.QUADRATIC_DISCRIMINANTS:
                # PRIOR: IT'S THE CLASS-SPECIFIC PRIOR.
                PRIOR = QUADRATIC_DISCRIMINANT["PRIOR"]
                # MEAN: IT'S THE CLASS-SPECIFIC MEAN VECTOR.
                MEAN = QUADRATIC_DISCRIMINANT["MEAN"]
                # COVARIANCE: IT'S THE CLASS-SPECIFIC COVARIANCE MATRIX.
                COVARIANCE = QUADRATIC_DISCRIMINANT["COVARIANCE"]
                # POSTERIOR: IT'S THE POSTERIOR.
                POSTERIOR = PRIOR * self.__GAUSSIAN_DISTRIBUTION__(x, MEAN, COVARIANCE)
                # APPEND THE POSTERIOR TO THE LIST OF POSTERIORS.
                POSTERIORS.append(POSTERIOR)
            # APPEND THE PREDICTION TO THE LIST OF PREDICTIONS.
            PREDICTIONS.append(np.argmax(POSTERIORS))
        # RETURN THE LIST OF PREDICTIONS.
        return PREDICTIONS
    
    # __GAUSSIAN_DISTRIBUTION__: IT'S THE FUNCTION THAT COMPUTES THE GAUSSIAN DISTRIBUTION.
    def __GAUSSIAN_DISTRIBUTION__(self, _X, MEAN, COVARIANCE):
        # D: IT'S THE NUMBER OF FEATURES IN THE DATASET.
        D = len(_X)
        # EXPONENT: IT'S THE EXPONENT OF THE GAUSSIAN DISTRIBUTION.
        EXPONENT = -0.5 * (_X - MEAN).T.dot(np.linalg.inv(COVARIANCE)).dot(_X - MEAN)
        # CONSTANT: IT'S THE CONSTANT OF THE GAUSSIAN DISTRIBUTION.
        CONSTANT = 1 / np.sqrt(np.power(2 * np.pi, D) * np.linalg.det(COVARIANCE))
        # RETURN THE GAUSSIAN DISTRIBUTION.
        return CONSTANT * np.exp(EXPONENT)