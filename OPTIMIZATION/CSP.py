# CSP: IMPLEMENTS A REPRESENTATION OF A CONSTRAINT SATISFACTION PROBLEM. THE CSP IS DEFINED BY ITS VARIABLES, DOMAINS, NEIGHBORS, CONSTRAINTS. A CONSTRAINT SATISFACTION PROBLEM (CSP) IS A TYPE OF MATHEMATICAL PROBLEM THAT INVOLVES FINDING A SOLUTION SATISFYING A SET OF CONSTRAINTS. IT CONSISTS OF A SET OF VARIABLES, EACH WITH A DOMAIN OF POSSIBLE VALUES, AND A SET OF CONSTRAINTS THAT DEFINE THE RELATIONSHIPS OR CONDITIONS THAT MUST BE SATISFIED AMONG THE VARIABLES. IN A CSP, THE GOAL IS TO FIND AN ASSIGNMENT OF VALUES TO THE VARIABLES THAT SATISFIES ALL OF THE CONSTRAINTS. THIS ASSIGNMENT MUST MEET THE CONSTRAINTS' REQUIREMENTS AND ENSURE THAT NO VIOLATIONS OCCUR. THE CONSTRAINTS CAN BE EXPRESSED IN DIFFERENT WAYS, SUCH AS LOGICAL RELATIONS, ARITHMETIC EQUATIONS, OR OTHER SPECIFIC RULES. CSPs HAVE A WIDE RANGE OF APPLICATIONS, INCLUDING ARTIFICIAL INTELLIGENCE, COMPUTER SCIENCE, OPERATIONS RESEARCH, AND ENGINEERING. EXAMPLES INCLUDE SCHEDULING PROBLEMS, MAP COLORING, N-QUEENS PROBLEM, SUDOKU PUZZLES, AND MANY OTHERS. TO SOLVE A CSP, VARIOUS ALGORITHMS CAN BE EMPLOYED, SUCH AS BACKTRACKING, CONSTRAINT PROPAGATION, AND LOCAL SEARCH METHODS. THESE ALGORITHMS ITERATIVELY EXPLORE THE SEARCH SPACE OF POSSIBLE ASSIGNMENTS UNTIL A VALID SOLUTION IS FOUND OR IT IS DETERMINED THAT NO SOLUTION EXISTS. OVERALL, A CSP IS A FUNDAMENTAL PROBLEM FORMULATION THAT PROVIDES A FLEXIBLE FRAMEWORK FOR MODELING AND SOLVING CONSTRAINT-BASED PROBLEMS IN A VARIETY OF DOMAINS.
class CSP:
    """CSP: IMPLEMENTS A REPRESENTATION OF A CONSTRAINT SATISFACTION PROBLEM. THE CSP IS DEFINED BY ITS VARIABLES, DOMAINS, NEIGHBORS, CONSTRAINTS. A CONSTRAINT SATISFACTION PROBLEM (CSP) IS A TYPE OF MATHEMATICAL PROBLEM THAT INVOLVES FINDING A SOLUTION SATISFYING A SET OF CONSTRAINTS. IT CONSISTS OF A SET OF VARIABLES, EACH WITH A DOMAIN OF POSSIBLE VALUES, AND A SET OF CONSTRAINTS THAT DEFINE THE RELATIONSHIPS OR CONDITIONS THAT MUST BE SATISFIED AMONG THE VARIABLES. IN A CSP, THE GOAL IS TO FIND AN ASSIGNMENT OF VALUES TO THE VARIABLES THAT SATISFIES ALL OF THE CONSTRAINTS. THIS ASSIGNMENT MUST MEET THE CONSTRAINTS' REQUIREMENTS AND ENSURE THAT NO VIOLATIONS OCCUR. THE CONSTRAINTS CAN BE EXPRESSED IN DIFFERENT WAYS, SUCH AS LOGICAL RELATIONS, ARITHMETIC EQUATIONS, OR OTHER SPECIFIC RULES. CSPs HAVE A WIDE RANGE OF APPLICATIONS, INCLUDING ARTIFICIAL INTELLIGENCE, COMPUTER SCIENCE, OPERATIONS RESEARCH, AND ENGINEERING. EXAMPLES INCLUDE SCHEDULING PROBLEMS, MAP COLORING, N-QUEENS PROBLEM, SUDOKU PUZZLES, AND MANY OTHERS. TO SOLVE A CSP, VARIOUS ALGORITHMS CAN BE EMPLOYED, SUCH AS BACKTRACKING, CONSTRAINT PROPAGATION, AND LOCAL SEARCH METHODS. THESE ALGORITHMS ITERATIVELY EXPLORE THE SEARCH SPACE OF POSSIBLE ASSIGNMENTS UNTIL A VALID SOLUTION IS FOUND OR IT IS DETERMINED THAT NO SOLUTION EXISTS. OVERALL, A CSP IS A FUNDAMENTAL PROBLEM FORMULATION THAT PROVIDES A FLEXIBLE FRAMEWORK FOR MODELING AND SOLVING CONSTRAINT-BASED PROBLEMS IN A VARIETY OF DOMAINS."""

    # THE `__INIT__` FUNCTION INITIALIZES AN INSTANCE OF THE `CSP` CLASS AND DEFINES ITS PROPERTIES, INCLUDING THE VARIABLES, DOMAINS, CONSTRAINTS, AND NEIGHBORS.
    # 	1. IT TAKES THREE ARGUMENTS: `VARIABLES`, `DOMAINS`, AND `CONSTRAINTS`, WHICH REPRESENT THE VARIABLES, DOMAINS OF POSSIBLE VALUES, AND CONSTRAINTS OF THE CSP, RESPECTIVELY.
    # 	2. IT ASSIGNS THE PROVIDED VALUES TO THE CORRESPONDING PROPERTIES OF THE `CSP` INSTANCE: `SELF.VARIABLES`, `SELF.DOMAINS`, AND `SELF.CONSTRAINTS`.
    # 	3. IT INITIALIZES AN EMPTY DICTIONARY CALLED `SELF.NEIGHBORS`, WHICH WILL STORE THE NEIGHBORS OF EACH VARIABLE.
    # 	4. IT ITERATES OVER EACH VARIABLE IN `SELF.VARIABLES` AND PERFORMS THE FOLLOWING STEPS:
    # 		A. IT INITIALIZES AN EMPTY LIST AS THE VALUE OF `SELF.NEIGHBORS[VARIABLE]` TO STORE THE NEIGHBORS OF THE CURRENT VARIABLE.
    # 		B. IT ITERATES OVER EACH CONSTRAINT IN `SELF.CONSTRAINTS` AND CHECKS IF THE CURRENT VARIABLE IS INVOLVED IN THE CONSTRAINT.
    # 		C. IF THE CURRENT VARIABLE IS INVOLVED IN THE CONSTRAINT, IT ITERATES OVER EACH VARIABLE IN THE CONSTRAINT AND ADDS IT AS A NEIGHBOR OF THE CURRENT VARIABLE, EXCLUDING THE CURRENT VARIABLE ITSELF.
    # BY THE END OF THE `__INIT__` FUNCTION, THE `CSP` INSTANCE WILL HAVE ITS VARIABLES, DOMAINS, CONSTRAINTS, AND NEIGHBORS PROPERLY INITIALIZED BASED ON THE PROVIDED ARGUMENTS.
    # THE `__INIT__` FUNCTION SERVES AS A CONSTRUCTOR FOR THE `CSP` CLASS, ALLOWING YOU TO CREATE INSTANCES OF THE CLASS AND SET ITS INITIAL STATE.
    def __init__(self, VARIABLES, DOMAINS, CONSTRAINTS):
        """THE `__INIT__` FUNCTION INITIALIZES AN INSTANCE OF THE `CSP` CLASS AND DEFINES ITS PROPERTIES, INCLUDING THE VARIABLES, DOMAINS, CONSTRAINTS, AND NEIGHBORS."""
        self.VARIABLES = VARIABLES  # LIST OF VARIABLES
        self.DOMAINS = DOMAINS  # DICTIONARY OF DOMAINS: THE KEYS OF THE DICTIONARY ARE THE VARIABLES. THE VALUE OF EACH KEY IN THE DICTIONARY IS THE LIST OF VALUES OF THAT VARIABLE. THE VALUES OF A VARIABLE ARE THE VALUES THAT THE VARIABLE CAN TAKE.
        # LIST OF CONSTRAINTS: THE CONSTRAINT VARIABLE IS DEFINED BY A LISTS OF TWO TUPLES (PAIRS). EACH TUPLE REPRESENTS A PAIR OF VARIABLES THAT MUST SATISFY THE CONSTRAINT. THE CONSTRAINT IS SATISFIED IF THE PAIR DOES NOT HAVE THE SAME VALUE.
        self.CONSTRAINTS = CONSTRAINTS
        self.NEIGHBORS = {}  # DICTIONARY OF NEIGHBORS: THE KEY OF THE DICTIONARY IS THE VARIABLE. THE VALUE OF THE DICTIONARY IS THE LIST OF NEIGHBORS OF THE VARIABLE. THE NEIGHBORS OF A VARIABLE ARE THE VARIABLES THAT SHARE A CONSTRAINT WITH THE VARIABLE.
        # FOR EACH VARIABLE, FIND THE NEIGHBORS OF THE VARIABLE.
        for VARIABLE in self.VARIABLES:
            # INITIALIZE THE LIST OF NEIGHBORS OF THE VARIABLE.
            self.NEIGHBORS[VARIABLE] = []
            # FOR EACH CONSTRAINT, FIND THE NEIGHBORS OF THE VARIABLE.
            for CONSTRAINT in self.CONSTRAINTS:
                # IF THE VARIABLE IS INVOLVED IN THE CONSTRAINT, FIND THE NEIGHBORS OF THE VARIABLE.
                if VARIABLE in CONSTRAINT:
                    # FOR EACH VARIABLE INVOLVED IN THE CONSTRAINT, FIND THE NEIGHBORS OF THE VARIABLE.
                    for VARIABLE_2 in CONSTRAINT:
                        # IF THE THEY ARE NOT THE SAME VARIABLE, ADD THE VARIABLE TO THE LIST OF NEIGHBORS OF THE VARIABLE.
                        if VARIABLE_2 != VARIABLE:
                            # ADD THE VARIABLE TO THE LIST OF NEIGHBORS OF THE VARIABLE.
                            self.NEIGHBORS[VARIABLE].append(VARIABLE_2)
