from .CSP_PROBLEM import CSP

# BACKTRACKING(): RUNS THE BACKTRACKING ALGORITHM.
def BACKTRACKING(CSP: CSP):
    # ASSIGNMENT, DICTIONARY, INITIALLY AN EMPTY DICTIONARY.
    ASSIGNMENT = {}
    # RETURN BACKTRACK(CSP, ASSIGNMENT).
    return __BACKTRACK__(CSP, ASSIGNMENT)

# __BACKTRACK__() [PRIVATE FUNCTION]: RETURNS THE ASSIGNMENT.
def __BACKTRACK__(CSP: CSP, ASSIGNMENT):
    # IF THE ASSIGNMENT IS COMPLETE, RETURN THE ASSIGNMENT.
    if __COMPLETE__(CSP, ASSIGNMENT):
        return ASSIGNMENT
    # VARIABLE, VARIABLE, THE VARIABLE TO BE ASSIGNED.
    VARIABLE = __SELECT_UNASSIGNED_VARIABLE__(CSP, ASSIGNMENT)
    # FOR EACH VALUE IN THE DOMAIN OF THE VARIABLE, DO THE FOLLOWING:
    for VALUE in CSP.DOMAINS[VARIABLE]:
        # IF THE VALUE IS CONSISTENT WITH THE ASSIGNMENT, DO THE FOLLOWING:
        if __CONSISTENT__(CSP, ASSIGNMENT, VARIABLE, VALUE):
            # ASSIGN THE VALUE TO THE VARIABLE.
            ASSIGNMENT[VARIABLE] = VALUE
            # INFER THE VALUE TO THE NEIGHBORS OF THE VARIABLE.
            __INFERENCE__(CSP, VARIABLE, VALUE)
            # RESULT, BOOLEAN, INDICATES IF THE ASSIGNMENT IS COMPLETE.
            RESULT = __BACKTRACK__(CSP, ASSIGNMENT)
            # IF THE ASSIGNMENT IS COMPLETE, RETURN THE ASSIGNMENT.
            if RESULT != False:
                return RESULT  # RETURN THE ASSIGNMENT.
            # IF THE ASSIGNMENT IS NOT COMPLETE, UNDO THE ASSIGNMENT.
            del ASSIGNMENT[VARIABLE]
            # UNDO THE INFERENCE.
            __UNDO_INFERENCE__(CSP, VARIABLE, VALUE)
    return False  # RETURN FALSE.

# __SELECT_UNASSIGNED_VARIABLE__(): [PRIVATE FUNCTION] RETURNS THE VARIABLE TO BE ASSIGNED.
def __SELECT_UNASSIGNED_VARIABLE__(CSP: CSP, ASSIGNMENT):
    # FOR EACH VARIABLE IN THE PROBLEM, DO THE FOLLOWING:
    for VARIABLE in CSP.VARIABLES:
        # IF THE VARIABLE IS NOT IN THE ASSIGNMENT, RETURN THE VARIABLE.
        if VARIABLE not in ASSIGNMENT:
            return VARIABLE  # RETURN THE VARIABLE.

# __COMPLETE__(): [PRIVATE FUNCTION] RETURNS TRUE IF THE ASSIGNMENT IS COMPLETE, OTHERWISE RETURNS FALSE.
def __COMPLETE__(CSP: CSP, ASSIGNMENT):
    # FOR EACH VARIABLE IN THE PROBLEM, DO THE FOLLOWING:
    for VARIABLE in CSP.VARIABLES:
        # IF THE VARIABLE IS NOT IN THE ASSIGNMENT, RETURN FALSE.
        if VARIABLE not in ASSIGNMENT:
            return False  # RETURN FALSE.
    return True  # RETURN TRUE.

# __UNDO_INFERENCE__(): [PRIVATE FUNCTION] UNDO THE INFERENCE.
def __UNDO_INFERENCE__(CSP: CSP, VARIABLE, VALUE):
    # FOR EACH NEIGHBOR OF THE VARIABLE, DO THE FOLLOWING:
    for NEIGHBOR in CSP.NEIGHBORS[VARIABLE]:
        # IF THE VALUE IS IN THE DOMAIN OF THE NEIGHBOR, REMOVE THE VALUE FROM THE DOMAIN OF THE NEIGHBOR.
        if VALUE in CSP.DOMAINS[NEIGHBOR]:
            # ADD THE VALUE TO THE DOMAIN OF THE NEIGHBOR.
            CSP.DOMAINS[NEIGHBOR].append(VALUE)

# __INFERENCE__(): [PRIVATE FUNCTION] INFERS THE VALUE TO THE NEIGHBORS OF THE VARIABLE.
def __INFERENCE__(CSP: CSP, VARIABLE, VALUE):
    # FOR EACH NEIGHBOR OF THE VARIABLE, DO THE FOLLOWING:
    for NEIGHBOR in CSP.NEIGHBORS[VARIABLE]:
        # IF THE VALUE IS IN THE DOMAIN OF THE NEIGHBOR, REMOVE THE VALUE FROM THE DOMAIN OF THE NEIGHBOR.
        if VALUE in CSP.DOMAINS[NEIGHBOR]:
            # REMOVE THE VALUE FROM THE DOMAIN OF THE NEIGHBOR.
            CSP.DOMAINS[NEIGHBOR].remove(VALUE)

# __CONSISTENT__(): [PRIVATE FUNCTION] RETURNS TRUE IF THE VALUE IS CONSISTENT WITH THE ASSIGNMENT, OTHERWISE RETURNS FALSE.
def __CONSISTENT__(CSP: CSP, ASSIGNMENT, VARIABLE, VALUE):
    # FOR EACH CONSTRAINT IN THE PROBLEM, DO THE FOLLOWING:
    for CONSTRAINT in CSP.CONSTRAINTS:
        # IF THE VARIABLE IS INVOLVED IN THE CONSTRAINT, DO THE FOLLOWING:
        if VARIABLE in CONSTRAINT:
            # FOR EACH VARIABLE INVOLVED IN THE CONSTRAINT, DO THE FOLLOWING:
            for VARIABLE_2 in CONSTRAINT:
                # IF THE VARIABLES ARE NOT THE SAME VARIABLE, DO THE FOLLOWING:
                if VARIABLE_2 != VARIABLE:
                    # IF THE VARIABLE_2 IS IN THE ASSIGNMENT, DO THE FOLLOWING:
                    if VARIABLE_2 in ASSIGNMENT:
                        # IF THE VALUE IS THE SAME AS THE VALUE OF THE VARIABLE_2, RETURN FALSE.
                        if VALUE == ASSIGNMENT[VARIABLE_2]:
                            return False  # RETURN FALSE.
    return True  # RETURN TRUE.