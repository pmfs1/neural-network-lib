from .CSP import CSP

# BACKTRACKING(): RUNS THE BACKTRACKING ALGORITHM.


def BACKTRACKING(CSP_PROBLEM: CSP):
    """RUNS THE BACKTRACKING ALGORITHM.

    PARAMETERS
    ----------
    CSP_PROBLEM : CSP
        THE CSP PROBLEM.

    RETURNS
    -------
    ASSIGNMENT
        THE ASSIGNMENT. IF THE ASSIGNMENT IS NOT COMPLETE, RETURNS FALSE.
    """
    # ASSIGNMENT, DICTIONARY, INITIALLY AN EMPTY DICTIONARY.
    ASSIGNMENT = {}
    # RETURN BACKTRACK(CSP_PROBLEM, ASSIGNMENT).
    return __BACKTRACK__(CSP_PROBLEM, ASSIGNMENT)

# __BACKTRACK__() [PRIVATE FUNCTION]: RETURNS THE ASSIGNMENT.


def __BACKTRACK__(CSP_PROBLEM: CSP, ASSIGNMENT):
    """[PRIVATE FUNCTION] RETURNS THE ASSIGNMENT.

    PARAMETERS
    ----------
    CSP_PROBLEM : CSP
        THE CSP PROBLEM.
    ASSIGNMENT : DICTIONARY
        THE ASSIGNMENT. INITIALLY AN EMPTY DICTIONARY. IT REPRESENTS A PARTIAL ASSIGNMENT.

    RETURNS
    -------
    ASSIGNMENT
        THE ASSIGNMENT. IF THE ASSIGNMENT IS NOT COMPLETE, RETURNS FALSE.
    """
    # IF THE ASSIGNMENT IS COMPLETE, RETURN THE ASSIGNMENT.
    if __COMPLETE__(CSP_PROBLEM, ASSIGNMENT):
        return ASSIGNMENT
    # VARIABLE, VARIABLE, THE VARIABLE TO BE ASSIGNED.
    VARIABLE = __SELECT_UNASSIGNED_VARIABLE__(CSP_PROBLEM, ASSIGNMENT)
    # FOR EACH VALUE IN THE DOMAIN OF THE VARIABLE, DO THE FOLLOWING:
    for VALUE in CSP_PROBLEM.DOMAINS[VARIABLE]:
        # IF THE VALUE IS CONSISTENT WITH THE ASSIGNMENT, DO THE FOLLOWING:
        if __CONSISTENT__(CSP_PROBLEM, ASSIGNMENT, VARIABLE, VALUE):
            # ASSIGN THE VALUE TO THE VARIABLE.
            ASSIGNMENT[VARIABLE] = VALUE
            # INFER THE VALUE TO THE NEIGHBORS OF THE VARIABLE.
            __INFERENCE__(CSP_PROBLEM, VARIABLE, VALUE)
            # RESULT, BOOLEAN, INDICATES IF THE ASSIGNMENT IS COMPLETE.
            RESULT = __BACKTRACK__(CSP_PROBLEM, ASSIGNMENT)
            # IF THE ASSIGNMENT IS COMPLETE, RETURN THE ASSIGNMENT.
            if RESULT is not False:
                return RESULT  # RETURN THE ASSIGNMENT.
            # IF THE ASSIGNMENT IS NOT COMPLETE, UNDO THE ASSIGNMENT.
            del ASSIGNMENT[VARIABLE]
            # UNDO THE INFERENCE.
            __UNDO_INFERENCE__(CSP_PROBLEM, VARIABLE, VALUE)
    return False  # RETURN FALSE.

# __SELECT_UNASSIGNED_VARIABLE__(): [PRIVATE FUNCTION] RETURNS THE VARIABLE TO BE ASSIGNED.


def __SELECT_UNASSIGNED_VARIABLE__(CSP_PROBLEM: CSP, ASSIGNMENT):
    """[PRIVATE FUNCTION] RETURNS THE VARIABLE TO BE ASSIGNED.

    PARAMETERS
    ----------
    CSP_PROBLEM : CSP
        THE CSP PROBLEM.
    ASSIGNMENT : DICTIONARY
        THE ASSIGNMENT.

    RETURNS
    -------
    VARIABLE
        THE VARIABLE TO BE ASSIGNED. IF THE ASSIGNMENT IS COMPLETE, RETURNS NONE.
    """
    # FOR EACH VARIABLE IN THE PROBLEM, DO THE FOLLOWING:
    for VARIABLE in CSP_PROBLEM.VARIABLES:
        # IF THE VARIABLE IS NOT IN THE ASSIGNMENT, RETURN THE VARIABLE.
        if VARIABLE not in ASSIGNMENT:
            return VARIABLE  # RETURN THE VARIABLE.
    # IF THE ASSIGNMENT IS COMPLETE, RETURN NONE.
    return None  # RETURN NONE.

# __COMPLETE__(): [PRIVATE FUNCTION] RETURNS TRUE IF THE ASSIGNMENT IS COMPLETE, OTHERWISE RETURNS FALSE.


def __COMPLETE__(CSP_PROBLEM: CSP, ASSIGNMENT):
    """[PRIVATE FUNCTION] RETURNS TRUE IF THE ASSIGNMENT IS COMPLETE, OTHERWISE RETURNS FALSE.

    PARAMETERS
    ----------
    CSP_PROBLEM : CSP
        THE CSP PROBLEM.
    ASSIGNMENT : DICTIONARY
        THE ASSIGNMENT.

    RETURNS
    -------
    BOOLEAN
        TRUE IF THE ASSIGNMENT IS COMPLETE, OTHERWISE FALSE.
    """
    # FOR EACH VARIABLE IN THE PROBLEM, DO THE FOLLOWING:
    for VARIABLE in CSP_PROBLEM.VARIABLES:
        # IF THE VARIABLE IS NOT IN THE ASSIGNMENT, RETURN FALSE.
        if VARIABLE not in ASSIGNMENT:
            return False  # RETURN FALSE.
    return True  # RETURN TRUE.

# __UNDO_INFERENCE__(): [PRIVATE FUNCTION] UNDO THE INFERENCE.


def __UNDO_INFERENCE__(CSP_PROBLEM: CSP, VARIABLE, VALUE):
    """[PRIVATE FUNCTION] UNDO THE INFERENCE.

    PARAMETERS
    ----------
    CSP_PROBLEM : CSP
        THE CSP PROBLEM.
    VARIABLE : VARIABLE
        THE VARIABLE.
    VALUE : VALUE
        THE VALUE.

    RETURNS
    -------
    NONE
    """
    # FOR EACH NEIGHBOR OF THE VARIABLE, DO THE FOLLOWING:
    for NEIGHBOR in CSP_PROBLEM.NEIGHBORS[VARIABLE]:
        # IF THE VALUE IS IN THE DOMAIN OF THE NEIGHBOR, REMOVE THE VALUE FROM THE DOMAIN OF THE NEIGHBOR.
        if VALUE in CSP_PROBLEM.DOMAINS[NEIGHBOR]:
            # ADD THE VALUE TO THE DOMAIN OF THE NEIGHBOR.
            CSP_PROBLEM.DOMAINS[NEIGHBOR].append(VALUE)

# __INFERENCE__(): [PRIVATE FUNCTION] INFERS THE VALUE TO THE NEIGHBORS OF THE VARIABLE.


def __INFERENCE__(CSP_PROBLEM: CSP, VARIABLE, VALUE):
    """[PRIVATE FUNCTION] INFERS THE VALUE TO THE NEIGHBORS OF THE VARIABLE.

    PARAMETERS
    ----------
    CSP_PROBLEM : CSP
        THE CSP PROBLEM.
    VARIABLE : VARIABLE
        THE VARIABLE.
    VALUE : VALUE
        THE VALUE.

    RETURNS
    -------
    NONE
    """
    # FOR EACH NEIGHBOR OF THE VARIABLE, DO THE FOLLOWING:
    for NEIGHBOR in CSP_PROBLEM.NEIGHBORS[VARIABLE]:
        # IF THE VALUE IS IN THE DOMAIN OF THE NEIGHBOR, REMOVE THE VALUE FROM THE DOMAIN OF THE NEIGHBOR.
        if VALUE in CSP_PROBLEM.DOMAINS[NEIGHBOR]:
            # REMOVE THE VALUE FROM THE DOMAIN OF THE NEIGHBOR.
            CSP_PROBLEM.DOMAINS[NEIGHBOR].remove(VALUE)

# __CONSISTENT__(): [PRIVATE FUNCTION] RETURNS TRUE IF THE VALUE IS CONSISTENT WITH THE ASSIGNMENT, OTHERWISE RETURNS FALSE.


def __CONSISTENT__(CSP_PROBLEM: CSP, ASSIGNMENT, VARIABLE, VALUE):
    """[PRIVATE FUNCTION] RETURNS TRUE IF THE VALUE IS CONSISTENT WITH THE ASSIGNMENT, OTHERWISE RETURNS FALSE.

    PARAMETERS
    ----------
    CSP_PROBLEM : CSP
        THE CSP PROBLEM.
    ASSIGNMENT : DICTIONARY
        THE ASSIGNMENT.
    VARIABLE : VARIABLE
        THE VARIABLE.
    VALUE : VALUE
        THE VALUE.

    RETURNS
    -------
    BOOLEAN
        TRUE IF THE VALUE IS CONSISTENT WITH THE ASSIGNMENT, OTHERWISE FALSE.
    """
    # FOR EACH CONSTRAINT IN THE PROBLEM, DO THE FOLLOWING:
    for CONSTRAINT in CSP_PROBLEM.CONSTRAINTS:
        # IF THE VARIABLE IS INVOLVED IN THE CONSTRAINT, DO THE FOLLOWING:
        if VARIABLE in CONSTRAINT:
            # FOR EACH VARIABLE INVOLVED IN THE CONSTRAINT, DO THE FOLLOWING:
            for VARIABLE_2 in CONSTRAINT:
                # IF THE VARIABLES ARE NOT THE SAME VARIABLE, DO THE FOLLOWING:
                if VARIABLE_2 != VARIABLE:
                    # IF THE VARIABLE_2 IS IN THE ASSIGNMENT, DO THE FOLLOWING:
                    if VARIABLE_2 in ASSIGNMENT:
                        # IF THE VALUE IS THE SAME AS THE VALUE OF THE VARIABLE_2, RETURN FALSE.
                        if VALUE == ASSIGNMENT[VARIABLE_2]:
                            return False  # RETURN FALSE.
    return True  # RETURN TRUE.
