import math

# DISCRETE_UNIFORM_DISTRIBUTION: IMPLEMENTATION OF DISCRETE UNIFORM DISTRIBUTION. THE DISCRETE UNIFORM DISTRIBUTION, WHERE ALL ELEMENTS OF A FINITE SET ARE EQUALLY LIKELY. THIS IS THE THEORETICAL DISTRIBUTION MODEL FOR A BALANCED COIN, AN UNBIASED DIE, A CASINO ROULETTE, OR THE FIRST CARD OF A WELL-SHUFFLED DECK.
class DISCRETE_UNIFORM_DISTRIBUTION:
    # PROBABILITY_MASS_FUNCTION [STATIC]: PROBABILITY MASS FUNCTION OF DISCRETE UNIFORM DISTRIBUTION
    @staticmethod
    def PROBABILITY_MASS_FUNCTION(K: int, A: int, B: int) -> float:
        assert A <= B, "A MUST BE LESS THAN OR EQUAL TO B" # ASSERT A IS LESS THAN OR EQUAL TO B
        assert K >= A and K <= B, "K MUST BE GREATER THAN OR EQUAL TO A AND LESS THAN OR EQUAL TO B" # ASSERT K IS GREATER THAN OR EQUAL TO A AND LESS THAN OR EQUAL TO B
        return 1 / (B - A + 1) # RETURN 1 / (B - A + 1)
    
    # CUMULATIVE_DISTRIBUTION_FUNCTION [STATIC]: CUMULATIVE DISTRIBUTION FUNCTION OF DISCRETE UNIFORM DISTRIBUTION
    @staticmethod
    def CUMULATIVE_DISTRIBUTION_FUNCTION(K: int, A: int, B: int) -> float:
        assert A <= B, "A MUST BE LESS THAN OR EQUAL TO B" # ASSERT A IS LESS THAN OR EQUAL TO B
        assert K >= A and K <= B, "K MUST BE GREATER THAN OR EQUAL TO A AND LESS THAN OR EQUAL TO B" # ASSERT K IS GREATER THAN OR EQUAL TO A AND LESS THAN OR EQUAL TO B
        return (math.floor(K) - A + 1) / (B - A + 1) # RETURN (K - A + 1) / (B - A + 1)