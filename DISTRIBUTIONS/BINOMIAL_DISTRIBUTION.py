import math

# BINOMIAL_DISTRIBUTION [STATIC]: IMPLEMENTATION OF BINOMIAL DISTRIBUTION. THE BINOMIAL DISTRIBUTION, WHICH DESCRIBES THE NUMBER OF SUCCESSES IN A SERIES OF INDEPENDENT YES/NO EXPERIMENTS ALL WITH THE SAME PROBABILITY OF SUCCESS. A SPECIAL CASE OF A BINOMIAL DISTRIBUTION IS A BERNOULLI DISTRIBUTION WHERE N = 1.
class BINOMIAL_DISTRIBUTION:
    # PROBABILITY_MASS_FUNCTION [STATIC]: IN PROBABILITY AND STATISTICS, A PROBABILITY MASS FUNCTION IS A FUNCTION THAT GIVES THE PROBABILITY THAT A DISCRETE RANDOM VARIABLE IS EXACTLY EQUAL TO SOME VALUE. THE PROBABILITY MASS FUNCTION IS OFTEN THE PRIMARY MEANS OF DEFINING A DISCRETE PROBABILITY DISTRIBUTION, AND SUCH FUNCTIONS EXIST FOR EITHER DISCRETE RANDOM VARIABLES OR CONTINUOUS RANDOM VARIABLES WHOSE CUMULATIVE DISTRIBUTION FUNCTION IS DISCONTINUOUS. THE PROBABILITY MASS FUNCTION IS SOMETIMES ALSO CALLED THE PROBABILITY FUNCTION, OR THE PROBABILITY DISTRIBUTION FUNCTION.
    # NOTE: THE PROBABILITY MASS FUNCTION OF A BINOMIAL DISTRIBUTION IS ALSO KNOWN AS THE BINOMIAL COEFFICIENT.
    @staticmethod
    def PROBABILITY_MASS_FUNCTION(K: int, N: int, P: float) -> float:
        assert P >= 0 and P <= 1, "P MUST BE GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO 1"  # ASSERT P IS GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO 1
        assert N >= 0, "N MUST BE GREATER THAN OR EQUAL TO 0"  # ASSERT N IS GREATER THAN OR EQUAL TO 0
        if K >= 0 and K <= N:  # IF K IS GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO N
            return (math.factorial(N) / (math.factorial(K) * math.factorial(N - K))) * (P ** K) * ((1 - P) ** (N - K))  # RETURN (N CHOOSE K) * P ** K * (1 - P) ** (N - K)
        else:  # ELSE K IS NOT GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO N (K IS NOT A VALID VALUE)
            raise ValueError("K MUST BE GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO N")  # RAISE VALUE ERROR

    # CUMULATIVE_DISTRIBUTION_FUNCTION [STATIC]: IN PROBABILITY THEORY AND STATISTICS, THE CUMULATIVE DISTRIBUTION FUNCTION (CDF) OF A REAL-VALUED RANDOM VARIABLE X, OR JUST DISTRIBUTION FUNCTION OF X, EVALUATED AT X, IS THE PROBABILITY THAT X WILL TAKE A VALUE LESS THAN OR EQUAL TO X.
    # NOTE: THE CUMULATIVE DISTRIBUTION FUNCTION OF A BINOMIAL DISTRIBUTION IS ALSO KNOWN AS THE REGULARIZED INCOMPLETE BETA FUNCTION.
    @staticmethod
    def CUMULATIVE_DISTRIBUTION_FUNCTION(K: int, N: int, P: float) -> float:
        assert P >= 0 and P <= 1, "P MUST BE GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO 1"  # ASSERT P IS GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO 1
        assert N >= 0, "N MUST BE GREATER THAN OR EQUAL TO 0"  # ASSERT N IS GREATER THAN OR EQUAL TO 0
        if K >= 0 and K <= N:  # IF K IS GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO N
            return sum([(math.factorial(N) / (math.factorial(i) * math.factorial(N - i))) * (P**i) * ((1 - P)**(N - i)) for i in range(math.floor(K))])  # RETURN SUM OF PROBABILITY MASS FUNCTION FROM 0 TO K
        else:  # ELSE K IS NOT GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO N (K IS NOT A VALID VALUE)
            raise ValueError("K MUST BE GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO N")  # RAISE VALUE ERROR