import math

# POISSON_DISTRIBUTION: IMPLEMENTATION OF POISSON DISTRIBUTION. THE POISSON DISTRIBUTION, WHICH DESCRIBES A VERY LARGE NUMBER OF INDIVIDUALLY UNLIKELY EVENTS THAT HAPPEN IN A CERTAIN TIME INTERVAL. THE POISSON DISTRIBUTION, WHICH TAKES VALUE K WITH PROBABILITY LAMBDA^K * E^-LAMBDA / K!, WHERE LAMBDA IS THE EXPECTED VALUE OF THE DISTRIBUTION.
class POISSON_DISTRIBUTION:
    # PROBABILITY_MASS_FUNCTION [STATIC]: PROBABILITY MASS FUNCTION OF POISSON DISTRIBUTION
    @staticmethod
    def PROBABILITY_MASS_FUNCTION(K: int, LAMBDA: float) -> float:
        assert LAMBDA >= 0, "LAMBDA MUST BE GREATER THAN OR EQUAL TO 0" # ASSERT LAMBDA IS GREATER THAN OR EQUAL TO 0
        if K < 0: # IF K IS LESS THAN 0
            return 0 # RETURN 0
        else: # ELSE K IS GREATER THAN OR EQUAL TO 0
            return (LAMBDA ** K) * (math.e ** (-LAMBDA)) / math.factorial(K) # RETURN LAMBDA^K * E^-LAMBDA / K!
        
    # CUMULATIVE_DISTRIBUTION_FUNCTION [STATIC]: CUMULATIVE DISTRIBUTION FUNCTION OF POISSON DISTRIBUTION
    @staticmethod
    def CUMULATIVE_DISTRIBUTION_FUNCTION(K: int, LAMBDA: float) -> float:
        assert LAMBDA >= 0, "LAMBDA MUST BE GREATER THAN OR EQUAL TO 0" # ASSERT LAMBDA IS GREATER THAN OR EQUAL TO 0
        if K < 0: # IF K IS LESS THAN 0
            return 0 # RETURN 0
        else: # ELSE K IS GREATER THAN OR EQUAL TO 0
            return sum([POISSON_DISTRIBUTION.PROBABILITY_MASS_FUNCTION(I, LAMBDA) for I in range(0, K + 1)]) # RETURN SUMMATION OF PROBABILITY_MASS_FUNCTION(I, LAMBDA) FOR I = 0 TO K