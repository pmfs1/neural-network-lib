import numpy as np
from .CSP import CSP

# THE `MIN_CONFLICTS` FUNCTION IS AN IMPLEMENTATION OF THE MINIMUM CONFLICTS ALGORITHM FOR SOLVING CONSTRAINT SATISFACTION PROBLEMS (CSPS). IT TAKES A CSP PROBLEM INSTANCE AND THE MAXIMUM NUMBER OF STEPS AS INPUT AND RETURNS A DICTIONARY REPRESENTING A VALID ASSIGNMENT OF VALUES TO VARIABLES THAT SATISFIES ALL THE CONSTRAINTS IN THE PROBLEM, OR FALSE IF NO SOLUTION IS FOUND WITHIN THE MAXIMUM NUMBER OF STEPS.
#     THE FUNCTION CONSISTS OF SEVERAL HELPER FUNCTIONS THAT ARE USED IN THE ALGORITHM:
#         - `__SELECT_VARIABLE__(ASSIGNMENT: DICT) -> STR | NONE`: THIS FUNCTION SELECTS A VARIABLE FROM THE CSP PROBLEM BASED ON THE MINIMUM NUMBER OF CONFLICTS IT HAS IN THE CURRENT ASSIGNMENT. IT ITERATES OVER THE VARIABLES IN THE PROBLEM AND CALCULATES THE NUMBER OF CONFLICTS FOR EACH VARIABLE USING THE `__CONFLICTS__` FUNCTION. IT RETURNS THE VARIABLE WITH THE MINIMUM CONFLICTS, OR NONE IF NO VARIABLE IS FOUND.
#         - `__SELECT_VALUE__(ASSIGNMENT: DICT, VARIABLE: STR) -> STR | NONE`: THIS FUNCTION SELECTS A VALUE FOR A GIVEN VARIABLE THAT MINIMIZES THE NUMBER OF CONFLICTS IT INTRODUCES IN THE CURRENT ASSIGNMENT. IT ITERATES OVER THE DOMAIN OF VALUES FOR THE VARIABLE AND CALCULATES THE NUMBER OF CONFLICTS FOR EACH VALUE USING THE `__CONFLICTS__` FUNCTION. IT RETURNS THE VALUE WITH THE MINIMUM CONFLICTS, OR NONE IF NO VALUE IS FOUND.
#         - `__CONFLICTS__(ASSIGNMENT: DICT, VARIABLE: STR, VALUE: STR | NONE = NONE) -> INT`: THIS FUNCTION CALCULATES THE NUMBER OF CONFLICTS A VARIABLE-VALUE ASSIGNMENT HAS WITH THE CONSTRAINTS IN THE CSP. IT ITERATES OVER THE CONSTRAINTS AND CHECKS IF THE VARIABLE IS INVOLVED IN EACH CONSTRAINT. IF IT IS, IT RETRIEVES THE CORRESPONDING VALUES OF THE VARIABLES IN THE CONSTRAINT AND CHECKS IF THEY ARE EQUAL. IF THE VALUES ARE EQUAL, IT INCREMENTS THE CONFLICT COUNT. THE FUNCTION RETURNS THE TOTAL NUMBER OF CONFLICTS.
#         - `__COMPLETE__(ASSIGNMENT: DICT) -> BOOL`: THIS FUNCTION CHECKS IF THE ASSIGNMENT OF VALUES TO VARIABLES IS COMPLETE, I.E., IF ALL VARIABLES IN THE CSP HAVE BEEN ASSIGNED A VALUE. IT ITERATES OVER THE VARIABLES AND CHECKS IF EACH VARIABLE IS PRESENT IN THE ASSIGNMENT DICTIONARY. IF ANY VARIABLE IS MISSING, IT RETURNS FALSE. OTHERWISE, IT RETURNS TRUE.
#     1. THE MAIN BODY OF THE `MIN_CONFLICTS` FUNCTION STARTS BY INITIALIZING AN EMPTY ASSIGNMENT DICTIONARY. THEN, FOR EACH VARIABLE IN THE CSP, IT RANDOMLY ASSIGNS A VALUE FROM THE VARIABLE'S DOMAIN TO THE ASSIGNMENT DICTIONARY.
#     2. THE FUNCTION THEN ENTERS A LOOP THAT RUNS FOR A MAXIMUM NUMBER OF STEPS. IN EACH ITERATION, IT CHECKS IF THE ASSIGNMENT IS COMPLETE USING THE `__COMPLETE__` FUNCTION. IF THE ASSIGNMENT IS COMPLETE, IT MEANS A SOLUTION HAS BEEN FOUND, SO THE FUNCTION RETURNS THE ASSIGNMENT.
#     3. NEXT, IT SELECTS A VARIABLE USING THE `__SELECT_VARIABLE__` FUNCTION. IF NO VARIABLE IS FOUND (I.E., NONE IS RETURNED), IT MEANS THERE IS NO VALID ASSIGNMENT THAT SATISFIES THE CONSTRAINTS, SO THE FUNCTION RETURNS FALSE.
#     4. IF A VARIABLE IS FOUND, IT SELECTS A VALUE FOR THAT VARIABLE USING THE `__SELECT_VALUE__` FUNCTION AND UPDATES THE ASSIGNMENT DICTIONARY ACCORDINGLY.
#     5. AFTER THE LOOP COMPLETES, IF NO SOLUTION IS FOUND WITHIN THE MAXIMUM NUMBER OF STEPS, THE FUNCTION RETURNS FALSE TO INDICATE FAILURE TO FIND A SOLUTION.
# OVERALL, THE `MIN_CONFLICTS` FUNCTION USES ITERATIVE IMPROVEMENT TO FIND A SOLUTION TO A CSP BY ITERATIVELY SELECTING VARIABLES AND VALUES THAT MINIMIZE CONFLICTS WITH THE CONSTRAINTS. IT IS A HEURISTIC ALGORITHM THAT CAN FIND APPROXIMATE SOLUTIONS QUICKLY BUT DOES NOT GUARANTEE OPTIMALITY.
def MIN_CONFLICTS(CSP_PROBLEM: CSP, MAX_STEPS: int) -> dict | bool:
    """THE `MIN_CONFLICTS` FUNCTION IS AN IMPLEMENTATION OF THE MINIMUM CONFLICTS ALGORITHM FOR SOLVING CONSTRAINT SATISFACTION PROBLEMS (CSPS). IT TAKES A CSP PROBLEM INSTANCE AND THE MAXIMUM NUMBER OF STEPS AS INPUT AND RETURNS A DICTIONARY REPRESENTING A VALID ASSIGNMENT OF VALUES TO VARIABLES THAT SATISFIES ALL THE CONSTRAINTS IN THE PROBLEM, OR FALSE IF NO SOLUTION IS FOUND WITHIN THE MAXIMUM NUMBER OF STEPS."""

    # THE `__SELECT_VARIABLE__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `MIN_CONFLICTS` ALGORITHM TO SELECT A VARIABLE FROM A CONSTRAINT SATISFACTION PROBLEM (CSP) BASED ON THE MINIMUM NUMBER OF CONFLICTS IT HAS IN THE CURRENT ASSIGNMENT.
    #     1. INITIALIZE THE `VARIABLE` VARIABLE TO `NONE`: THIS VARIABLE WILL STORE THE SELECTED VARIABLE WITH THE MINIMUM NUMBER OF CONFLICTS.
    #     2. INITIALIZE THE `MINIMUM` VARIABLE TO POSITIVE INFINITY: THIS VARIABLE WILL STORE THE MINIMUM NUMBER OF CONFLICTS FOUND SO FAR. IT IS INITIALLY SET TO A LARGE VALUE TO ENSURE ANY ENCOUNTERED CONFLICTS WILL BE LOWER.
    #     3. ITERATE THROUGH EACH VARIABLE IN THE CSP PROBLEM: THE FUNCTION ITERATES OVER EACH VARIABLE, DENOTED AS `_VARIABLE`, IN THE LIST OF VARIABLES (`CSP_PROBLEM.VARIABLES`).
    #     4. CHECK THE NUMBER OF CONFLICTS FOR THE CURRENT VARIABLE: THE `__CONFLICTS__` FUNCTION IS CALLED, PASSING THE CSP PROBLEM, THE CURRENT ASSIGNMENT (`ASSIGNMENT`), AND THE CURRENT VARIABLE (`_VARIABLE`). IT RETURNS THE NUMBER OF CONFLICTS FOR THAT VARIABLE IN THE CURRENT ASSIGNMENT.
    #     5. COMPARE THE NUMBER OF CONFLICTS WITH THE CURRENT MINIMUM: IF THE NUMBER OF CONFLICTS FOR THE CURRENT VARIABLE IS LESS THAN THE CURRENT MINIMUM, IT BECOMES THE NEW MINIMUM, AND THE CURRENT VARIABLE IS STORED IN THE `VARIABLE` VARIABLE.
    #     6. RETURN THE SELECTED VARIABLE: AFTER ITERATING THROUGH ALL VARIABLES, THE FUNCTION RETURNS THE VARIABLE WITH THE MINIMUM NUMBER OF CONFLICTS (STORED IN THE `VARIABLE` VARIABLE). IF NO VARIABLE HAS BEEN SELECTED (I.E., ALL VARIABLES HAVE THE SAME NUMBER OF CONFLICTS), `NONE` IS RETURNED.
    # IN SUMMARY, THE `__SELECT_VARIABLE__` FUNCTION EVALUATES THE NUMBER OF CONFLICTS FOR EACH VARIABLE IN THE CSP PROBLEM BASED ON THE CURRENT ASSIGNMENT. IT SELECTS THE VARIABLE WITH THE MINIMUM NUMBER OF CONFLICTS AND RETURNS IT. THIS HEURISTIC AIMS TO PRIORITIZE VARIABLES THAT ARE INVOLVED IN MORE CONFLICTS, AS MODIFYING THOSE VARIABLES IS MORE LIKELY TO IMPROVE THE OVERALL ASSIGNMENT AND LEAD TO A SOLUTION.
    def __SELECT_VARIABLE__(ASSIGNMENT: dict) -> str | None:
        """THE `__SELECT_VARIABLE__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `MIN_CONFLICTS` ALGORITHM TO SELECT A VARIABLE FROM A CONSTRAINT SATISFACTION PROBLEM (CSP) BASED ON THE MINIMUM NUMBER OF CONFLICTS IT HAS IN THE CURRENT ASSIGNMENT."""
        VARIABLE = None  # INITIALIZE THE VARIABLE TO NONE
        MINIMUM = float('inf')  # INITIALIZE THE MINIMUM TO POSITIVE INFINITY
        for _VARIABLE in CSP_PROBLEM.VARIABLES:  # ITERATE THROUGH EACH VARIABLE IN THE CSP PROBLEM
            # CHECK THE NUMBER OF CONFLICTS FOR THE CURRENT VARIABLE
            if __CONFLICTS__(ASSIGNMENT, _VARIABLE) < MINIMUM:
                # COMPARE THE NUMBER OF CONFLICTS WITH THE CURRENT MINIMUM
                MINIMUM = __CONFLICTS__(ASSIGNMENT, _VARIABLE)
                # STORE THE CURRENT VARIABLE IF IT HAS THE MINIMUM NUMBER OF CONFLICTS
                VARIABLE = _VARIABLE
        return VARIABLE  # RETURN THE SELECTED VARIABLE

    # THE `__SELECT_VALUE__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `MIN_CONFLICTS` ALGORITHM TO SELECT A VALUE FOR A GIVEN VARIABLE THAT MINIMIZES THE NUMBER OF CONFLICTS IT INTRODUCES IN THE CURRENT ASSIGNMENT.
    #     1. INITIALIZE THE `VALUE` VARIABLE TO `NONE`: THIS VARIABLE WILL STORE THE SELECTED VALUE FOR THE VARIABLE.
    #     2. INITIALIZE THE `MINIMUM` VARIABLE TO POSITIVE INFINITY: THIS VARIABLE WILL STORE THE MINIMUM NUMBER OF CONFLICTS FOUND SO FAR. IT IS INITIALLY SET TO A LARGE VALUE TO ENSURE ANY ENCOUNTERED CONFLICTS WILL BE LOWER.
    #     3. ITERATE THROUGH EACH VALUE IN THE DOMAIN OF THE GIVEN VARIABLE: THE FUNCTION ITERATES OVER EACH VALUE, DENOTED AS `_VALUE`, IN THE DOMAIN OF THE GIVEN VARIABLE (`CSP_PROBLEM.DOMAINS[VARIABLE]`).
    #     4. CHECK THE NUMBER OF CONFLICTS FOR THE CURRENT VARIABLE-VALUE ASSIGNMENT: THE `__CONFLICTS__` FUNCTION IS CALLED, PASSING THE CSP PROBLEM, THE CURRENT ASSIGNMENT (`ASSIGNMENT`), THE GIVEN VARIABLE, AND THE CURRENT VALUE (`_VALUE`). IT RETURNS THE NUMBER OF CONFLICTS FOR THAT VARIABLE-VALUE ASSIGNMENT IN THE CURRENT ASSIGNMENT.
    #     5. COMPARE THE NUMBER OF CONFLICTS WITH THE CURRENT MINIMUM: IF THE NUMBER OF CONFLICTS FOR THE CURRENT VARIABLE-VALUE ASSIGNMENT IS LESS THAN THE CURRENT MINIMUM, IT BECOMES THE NEW MINIMUM, AND THE CURRENT VALUE IS STORED IN THE `VALUE` VARIABLE.
    #     6. RETURN THE SELECTED VALUE: AFTER ITERATING THROUGH ALL VALUES, THE FUNCTION RETURNS THE VALUE THAT INTRODUCES THE MINIMUM NUMBER OF CONFLICTS (STORED IN THE `VALUE` VARIABLE). IF NO VALUE HAS BEEN SELECTED (I.E., ALL VALUES HAVE THE SAME NUMBER OF CONFLICTS), `NONE` IS RETURNED.
    # IN SUMMARY, THE `__SELECT_VALUE__` FUNCTION EVALUATES THE NUMBER OF CONFLICTS INTRODUCED BY EACH VALUE FOR A GIVEN VARIABLE IN THE CSP PROBLEM BASED ON THE CURRENT ASSIGNMENT. IT SELECTS THE VALUE THAT MINIMIZES THE CONFLICTS AND RETURNS IT. THIS HEURISTIC AIMS TO PRIORITIZE VALUES THAT ARE MORE LIKELY TO LEAD TO A BETTER ASSIGNMENT BY MINIMIZING CONFLICTS AND IMPROVING THE OVERALL SATISFACTION OF THE CONSTRAINTS.
    def __SELECT_VALUE__(ASSIGNMENT: dict, VARIABLE: str) -> str | None:
        """THE `__SELECT_VALUE__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `MIN_CONFLICTS` ALGORITHM TO SELECT A VALUE FOR A GIVEN VARIABLE THAT MINIMIZES THE NUMBER OF CONFLICTS IT INTRODUCES IN THE CURRENT ASSIGNMENT."""
        VALUE = None  # INITIALIZE THE VALUE TO NONE
        MINIMUM = float('inf')  # INITIALIZE THE MINIMUM TO POSITIVE INFINITY
        # ITERATE THROUGH EACH VALUE IN THE DOMAIN OF THE GIVEN VARIABLE
        for _VALUE in CSP_PROBLEM.DOMAINS[VARIABLE]:
            # CHECK THE NUMBER OF CONFLICTS FOR THE CURRENT VARIABLE-VALUE ASSIGNMENT
            if __CONFLICTS__(ASSIGNMENT, VARIABLE, _VALUE) < MINIMUM:
                # COMPARE THE NUMBER OF CONFLICTS WITH THE CURRENT MINIMUM
                MINIMUM = __CONFLICTS__(ASSIGNMENT, VARIABLE, _VALUE)
                VALUE = _VALUE  # STORE THE CURRENT VALUE IF IT HAS THE MINIMUM NUMBER OF CONFLICTS
        return VALUE  # RETURN THE SELECTED VALUE

    # THE `__CONFLICTS__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `MIN_CONFLICTS` ALGORITHM TO CALCULATE THE NUMBER OF CONFLICTS A VARIABLE-VALUE ASSIGNMENT HAS WITH THE CONSTRAINTS IN A CONSTRAINT SATISFACTION PROBLEM (CSP).
    #     1. INITIALIZE THE `CONFLICTS` VARIABLE TO 0: THIS VARIABLE WILL STORE THE NUMBER OF CONFLICTS ENCOUNTERED.
    #     2. ITERATE THROUGH EACH CONSTRAINT IN THE CSP PROBLEM: THE FUNCTION ITERATES OVER EACH CONSTRAINT, DENOTED AS `CONSTRAINT`, IN THE LIST OF CONSTRAINTS (`CSP_PROBLEM.CONSTRAINTS`).
    #     3. CHECK IF THE GIVEN VARIABLE IS INVOLVED IN THE CURRENT CONSTRAINT: THE FUNCTION CHECKS IF THE GIVEN VARIABLE IS PRESENT IN THE CURRENT CONSTRAINT BY COMPARING IT WITH THE FIRST VARIABLE (`VARIABLE_1`) AND THE SECOND VARIABLE (`VARIABLE_2`) IN THE CONSTRAINT.
    #     4. DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT: DEPENDING ON WHETHER THE GIVEN VARIABLE MATCHES `VARIABLE_1` OR `VARIABLE_2`, THE FUNCTION ASSIGNS THE CORRESPONDING VALUES (`VALUE_1` AND `VALUE_2`) FROM THE ASSIGNMENT DICTIONARY (`ASSIGNMENT`) ACCORDINGLY.
    #     5. CHECK IF THE VALUES OF THE TWO VARIABLES ARE THE SAME: IF `VALUE_1` IS EQUAL TO `VALUE_2`, IT INDICATES A CONFLICT. THE NUMBER OF CONFLICTS (`CONFLICTS`) IS INCREMENTED BY 1.
    #     6. RETURN THE NUMBER OF CONFLICTS: AFTER CHECKING ALL CONSTRAINTS, THE FUNCTION RETURNS THE TOTAL NUMBER OF CONFLICTS ENCOUNTERED.
    # IN SUMMARY, THE `__CONFLICTS__` FUNCTION CALCULATES THE NUMBER OF CONFLICTS FOR A GIVEN VARIABLE-VALUE ASSIGNMENT IN A CSP PROBLEM. IT ITERATES THROUGH THE CONSTRAINTS AND CHECKS IF THE GIVEN VARIABLE IS INVOLVED. IF IT IS, IT COMPARES THE ASSIGNED VALUE WITH THE VALUE OF THE OTHER VARIABLE IN THE CONSTRAINT. IF THEY ARE THE SAME, IT INCREMENTS THE CONFLICT COUNT. THE FUNCTION RETURNS THE TOTAL NUMBER OF CONFLICTS ENCOUNTERED. THIS INFORMATION IS USED BY THE `MIN_CONFLICTS` ALGORITHM TO SELECT VARIABLES AND VALUES THAT MINIMIZE CONFLICTS AND IMPROVE THE ASSIGNMENT'S SATISFACTION OF THE CONSTRAINTS.
    def __CONFLICTS__(ASSIGNMENT: dict, VARIABLE: str, VALUE: str | None = None) -> int:
        """THE `__CONFLICTS__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `MIN_CONFLICTS` ALGORITHM TO CALCULATE THE NUMBER OF CONFLICTS A VARIABLE-VALUE ASSIGNMENT HAS WITH THE CONSTRAINTS IN A CONSTRAINT SATISFACTION PROBLEM (CSP)."""
        CONFLICTS = 0  # INITIALIZE THE CONFLICTS TO 0
        for CONSTRAINT in CSP_PROBLEM.CONSTRAINTS:  # ITERATE THROUGH EACH CONSTRAINT IN THE CSP PROBLEM
            if VARIABLE in CONSTRAINT:  # CHECK IF THE GIVEN VARIABLE IS INVOLVED IN THE CURRENT CONSTRAINT
                VALUE_1 = None  # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                VALUE_2 = None  # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                VARIABLE_1 = CONSTRAINT[0]
                # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                VARIABLE_2 = CONSTRAINT[1]
                if VARIABLE == VARIABLE_1:  # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                    VALUE_1 = VALUE  # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                    # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                    VALUE_2 = ASSIGNMENT[VARIABLE_2]
                elif VARIABLE == VARIABLE_2:  # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                    # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                    VALUE_1 = ASSIGNMENT[VARIABLE_1]
                    VALUE_2 = VALUE  # DETERMINE THE VALUES OF THE TWO VARIABLES INVOLVED IN THE CONSTRAINT
                if VALUE_1 == VALUE_2:  # CHECK IF THE VALUES OF THE TWO VARIABLES ARE THE SAME
                    CONFLICTS += 1  # INCREMENT THE NUMBER OF CONFLICTS
        return CONFLICTS  # RETURN THE NUMBER OF CONFLICTS

    # THE `__COMPLETE__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `MIN_CONFLICTS` ALGORITHM TO DETERMINE IF THE ASSIGNMENT OF VALUES TO VARIABLES IS COMPLETE, I.E., IF ALL VARIABLES IN THE CONSTRAINT SATISFACTION PROBLEM (CSP) HAVE BEEN ASSIGNED A VALUE.
    #     1. ITERATE THROUGH EACH VARIABLE IN THE CSP PROBLEM: THE FUNCTION ITERATES OVER EACH VARIABLE, DENOTED AS `VARIABLE`, IN THE LIST OF VARIABLES (`CSP_PROBLEM.VARIABLES`).
    #     2. CHECK IF THE VARIABLE IS PRESENT IN THE ASSIGNMENT DICTIONARY: THE FUNCTION CHECKS IF THE CURRENT VARIABLE EXISTS AS A KEY IN THE ASSIGNMENT DICTIONARY (`ASSIGNMENT`).
    #     3. RETURN `FALSE` IF A VARIABLE IS MISSING: IF ANY VARIABLE IS NOT PRESENT IN THE ASSIGNMENT DICTIONARY, IT MEANS IT HAS NOT BEEN ASSIGNED A VALUE YET. IN THIS CASE, THE FUNCTION IMMEDIATELY RETURNS `FALSE` TO INDICATE THAT THE ASSIGNMENT IS NOT COMPLETE.
    #     4. RETURN `TRUE` IF ALL VARIABLES ARE ASSIGNED: IF THE ITERATION COMPLETES WITHOUT ENCOUNTERING ANY MISSING VARIABLES, IT MEANS THAT ALL VARIABLES HAVE BEEN ASSIGNED A VALUE AND THE ASSIGNMENT IS COMPLETE. IN THIS CASE, THE FUNCTION RETURNS `TRUE` TO INDICATE THAT THE ASSIGNMENT IS COMPLETE.
    # IN SUMMARY, THE `__COMPLETE__` FUNCTION CHECKS IF ALL VARIABLES IN THE CSP PROBLEM HAVE BEEN ASSIGNED A VALUE IN THE CURRENT ASSIGNMENT. IT RETURNS `TRUE` IF THE ASSIGNMENT IS COMPLETE, MEANING ALL VARIABLES HAVE BEEN ASSIGNED A VALUE. CONVERSELY, IT RETURNS `FALSE` IF ANY VARIABLE IS MISSING FROM THE ASSIGNMENT, INDICATING THAT THE ASSIGNMENT IS NOT COMPLETE. THIS FUNCTION IS USED BY THE `MIN_CONFLICTS` ALGORITHM TO DETERMINE WHEN A VALID SOLUTION HAS BEEN FOUND.
    def __COMPLETE__(ASSIGNMENT: dict) -> bool:
        """THE `__COMPLETE__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `MIN_CONFLICTS` ALGORITHM TO DETERMINE IF THE ASSIGNMENT OF VALUES TO VARIABLES IS COMPLETE, I.E., IF ALL VARIABLES IN THE CONSTRAINT SATISFACTION PROBLEM (CSP) HAVE BEEN ASSIGNED A VALUE."""
        for VARIABLE in CSP_PROBLEM.VARIABLES:  # ITERATE THROUGH EACH VARIABLE IN THE CSP PROBLEM
            if VARIABLE not in ASSIGNMENT:  # CHECK IF THE VARIABLE IS PRESENT IN THE ASSIGNMENT DICTIONARY
                return False  # RETURN FALSE IF A VARIABLE IS MISSING
        return True  # RETURN TRUE IF ALL VARIABLES ARE ASSIGNED

    ASSIGNMENT = {}  # INITIALIZE THE ASSIGNMENT DICTIONARY
    for VARIABLE in CSP_PROBLEM.VARIABLES:  # ASSIGN A RANDOM VALUE FROM THE DOMAIN OF EACH VARIABLE
        # ASSIGN A RANDOM VALUE FROM THE DOMAIN OF EACH VARIABLE
        ASSIGNMENT[VARIABLE] = np.random.choice(CSP_PROBLEM.DOMAINS[VARIABLE])
    for _ in range(MAX_STEPS):  # ITERATE FOR A MAXIMUM NUMBER OF STEPS
        if __COMPLETE__(ASSIGNMENT):  # CHECK IF THE ASSIGNMENT IS COMPLETE
            return ASSIGNMENT  # RETURN THE ASSIGNMENT IF IT IS COMPLETE
        # SELECT A VARIABLE TO MODIFY
        VARIABLE = __SELECT_VARIABLE__(ASSIGNMENT)
        if VARIABLE is None:  # CHECK IF A VARIABLE IS SELECTED
            return False  # RETURN FALSE IF NO VARIABLE IS SELECTED
        # SELECT A VALUE FOR THE SELECTED VARIABLE
        VALUE = __SELECT_VALUE__(ASSIGNMENT, VARIABLE)
        ASSIGNMENT[VARIABLE] = VALUE  # UPDATE THE ASSIGNMENT
    return False  # RETURN FALSE IF NO SOLUTION IS FOUND WITHIN THE MAXIMUM STEPS
