import numpy as np

# PERCEPTRON: CLASS THAT IMPLEMENTS THE PERCEPTRON ALGORITHM.
class PERCEPTRON:
    # INITIALIZE THE PERCEPTRON ALGORITHM.
    def __init__(self, T=10):
        # NUMBER OF ITERATIONS: T, IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF ITERATIONS THAT THE ALGORITHM PASS THROUGH THE TRAINING DATA.
        self.T = T
        # THETA IS A VECTOR OF WEIGHTS, THETA_0 IS THE BIAS (SCALAR).
        self.THETA, self.THETA_0 = None, 0

    # FIT(): TRAINS THE MODEL; X REPRESENTS A VECTOR OF SAMPLES, Y REPRESENTS A VECTOR OF CORRESPONDING LABELS. EACH SAMPLE IS A DICIONARY WHERE THE KEY IS THE WORD AND THE VALUE IS THE ABSOLUTE FREQUENCY (COUNT) OF THE WORD IN THE SAMPLE.
    def FIT(self, X, Y):
        # INITIALIZE THE WEIGHTS VECTOR WITH ZEROS.
        self.THETA = np.zeros(len(X[0]))
        self.THETA_0 = 0  # INITIALIZE THE BIAS WITH ZERO.
        for _ in range(self.T):  # FOR EACH ITERATION: T.
            for I in range(len(X)):  # FOR EACH SAMPLE: X[I].
                # IF THE SAMPLE IS MISCLASSIFIED: UPDATE THE WEIGHTS AND THE BIAS.
                if Y[I] * (np.dot(self.THETA, X[I]) + self.THETA_0) <= 0:
                    # UPDATE THE WEIGHTS: THETA: THETA = THETA + Y[I] * X[I].
                    self.THETA += (Y[I] * np.array(X[I]))
                    # UPDATE THE BIAS: THETA_0: THETA_0 = THETA_0 + Y[I].
                    self.THETA_0 += Y[I]

    # PREDICT(): PREDICTS THE OUTPUT OF A SINGLE SAMPLE: X; SAMPLE IS A DICIONARY WHERE THE KEY IS THE WORD AND THE VALUE IS THE ABSOLUTE FREQUENCY (COUNT) OF THE WORD IN THE SAMPLE. RETURNS 1 IF SPAM, 0 IF HAM.
    def PREDICT(self, X):
        assert self.THETA is not None and self.THETA_0 is not None, "RUN FIT() FIRST" # ASSERTS THAT FIT() IS RUN BEFORE
        # CLASSIFY THE SAMPLE X USING THE WEIGHTS: THETA AND THE BIAS: THETA_0 STORED IN THE MODEL
        return np.sign(np.dot(self.THETA, X) + self.THETA_0)