import numpy as np

# LEAST_ANGLE_REGRESSION: IMPLEMENTATION OF LEAST ANGLE REGRESSION. LEAST ANGLE REGRESSION (LARS) IS A REGRESSION ALGORITHM FOR HIGH-DIMENSIONAL DATA. LARS IS SIMILAR TO FORWARD STEPWISE REGRESSION, BUT INSTEAD OF INCLUDING VARIABLES AT EACH STEP, THE COEFFICIENTS OF ALL THE VARIABLES ARE INCREASED IN PROPORTION TO THEIR CORRELATION WITH THE RESIDUAL. THEN AT EACH STEP, THE VARIABLE MOST HIGHLY CORRELATED WITH THE RESIDUAL IS INCLUDED INTO THE MODEL. THIS PROCEDURE CONTINUES UNTIL ALL VARIABLES ARE IN THE MODEL. THE ALGORITHM CAN BE USED FOR LEAST SQUARES REGRESSION, AS WELL AS FOR LASSO-TYPE REGRESSIONS. WHEN THE TARGET IS SPARSE, IT IS POSSIBLE TO GET AN EXACT SOLUTION IN A FINITE NUMBER OF STEPS.
class LEAST_ANGLE_REGRESSION:
    # INITIALIZES THE LEAST ANGLE REGRESSION MODEL.
    def __init__(self, N_ITER=300):
        # N_ITER: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF ITERATIONS FOR THE OPTIMIZATION. THE DEFAULT VALUE IS 300.
        self.N_ITER = N_ITER
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE LEAST ANGLE REGRESSION MODEL.
        self.WEIGHTS = None
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE LEAST ANGLE REGRESSION MODEL.
        self.BIAS = 0

    # FIT(): IT'S THE FUNCTION THAT TRAINS THE LEAST ANGLE REGRESSION MODEL.
    def FIT(self, X, Y):
        # N: IT'S THE NUMBER OF DATA POINTS.
        N = len(X)
        # W: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE LEAST ANGLE REGRESSION MODEL.
        W = np.random.randn(N)
        # LOOP OVER THE NUMBER OF ITERATIONS.
        for _ in range(self.N_ITER):
            # LOOP OVER THE NUMBER OF DATA POINTS.
            for i in range(N):
                # PREDICT THE OUTPUT VALUE.
                Y_PRED = self.BIAS + np.sum(W * X)
                # COMPUTE THE GRADIENT OF THE BIAS.
                BIAS_GRAD = -2 * (Y[i] - Y_PRED)
                # COMPUTE THE GRADIENT OF THE WEIGHTS.
                WEIGHTS_GRAD = -2 * (Y[i] - Y_PRED) * X[i]
                # UPDATE THE BIAS.
                self.BIAS = self.BIAS - 0.01 * BIAS_GRAD
                # UPDATE THE WEIGHTS.
                W[i] = W[i] - 0.01 * WEIGHTS_GRAD
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE LEAST ANGLE REGRESSION MODEL.
        self.WEIGHTS = W
    
    # PREDICT(): IT'S THE FUNCTION THAT USES THE LEAST ANGLE REGRESSION MODEL IN ORDER TO PREDICT NEW OUTPUT VALUES.
    def PREDICT(self, X):
        # RETURN THE PREDICTED OUTPUT VALUE.
        return np.dot(X, self.WEIGHTS) + self.BIAS