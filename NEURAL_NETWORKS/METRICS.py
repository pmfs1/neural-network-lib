import numpy as np

def SQUARED_ERROR(ACTUAL, PREDICTED):
    """RETURN SQUARED ERROR.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    SQUARED_ERROR: NUMPY ARRAY
        SQUARED ERROR.
    """
    return (ACTUAL - PREDICTED) ** 2  # RETURN SQUARED ERROR


def SQUARED_LOG_ERROR(ACTUAL, PREDICTED):
    """RETURN SQUARED LOG ERROR.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    SQUARED_LOG_ERROR: NUMPY ARRAY
        SQUARED LOG ERROR.
    """
    return (np.log(np.array(ACTUAL) + 1) - np.log(np.array(PREDICTED) + 1)) ** 2  # RETURN SQUARED LOG ERROR


def MEAN_SQUARED_LOG_ERROR(ACTUAL, PREDICTED):
    """RETURN MEAN SQUARED LOG ERROR.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    MEAN_SQUARED_LOG_ERROR: NUMPY ARRAY
        MEAN SQUARED LOG ERROR.
    """
    return np.mean(SQUARED_LOG_ERROR(ACTUAL, PREDICTED))  # RETURN MEAN SQUARED LOG ERROR


def MEAN_SQUARED_ERROR(ACTUAL, PREDICTED):
    """RETURN MEAN SQUARED ERROR.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    MEAN_SQUARED_ERROR: NUMPY ARRAY
        MEAN SQUARED ERROR.
    """
    return np.mean(SQUARED_ERROR(ACTUAL, PREDICTED))  # RETURN MEAN SQUARED ERROR


def ROOT_MEAN_SQUARED_ERROR(ACTUAL, PREDICTED):
    """RETURN ROOT MEAN SQUARED ERROR.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    ROOT_MEAN_SQUARED_ERROR: NUMPY ARRAY
        ROOT MEAN SQUARED ERROR.
    """
    return np.sqrt(MEAN_SQUARED_ERROR(ACTUAL, PREDICTED))  # RETURN ROOT MEAN SQUARED ERROR


def ROOT_MEAN_SQUARED_LOG_ERROR(ACTUAL, PREDICTED):
    """RETURN ROOT MEAN SQUARED LOG ERROR.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    ROOT_MEAN_SQUARED_LOG_ERROR: NUMPY ARRAY
        ROOT MEAN SQUARED LOG ERROR.
    """
    return np.sqrt(MEAN_SQUARED_LOG_ERROR(ACTUAL, PREDICTED))  # RETURN ROOT MEAN SQUARED LOG ERROR


def CATEGORICAL_CROSSENTROPY(ACTUAL, PREDICTED):
    """RETURN CATEGORICAL CROSS ENTROPY.

    PARAMETERS:
    ----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    CATEGORICAL_CROSSENTROPY: NUMPY ARRAY
        CATEGORICAL CROSS ENTROPY.
    """
    return LOGLOSS(ACTUAL, PREDICTED)  # RETURN LOGLOSS


def LOGLOSS(ACTUAL, PREDICTED):
    """RETURN LOGLOSS.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    LOGLOSS: NUMPY ARRAY
        LOGLOSS.
    """
    PREDICTED = np.clip(PREDICTED, 1e-15, 1 - 1e-15)  # CLIP PREDICTED VALUES
    LOSS = -np.sum(ACTUAL * np.log(PREDICTED))  # COMPUTE LOGLOSS
    return LOSS / float(ACTUAL.shape[0])  # RETURN LOGLOSS


def HINGE(ACTUAL, PREDICTED):
    """RETURN HINGE LOSS.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    HINGE: NUMPY ARRAY
        HINGE LOSS.
    """
    return np.mean(np.max(1.0 - ACTUAL * PREDICTED, 0))  # RETURN HINGE LOSS


def BINARY_CROSSENTROPY(ACTUAL, PREDICTED):
    """RETURN BINARY CROSS ENTROPY.

    PARAMETERS:
    -----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    BINARY_CROSSENTROPY: NUMPY ARRAY
        BINARY CROSS ENTROPY.
    """
    PREDICTED = np.clip(PREDICTED, 1e-15, 1 - 1e-15)  # CLIP PREDICTED VALUES
    # RETURN BINARY CROSS ENTROPY
    return np.mean(-np.sum(ACTUAL * np.log(PREDICTED) + (1 - ACTUAL) * np.log(1 - PREDICTED)))


def R2_SCORE(ACTUAL, PREDICTED):
    """RETURN R2 SCORE.

    PARAMETERS:
    ----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    R2_SCORE: FLOAT
        R2 SCORE.
    """
    return 1 - (np.sum((np.array(PREDICTED) - np.array(ACTUAL)) ** 2) / np.sum((np.array(ACTUAL) - np.mean(np.array(ACTUAL))) ** 2))  # RETURN R2 SCORE


def ACCURACY(ACTUAL, PREDICTED):
    """RETURN ACCURACY.

    PARAMETERS:
    ----------
    ACTUAL: NUMPY ARRAY
        ACTUAL VALUES.
    PREDICTED: NUMPY ARRAY
        PREDICTED VALUES.

    RETURNS:
    --------
    ACCURACY: FLOAT
        ACCURACY.
    """
    return np.sum(ACTUAL == PREDICTED) / len(ACTUAL)  # RETURN ACCURACY