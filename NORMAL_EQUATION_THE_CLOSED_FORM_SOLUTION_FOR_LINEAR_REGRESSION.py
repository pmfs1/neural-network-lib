import numpy as np

# NORMAL_EQUATION_THE_CLOSED_FORM_SOLUTION_FOR_LINEAR_REGRESSION: CLASS THAT IMPLEMENTS THE NORMAL EQUATION (THE CLOSED FORM SOLUTION) FOR LINEAR REGRESSION
class NORMAL_EQUATION_THE_CLOSED_FORM_SOLUTION_FOR_LINEAR_REGRESSION:
    # INITIALIZES THE NORMAL EQUATION (THE CLOSED FORM SOLUTION) FOR LINEAR REGRESSION
    def __init__(self):
        self.THETA = None # THETA: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE LINEAR REGRESSION MODEL.

    # FIND_THETA(): RETURNS THE PARAMETERS, THETA, OF THE LINEAR REGRESSION MODEL: THETA IS A VECTOR OF WEIGHTS, THETA_0 IS THE BIAS (SCALAR).
    def FIND_THETA(X, Y):
        NUMBER_OF_TRAINING_EXAMPLES = X.shape[0] # NUMBER OF TRAINING EXAMPLES
        X = np.append(X, np.ones((NUMBER_OF_TRAINING_EXAMPLES, 1)), axis=1) # APPENDING A COLUMN OF ONES IN X TO ADD THE BIAS TERM.
        Y = Y.reshape(NUMBER_OF_TRAINING_EXAMPLES, 1) # RESHAPES Y TO BE A COLUMN VECTOR
        self.THETA = np.dot(np.linalg.inv(np.dot(X.T, X)), np.dot(X.T, Y)) # THE NORMAL EQUATION
        return self.THETA # RETURNS THE PARAMETERS, THETA, OF THE LINEAR REGRESSION MODEL: THETA IS A VECTOR OF WEIGHTS, THETA_0 IS THE BIAS (SCALAR).
    
    # PREDICT(X): RETURNS THE PREDICTIONS OF THE LINEAR REGRESSION MODEL FOR THE INPUT DATA X.
    def PREDICT(X):
        X = np.append(X, np.ones((X.shape[0], 1)), axis=1) # APPENDING A COLUMN OF ONES IN X TO ADD THE BIAS TERM.
        return np.dot(X, self.THETA) # CALCULATES AND RETURN THE PREDICTIONS OF THE LINEAR REGRESSION MODEL FOR THE INPUT DATA X.