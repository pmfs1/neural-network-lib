import numpy as np

# NORMAL_EQUATION_THE_CLOSED_FORM_SOLUTION_FOR_LINEAR_REGRESSION: IMPLEMENTS THE NORMAL EQUATION (THE CLOSED FORM SOLUTION) FOR LINEAR REGRESSION. WHICH IS THE CLOSED-FORM SOLUTION FOR THE LINEAR REGRESSION ALGORITHM WHERE WE CAN FIND THE OPTIMAL VALUE OF THETA IN JUST ONE STEP WITHOUT USING THE GRADIENT DESCENT ALGORITHM.
class NORMAL_EQUATION_THE_CLOSED_FORM_SOLUTION_FOR_LINEAR_REGRESSION:
    # INITIALIZES THE NORMAL EQUATION (THE CLOSED FORM SOLUTION) FOR LINEAR REGRESSION
    def __init__(self):
        # THETA: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE LINEAR REGRESSION MODEL.
        self.THETA = None

    # FIND_THETA(): RETURNS THE PARAMETERS, THETA, OF THE LINEAR REGRESSION MODEL: THETA IS A VECTOR OF WEIGHTS, THETA_0 IS THE BIAS (SCALAR).
    def FIND_THETA(self, X, Y):
        NUMBER_OF_SAMPLES = X.shape[0]  # NUMBER OF TRAINING EXAMPLES
        # APPENDING A COLUMN OF ONES IN X TO ADD THE BIAS TERM.
        X = np.append(X, np.ones((NUMBER_OF_SAMPLES, 1)), axis=1)
        Y = Y.reshape(NUMBER_OF_SAMPLES, 1)  # RESHAPES Y TO BE A COLUMN VECTOR
        self.THETA = np.dot(np.linalg.inv(np.dot(X.T, X)),
                            np.dot(X.T, Y))  # THE NORMAL EQUATION
        # RETURNS THE PARAMETERS, THETA, OF THE LINEAR REGRESSION MODEL: THETA IS A VECTOR OF WEIGHTS, THETA_0 IS THE BIAS (SCALAR).
        return self.THETA

    # PREDICT(X): RETURNS THE PREDICTIONS OF THE LINEAR REGRESSION MODEL FOR THE INPUT DATA X.
    def PREDICT(self, X):
        # APPENDING A COLUMN OF ONES IN X TO ADD THE BIAS TERM.
        X = np.append(X, np.ones((X.shape[0], 1)), axis=1)
        # CALCULATES AND RETURN THE PREDICTIONS OF THE LINEAR REGRESSION MODEL FOR THE INPUT DATA X.
        return np.dot(X, self.THETA)