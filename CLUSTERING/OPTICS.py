import numpy as np

# THE `OPTICS` FUNCTION IS AN IMPLEMENTATION OF THE OPTICS (ORDERING POINTS TO IDENTIFY THE CLUSTERING STRUCTURE) ALGORITHM. IT IS A DENSITY-BASED CLUSTERING ALGORITHM THAT AIMS TO DISCOVER CLUSTERS OF ARBITRARY SHAPE IN A DATASET.
#     1. THE FUNCTION TAKES THREE PARAMETERS:
#         - `X`: THE INPUT DATASET, REPRESENTED AS A NUMPY ARRAY, WHERE EACH ROW CORRESPONDS TO A DATA POINT.
#         - `MIN_SAMPLES`: THE MINIMUM NUMBER OF SAMPLES REQUIRED FOR A CLUSTER TO BE FORMED.
#         - `EPSILON` (OPTIONAL): THE MAXIMUM DISTANCE BETWEEN TWO SAMPLES FOR THEM TO BE CONSIDERED NEIGHBORS. IF NOT PROVIDED, IT IS CALCULATED BASED ON THE AVERAGE DISTANCE BETWEEN POINTS IN THE DATASET.
#     2. THE `OPTICS` FUNCTION CONTAINS SEVERAL HELPER FUNCTIONS THAT ARE USED WITHIN THE MAIN FUNCTION:
#         - `__CALCULATE_DISTANCES__`: IT CALCULATES THE PAIRWISE DISTANCES BETWEEN ALL POINTS IN THE DATASET USING THE `PDIST` FUNCTION.
#         - `__CALCULATE_CORE_DISTANCES__`: IT CALCULATES THE CORE DISTANCES FOR EACH POINT BASED ON THE MINIMUM NUMBER OF SAMPLES (`MIN_SAMPLES`). THE CORE DISTANCE IS DEFINED AS THE DISTANCE TO THE `MIN_SAMPLES`-TH NEAREST NEIGHBOR.
#         - `__CALCULATE_REACHABILITY_DISTANCES__`: IT CALCULATES THE REACHABILITY DISTANCES FOR EACH POINT. THE REACHABILITY DISTANCE OF A POINT IS DEFINED AS THE MAXIMUM OF THE CORE DISTANCE OF THE POINT ITSELF AND THE DISTANCE TO ITS NEAREST NEIGHBORS WITHIN A DISTANCE OF `EPSILON`.
#         - `__EXTRACT_CLUSTERS__`: IT EXTRACTS THE CLUSTERS FROM THE REACHABILITY DISTANCES. IT ITERATES THROUGH THE POINTS IN A SPECIFIC ORDER, STARTING FROM THE ONE WITH THE LOWEST REACHABILITY DISTANCE. IT FORMS A CLUSTER BY INCLUDING ALL POINTS THAT HAVE A REACHABILITY DISTANCE BELOW `EPSILON` AND ARE CONNECTED TO THE CURRENT POINT.
#     3. THE MAIN PART OF THE `OPTICS` FUNCTION STARTS BY CALCULATING THE PAIRWISE DISTANCES BETWEEN ALL POINTS IN THE DATASET USING THE `__CALCULATE_DISTANCES__` FUNCTION.
#     4. IF THE `EPSILON` PARAMETER IS NOT PROVIDED, IT IS CALCULATED BASED ON THE AVERAGE DISTANCE BETWEEN POINTS (`AVG_DISTANCE`) IN THE DATASET. THE DEFAULT VALUE FOR `EPSILON` IS SET TO HALF OF `AVG_DISTANCE`.
#     5. THE CORE DISTANCES ARE THEN COMPUTED FOR EACH POINT USING THE `__CALCULATE_CORE_DISTANCES__` FUNCTION.
#     6. NEXT, THE REACHABILITY DISTANCES ARE CALCULATED FOR EACH POINT USING THE `__CALCULATE_REACHABILITY_DISTANCES__` FUNCTION.
#     7. FINALLY, THE CLUSTERS ARE EXTRACTED FROM THE REACHABILITY DISTANCES USING THE `__EXTRACT_CLUSTERS__` FUNCTION.
#     8. THE RESULTING CLUSTERS ARE RETURNED AS A LIST OF LISTS, WHERE EACH INNER LIST REPRESENTS A CLUSTER AND CONTAINS THE INDICES OF THE DATA POINTS BELONGING TO THAT CLUSTER.
# IN SUMMARY, THE `OPTICS` FUNCTION TAKES A DATASET, MINIMUM SAMPLES, AND AN OPTIONAL EPSILON VALUE, AND PERFORMS THE OPTICS CLUSTERING ALGORITHM. IT CALCULATES PAIRWISE DISTANCES, CORE DISTANCES, REACHABILITY DISTANCES, AND EXTRACTS CLUSTERS BASED ON REACHABILITY DISTANCES. THE FUNCTION RETURNS A LIST OF CLUSTERS FOUND IN THE DATASET.
def OPTICS(X, MIN_SAMPLES, EPSILON=None):
    """THE `OPTICS` FUNCTION IS AN IMPLEMENTATION OF THE OPTICS (ORDERING POINTS TO IDENTIFY THE CLUSTERING STRUCTURE) ALGORITHM. IT IS A DENSITY-BASED CLUSTERING ALGORITHM THAT AIMS TO DISCOVER CLUSTERS OF ARBITRARY SHAPE IN A DATASET. 
    THE FUNCTION TAKES A DATASET, MINIMUM SAMPLES, AND AN OPTIONAL EPSILON VALUE AS INPUTS. IT CALCULATES PAIRWISE DISTANCES, CORE DISTANCES, REACHABILITY DISTANCES, AND EXTRACTS CLUSTERS BASED ON REACHABILITY DISTANCES. 
        1. PAIRWISE DISTANCES: IT CALCULATES THE DISTANCES BETWEEN ALL POINTS IN THE DATASET.
        2. CORE DISTANCES: IT DETERMINES THE CORE DISTANCE FOR EACH POINT, WHICH IS THE DISTANCE TO THE `MIN_SAMPLES`-TH NEAREST NEIGHBOUR.
        3. REACHABILITY DISTANCES: IT CALCULATES THE REACHABILITY DISTANCE FOR EACH POINT, CONSIDERING THE MAXIMUM OF THE CORE DISTANCE OF THE POINT ITSELF AND THE DISTANCE TO ITS NEAREST NEIGHBOURS WITHIN A DISTANCE OF `EPSILON`.
        4. EXTRACT CLUSTERS: IT EXTRACTS CLUSTERS FROM THE REACHABILITY DISTANCES BY ITERATING THROUGH THE POINTS IN A SPECIFIC ORDER AND INCLUDING ALL POINTS THAT HAVE A REACHABILITY DISTANCE BELOW `EPSILON` AND ARE CONNECTED TO THE CURRENT POINT.
        5. RETURN CLUSTERS: THE FUNCTION RETURNS A LIST OF CLUSTERS FOUND IN THE DATASET, WHERE EACH INNER LIST REPRESENTS A CLUSTER AND CONTAINS THE INDICES OF THE DATA POINTS BELONGING TO THAT CLUSTER.
    OVERALL, THE `OPTICS` FUNCTION PROVIDES A WAY TO PERFORM DENSITY-BASED CLUSTERING, ALLOWING FOR THE DISCOVERY OF CLUSTERS WITH VARYING DENSITIES AND SHAPES IN A DATASET."""

    # THE `__CALCULATE_DISTANCES__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `OPTICS` FUNCTION TO COMPUTE THE PAIRWISE DISTANCES BETWEEN ALL POINTS IN THE DATASET.
    #     1. THE FUNCTION TAKES A NUMPY ARRAY `X` AS INPUT, WHICH REPRESENTS THE DATASET. EACH ROW IN `X` CORRESPONDS TO A DATA POINT.
    #     2. THE `__CALCULATE_DISTANCES__` FUNCTION USES ANOTHER HELPER FUNCTION CALLED `PDIST` TO CALCULATE THE PAIRWISE DISTANCES BETWEEN ALL POINTS IN THE DATASET.
    #     3. THE `PDIST` FUNCTION ITERATES OVER EACH PAIR OF POINTS IN THE DATASET. IT STARTS BY INITIALIZING AN EMPTY NUMPY ARRAY CALLED `PAIRWISE_DISTANCES` TO STORE THE DISTANCES.
    #     4. USING NESTED LOOPS, THE FUNCTION ITERATES OVER THE INDICES `I` AND `J`, WHERE `I` RANGES FROM 0 TO `N - 1` AND `J` RANGES FROM `I + 1` TO `N`, WHERE `N` IS THE NUMBER OF POINTS IN THE DATASET.
    #     5. FOR EACH PAIR OF POINTS `(X[I], X[J])`, THE EUCLIDEAN DISTANCE BETWEEN THEM IS CALCULATED USING THE FORMULA `DISTANCE = NP.SQRT(NP.SUM((X[I] - X[J]) ** 2))`. THIS FORMULA COMPUTES THE SQUARE ROOT OF THE SUM OF SQUARED DIFFERENCES BETWEEN THE CORRESPONDING ELEMENTS OF `X[I]` AND `X[J]`.
    #     6. THE CALCULATED DISTANCE `DISTANCE` IS THEN STORED IN THE `PAIRWISE_DISTANCES` ARRAY AT THE APPROPRIATE INDEX `IDX`. THE VARIABLE `IDX` KEEPS TRACK OF THE CURRENT POSITION IN THE ARRAY.
    #     7. AFTER ALL PAIRWISE DISTANCES HAVE BEEN CALCULATED AND STORED IN THE `PAIRWISE_DISTANCES` ARRAY, THE FUNCTION RETURNS THE ARRAY.
    # IN SUMMARY, THE `__CALCULATE_DISTANCES__` FUNCTION COMPUTES THE PAIRWISE DISTANCES BETWEEN ALL POINTS IN THE DATASET BY ITERATING OVER EACH PAIR OF POINTS AND CALCULATING THE EUCLIDEAN DISTANCE BETWEEN THEM. THE RESULTING DISTANCES ARE STORED IN A NUMPY ARRAY, WHICH IS THEN RETURNED BY THE FUNCTION. THIS DISTANCE CALCULATION IS A CRUCIAL STEP IN VARIOUS CLUSTERING ALGORITHMS, INCLUDING OPTICS, AS IT PROVIDES THE BASIS FOR MEASURING THE SIMILARITY OR DISSIMILARITY BETWEEN DATA POINTS.
    def __CALCULATE_DISTANCES__(X):
        """THE `__CALCULATE_DISTANCES__` FUNCTION IS A HELPER FUNCTION USED IN THE `OPTICS` ALGORITHM TO COMPUTE PAIRWISE DISTANCES BETWEEN ALL POINTS IN THE DATASET. 
            1. INPUT: IT TAKES A NUMPY ARRAY `X` REPRESENTING THE DATASET AS INPUT.
            2. PAIRWISE DISTANCES: THE FUNCTION USES A NESTED LOOP TO ITERATE OVER ALL PAIRS OF POINTS IN THE DATASET. IT CALCULATES THE EUCLIDEAN DISTANCE BETWEEN EACH PAIR OF POINTS USING THE FORMULA `DISTANCE = NP.SQRT(NP.SUM((X[I] - X[J]) ** 2))`.
            3. STORAGE: THE DISTANCES ARE STORED IN A NUMPY ARRAY CALLED `PAIRWISE_DISTANCES` AS THEY ARE COMPUTED.
            4. OUTPUT: ONCE ALL PAIRWISE DISTANCES HAVE BEEN CALCULATED, THE FUNCTION RETURNS THE `PAIRWISE_DISTANCES` ARRAY.
        IN SUMMARY, THE `__CALCULATE_DISTANCES__` FUNCTION COMPUTES PAIRWISE DISTANCES BETWEEN ALL POINTS IN THE DATASET USING THE EUCLIDEAN DISTANCE FORMULA. THE RESULTING DISTANCES ARE STORED AND RETURNED AS A NUMPY ARRAY. THIS CALCULATION IS AN ESSENTIAL STEP IN THE OPTICS ALGORITHM AND PROVIDES A MEASURE OF DISSIMILARITY OR SIMILARITY BETWEEN DATA POINTS, ENABLING THE IDENTIFICATION OF CLUSTERS BASED ON THEIR DISTANCES FROM EACH OTHER."""
        return SQUAREFORM(PDIST(X))

    def __CALCULATE_CORE_DISTANCES__(DISTANCES, MIN_SAMPLES):
        return np.sort(DISTANCES, axis=0)[MIN_SAMPLES]

    def __CALCULATE_REACHABILITY_DISTANCES__(DISTANCES, CORE_DISTANCES, EPSILON):
        N_POINTS = DISTANCES.shape[0]
        REACHABILITY_DISTANCES = np.full(N_POINTS, np.inf)
        for POINT in range(N_POINTS):
            if CORE_DISTANCES[POINT] < np.inf:
                NEIGHBORHOOD = np.where(DISTANCES[POINT] <= EPSILON)[0]
                REACHABILITY_DISTANCES[POINT] = np.max(np.maximum(CORE_DISTANCES[POINT], DISTANCES[POINT][NEIGHBORHOOD]))
        return REACHABILITY_DISTANCES

    def __EXTRACT_CLUSTERS__(DISTANCES, REACHABILITY_DISTANCES, EPSILON, CORE_DISTANCES):
        N_POINTS = DISTANCES.shape[0]
        ORDERED_POINTS = np.argsort(REACHABILITY_DISTANCES)
        CLUSTERS = []
        for POINT in ORDERED_POINTS:
            if REACHABILITY_DISTANCES[POINT] > EPSILON:
                if CORE_DISTANCES[POINT] <= EPSILON:
                    CURRENT_CLUSTER = [POINT]
                    IDX = np.where(ORDERED_POINTS == POINT)[0][0] + 1
                    while IDX < N_POINTS and REACHABILITY_DISTANCES[ORDERED_POINTS[IDX]] <= EPSILON:
                        CURRENT_CLUSTER.append(ORDERED_POINTS[IDX])
                        IDX += 1
                    CLUSTERS.append(CURRENT_CLUSTER)
        return CLUSTERS

    DISTANCES = __CALCULATE_DISTANCES__(X)
    if EPSILON is None:
        AVG_DISTANCE = np.mean(DISTANCES)
        EPSILON = AVG_DISTANCE * 0.5
    CORE_DISTANCES = __CALCULATE_CORE_DISTANCES__(DISTANCES, MIN_SAMPLES)
    REACHABILITY_DISTANCES = __CALCULATE_REACHABILITY_DISTANCES__(DISTANCES, CORE_DISTANCES, EPSILON)
    CLUSTERS = __EXTRACT_CLUSTERS__(DISTANCES, REACHABILITY_DISTANCES, EPSILON, CORE_DISTANCES)
    return CLUSTERS

def PDIST(X):
    N = X.shape[0]
    PAIRWISE_DISTANCES = np.zeros((N * (N - 1)) // 2)
    IDX = 0
    for i in range(N - 1):
        for j in range(i + 1, N):
            DISTANCE = np.sqrt(np.sum((X[i] - X[j]) ** 2))
            PAIRWISE_DISTANCES[IDX] = DISTANCE
            IDX += 1
    return PAIRWISE_DISTANCES

def SQUAREFORM(PAIRWISE_DISTANCES):
    N = int(np.sqrt(2 * len(PAIRWISE_DISTANCES)) + 0.5)
    SQUARE_DISTANCES = np.zeros((N, N))
    IDX = 0
    for i in range(N - 1):
        for j in range(i + 1, N):
            SQUARE_DISTANCES[i, j] = PAIRWISE_DISTANCES[IDX]
            SQUARE_DISTANCES[j, i] = PAIRWISE_DISTANCES[IDX]
            IDX += 1
    return SQUARE_DISTANCES