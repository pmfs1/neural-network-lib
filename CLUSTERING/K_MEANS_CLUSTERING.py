import numpy as np

np.random.seed(42)  # SETS THE RANDOM SEED TO 42 FOR REPRODUCIBILITY

# K_MEANS_CLUSTERING: IMPLEMENTATION OF THE K MEANS CLUSTERING MODEL. K-MEANS CLUSTERING IS A METHOD OF VECTOR QUANTIZATION, ORIGINALLY FROM SIGNAL PROCESSING, THAT AIMS TO PARTITION N OBSERVATIONS INTO K CLUSTERS IN WHICH EACH OBSERVATION BELONGS TO THE CLUSTER WITH THE NEAREST MEAN (CLUSTER CENTRES OR CLUSTER CENTROID), SERVING AS A PROTOTYPE OF THE CLUSTER.


class K_MEANS_CLUSTERING:
    """IMPLEMENTATION OF THE K MEANS CLUSTERING MODEL. K-MEANS CLUSTERING IS A METHOD OF VECTOR QUANTIZATION, ORIGINALLY FROM SIGNAL PROCESSING, THAT AIMS TO PARTITION N OBSERVATIONS INTO K CLUSTERS IN WHICH EACH OBSERVATION BELONGS TO THE CLUSTER WITH THE NEAREST MEAN (CLUSTER CENTRES OR CLUSTER CENTROID), SERVING AS A PROTOTYPE OF THE CLUSTER.

    ATTRIBUTES
    ----------
    K: INT, DEFAULT=3
        IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF CLUSTERS.
    MAX_ITERS: INT, DEFAULT=100
        IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE MAXIMUM NUMBER OF ITERATIONS.
    CENTROIDS: NUMPY ARRAY, DEFAULT=NONE
        IT'S THE ARRAY THAT CONTAINS THE CENTROIDS OF THE CLUSTERS.
    CLUSTERS: NUMPY ARRAY, DEFAULT=NONE
        IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTERS.
    X: NUMPY ARRAY, DEFAULT=NONE
        IT'S THE DATASET.
    N_SAMPLES: INT, DEFAULT=NONE
        IT'S THE NUMBER OF SAMPLES IN THE DATASET.
    N_FEATURES: INT, DEFAULT=NONE
        IT'S THE NUMBER OF FEATURES IN THE DATASET.

    METHODS
    -------
    FIT_TRANSFORM(X)
        METHOD THAT TRAINS THE K MEANS CLUSTERING MODEL AND PREDICTS THE DATASET
    __GET_CLUSTER_LABELS__(CLUSTERS)
        METHOD THAT CLASSIFIES SAMPLES AS THE INDEX OF THEIR CLUSTERS
    __CREATE_CLUSTERS__(CENTROIDS)
        METHOD THAT ASSIGNS SAMPLES TO CLOSEST CENTROIDS (CREATE CLUSTERS)
    __CLOSEST_CENTROID__(SAMPLE, CENTROIDS)
        METHOD THAT CALCULATES THE DISTANCE BETWEEN A SAMPLE AND THE CENTROIDS
    __GET_CENTROIDS__(CLUSTERS)
        METHOD THAT CALCULATES NEW CENTROIDS FROM THE CLUSTERS
    __IS_CONVERGED__(CENTROIDS_OLD, CENTROIDS)
        METHOD THAT CHECKS IF CLUSTERS HAVE CHANGED
    EUCLIDEAN_DISTANCE(X1, X2)
        METHOD THAT CALCULATES THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS    
    """
    # INITIALIZES THE K MEANS CLUSTERING MODEL

    def __init__(self, K=3, MAX_ITERS=100):
        """INITIALIZES THE K MEANS CLUSTERING MODEL

        PARAMETERS
        ----------
        K: INT, DEFAULT=3
            IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF CLUSTERS.
        MAX_ITERS: INT, DEFAULT=100
            IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE MAXIMUM NUMBER OF ITERATIONS.

        ATTRIBUTES
        ----------
        K: INT, DEFAULT=3
            IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF CLUSTERS.
        MAX_ITERS: INT, DEFAULT=100
            IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE MAXIMUM NUMBER OF ITERATIONS.
        CENTROIDS: NUMPY ARRAY, DEFAULT=NONE
            IT'S THE ARRAY THAT CONTAINS THE CENTROIDS OF THE CLUSTERS.
        CLUSTERS: NUMPY ARRAY, DEFAULT=NONE
            IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTERS.
        X: NUMPY ARRAY, DEFAULT=NONE
            IT'S THE DATASET.
        N_SAMPLES: INT, DEFAULT=NONE
            IT'S THE NUMBER OF SAMPLES IN THE DATASET.
        N_FEATURES: INT, DEFAULT=NONE
            IT'S THE NUMBER OF FEATURES IN THE DATASET.
        """
        # K: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF CLUSTERS.
        self.K = K
        # MAX_ITERS: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE MAXIMUM NUMBER OF ITERATIONS.
        self.MAX_ITERS = MAX_ITERS
        # CENTROIDS: IT'S THE ARRAY THAT CONTAINS THE CENTROIDS OF THE CLUSTERS.
        self.CENTROIDS = None
        # CLUSTERS: IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTERS.
        self.CLUSTERS = [[] for _ in range(self.K)]
        # X: IT'S THE DATASET.
        self.X = None
        # N_SAMPLES: IT'S THE NUMBER OF SAMPLES IN THE DATASET.
        self.N_SAMPLES = None
        # N_FEATURES: IT'S THE NUMBER OF FEATURES IN THE DATASET.
        self.N_FEATURES = None

    # FIT_TRANSFORM(): METHOD THAT TRAINS THE K MEANS CLUSTERING MODEL AND PREDICTS THE DATASET
    def FIT_TRANSFORM(self, X):
        """METHOD THAT TRAINS THE K MEANS CLUSTERING MODEL AND PREDICTS THE DATASET

        PARAMETERS
        ----------
        X: NUMPY ARRAY
            IT'S THE DATASET.

        RETURNS
        -------
        CLUSTER_LABELS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE CLUSTER LABELS OF THE SAMPLES.
        """
        self.X = X  # X: IT'S THE DATASET.
        # N_SAMPLES: IT'S THE NUMBER OF SAMPLES IN THE DATASET. N_FEATURES: IT'S THE NUMBER OF FEATURES IN THE DATASET.
        self.N_SAMPLES, self.N_FEATURES = X.shape
        # RANDOM_SAMPLE_IDXS: IT'S THE ARRAY THAT CONTAINS THE INDEXES OF THE RANDOM SAMPLES.
        RANDOM_SAMPLE_IDXS = np.random.choice(
            self.N_SAMPLES, self.K, replace=False)
        # CENTROIDS: IT'S THE ARRAY THAT CONTAINS THE CENTROIDS OF THE CLUSTERS.
        self.CENTROIDS = [self.X[IDX] for IDX in RANDOM_SAMPLE_IDXS]
        # OPTIMIZE CLUSTERS
        for _ in range(self.MAX_ITERS):
            # ASSIGN SAMPLES TO CLOSEST CENTROIDS (CREATE CLUSTERS)
            self.CLUSTERS = self.__CREATE_CLUSTERS__(self.CENTROIDS)
            # CALCULATE NEW CENTROIDS FROM THE CLUSTERS
            CENTROIDS_OLD = self.CENTROIDS
            self.CENTROIDS = self.__GET_CENTROIDS__(self.CLUSTERS)
            # CHECK IF CLUSTERS HAVE CHANGED
            if self.__IS_CONVERGED__(CENTROIDS_OLD, self.CENTROIDS):
                break
        # CLASSIFY SAMPLES AS THE INDEX OF THEIR CLUSTERS
        return self.__GET_CLUSTER_LABELS__(self.CLUSTERS)

    # __GET_CLUSTER_LABELS__() [PRIVATE METHOD]: METHOD THAT CLASSIFIES SAMPLES AS THE INDEX OF THEIR CLUSTERS
    def __GET_CLUSTER_LABELS__(self, CLUSTERS):
        """METHOD THAT CLASSIFIES SAMPLES AS THE INDEX OF THEIR CLUSTERS

        PARAMETERS
        ----------
        CLUSTERS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTERS.

        RETURNS
        -------
        LABELS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE CLUSTER LABELS OF THE SAMPLES.

        EXCEPTIONS
        ----------
        ASSERTION ERROR: IF THE MODEL IS NOT FITTED YET.
        """
        assert self.N_SAMPLES is not None and self.N_FEATURES is not None, "FIT THE MODEL FIRST"  # ASSERTION FOR FITTING THE MODEL FIRST
        # LABELS: IT'S THE ARRAY THAT CONTAINS THE LABELS OF THE SAMPLES.
        LABELS = np.empty(self.N_SAMPLES)
        # CLUSTER_IDX: IT'S THE INDEX OF THE CLUSTER. CLUSTER: IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTER.
        for CLUSTER_IDX, CLUSTER in enumerate(CLUSTERS):
            for SAMPLE_INDEX in CLUSTER:  # SAMPLE_INDEX: IT'S THE INDEX OF THE SAMPLE.
                # EACH SAMPLE WILL GET THE LABEL OF THE CLUSTER IT WAS ASSIGNED TO
                LABELS[SAMPLE_INDEX] = CLUSTER_IDX
        return LABELS  # RETURNS THE LABELS OF THE SAMPLES.

    # __CREATE_CLUSTERS__() [PRIVATE METHOD]: METHOD THAT ASSIGNS SAMPLES TO CLOSEST CENTROIDS (CREATE CLUSTERS)
    def __CREATE_CLUSTERS__(self, CENTROIDS):
        """METHOD THAT ASSIGNS SAMPLES TO CLOSEST CENTROIDS (CREATE CLUSTERS)

        PARAMETERS
        ----------
        CENTROIDS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE CENTROIDS OF THE CLUSTERS.

        RETURNS
        -------
        CLUSTERS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTERS.

        EXCEPTIONS
        ----------
        ASSERTION ERROR: IF THE MODEL IS NOT FITTED YET.
        """
        assert self.X is not None, "FIT THE MODEL FIRST"  # ASSERTION FOR FITTING THE MODEL FIRST
        # CLUSTERS: IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTERS.
        # CREATES THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTERS.
        CLUSTERS = [[] for _ in range(self.K)]
        # SAMPLE_INDEX: IT'S THE INDEX OF THE SAMPLE. SAMPLE: IT'S THE SAMPLE.
        for SAMPLE_INDEX, SAMPLE in enumerate(self.X):
            # CENTROID_IDX: IT'S THE INDEX OF THE CENTROID.
            # GET THE INDEX OF THE CLOSEST CENTROID OF THE SAMPLE
            CENTROID_IDX = self.__CLOSEST_CENTROID__(SAMPLE, CENTROIDS)
            # ADD SAMPLE TO ITS CLUSTER
            CLUSTERS[CENTROID_IDX].append(SAMPLE_INDEX)
        return CLUSTERS  # RETURNS THE CLUSTERS.

    # __CLOSEST_CENTROID__() [PRIVATE METHOD]: METHOD THAT GETS THE INDEX OF THE CLOSEST CENTROID OF THE SAMPLE
    def __CLOSEST_CENTROID__(self, SAMPLE, CENTROIDS):
        """METHOD THAT GETS THE INDEX OF THE CLOSEST CENTROID OF THE SAMPLE

        PARAMETERS
        ----------
        SAMPLE: NUMPY ARRAY
            IT'S THE SAMPLE.
        CENTROIDS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE CENTROIDS OF THE CLUSTERS.

        RETURNS
        -------
        CLOSEST_INDEX: INTEGER
            IT'S THE INDEX OF THE CLOSEST CENTROID.
        """
        # DISTANCES: IT'S THE ARRAY THAT CONTAINS THE DISTANCES OF THE SAMPLE TO EACH CENTROID.
        DISTANCES = [self.EUCLIDEAN_DISTANCE(
            SAMPLE, CENTROID) for CENTROID in CENTROIDS]
        # CLOSEST_INDEX: IT'S THE INDEX OF THE CLOSEST CENTROID.
        # GET THE INDEX OF THE CLOSEST CENTROID
        CLOSEST_INDEX = np.argmin(DISTANCES)
        return CLOSEST_INDEX  # RETURNS THE INDEX OF THE CLOSEST CENTROID.

    # __GET_CENTROIDS__() [PRIVATE METHOD]: METHOD THAT CALCULATES NEW CENTROIDS FROM THE CLUSTERS
    def __GET_CENTROIDS__(self, CLUSTERS):
        """METHOD THAT CALCULATES NEW CENTROIDS FROM THE CLUSTERS

        PARAMETERS
        ----------
        CLUSTERS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTERS.

        RETURNS
        -------
        CENTROIDS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE CENTROIDS OF THE CLUSTERS.

        EXCEPTIONS
        ----------
        ASSERTION ERROR: IF THE MODEL IS NOT FITTED YET.
        """
        assert self.X is not None and self.N_FEATURES is not None, "FIT THE MODEL FIRST"  # ASSERTION FOR FITTING THE MODEL FIRST
        # CENTROIDS: IT'S THE ARRAY THAT CONTAINS THE CENTROIDS OF THE CLUSTERS.
        CENTROIDS = np.zeros((self.K, self.N_FEATURES))
        # CLUSTER_IDX: IT'S THE INDEX OF THE CLUSTER. CLUSTER: IT'S THE ARRAY THAT CONTAINS THE SAMPLES OF THE CLUSTER.
        for CLUSTER_IDX, CLUSTER in enumerate(CLUSTERS):
            # CLUSTER_MEAN: IT'S THE MEAN OF THE CLUSTER.
            # GET THE MEAN OF THE CLUSTER
            CLUSTER_MEAN = np.mean(self.X[CLUSTER], axis=0)
            # ASSIGN MEAN VALUE OF CLUSTER TO CENTROID
            CENTROIDS[CLUSTER_IDX] = CLUSTER_MEAN
        return CENTROIDS  # RETURNS THE CENTROIDS.

    # __IS_CONVERGED__() [PRIVATE METHOD]: METHOD THAT CHECKS IF CLUSTERS HAVE CHANGED
    def __IS_CONVERGED__(self, CENTROIDS_OLD, CENTROIDS):
        """METHOD THAT CHECKS IF CLUSTERS HAVE CHANGED

        PARAMETERS
        ----------
        CENTROIDS_OLD: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE OLD CENTROIDS OF THE CLUSTERS.
        CENTROIDS: NUMPY ARRAY
            IT'S THE ARRAY THAT CONTAINS THE NEW CENTROIDS OF THE CLUSTERS.

        RETURNS
        -------
        BOOLEAN
            RETURNS TRUE IF THE SUM OF THE DISTANCES IS EQUAL TO 0, ELSE RETURNS FALSE.
        """
        # DISTANCES: IT'S THE ARRAY THAT CONTAINS THE DISTANCES BETWEEN EACH OLD AND NEW CENTROIDS, FOR ALL CENTROIDS.
        DISTANCES = [self.EUCLIDEAN_DISTANCE(CENTROIDS_OLD[IDX], CENTROIDS[IDX]) for IDX in range(
            self.K)]  # DISTANCES BETWEEN EACH OLD AND NEW CENTROIDS, FOR ALL CENTROIDS
        # RETURNS TRUE IF THE SUM OF THE DISTANCES IS EQUAL TO 0, ELSE RETURNS FALSE.
        return sum(DISTANCES) == 0

    # EUCLIDEAN_DISTANCE() [STATIC METHOD]: METHOD THAT CALCULATES THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS.
    @staticmethod
    def EUCLIDEAN_DISTANCE(X_1, X_2):
        """METHOD THAT CALCULATES THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS.

        PARAMETERS
        ----------
        X_1: NUMPY ARRAY
            IT'S THE FIRST POINT.
        X_2: NUMPY ARRAY
            IT'S THE SECOND POINT.

        RETURNS
        -------
        FLOAT
            RETURNS THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS.
        """
        # RETURNS THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS.
        return np.sqrt(np.sum((X_1 - X_2) ** 2))
