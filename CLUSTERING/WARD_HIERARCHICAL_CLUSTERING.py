import numpy as np

# THE `WARD_HIERARCHICAL_CLUSTERING` FUNCTION IMPLEMENTS THE WARD'S LINKAGE ALGORITHM FOR HIERARCHICAL CLUSTERING. HIERARCHICAL CLUSTERING IS AN UNSUPERVISED LEARNING TECHNIQUE USED TO GROUP SIMILAR DATA POINTS INTO CLUSTERS BASED ON THEIR DISTANCES. WARD'S LINKAGE IS A METHOD TO MEASURE THE DISSIMILARITY BETWEEN TWO CLUSTERS WHEN MERGING THEM.
#     1. THE FUNCTION TAKES A DATASET `X` AS INPUT, WHICH IS A NUMPY ARRAY WHERE EACH ROW REPRESENTS A DATA POINT.
#     2. THE FUNCTION DEFINES A HELPER FUNCTION `__CALCULATE_MERGE_DISTANCE__` THAT CALCULATES THE MERGE DISTANCE BETWEEN TWO CLUSTERS. IT TAKES THREE INPUTS: `CLUSTER_A` AND `CLUSTER_B`, WHICH ARE LISTS OF INDICES REPRESENTING THE DATA POINTS IN THE CLUSTERS, AND `DISTANCES`, WHICH IS A MATRIX OF PAIRWISE DISTANCES BETWEEN ALL DATA POINTS.
#     3. THE FUNCTION INITIALIZES SOME VARIABLES, INCLUDING `N_SAMPLES`, WHICH REPRESENTS THE NUMBER OF DATA POINTS IN THE DATASET, AND `DISTANCES`, A SQUARE MATRIX OF ZEROS TO STORE PAIRWISE DISTANCES BETWEEN DATA POINTS.
#     4. NEXT, THE FUNCTION CALCULATES THE PAIRWISE EUCLIDEAN DISTANCES BETWEEN THE DATA POINTS USING NESTED LOOPS. THE DISTANCES ARE STORED IN THE `DISTANCES` MATRIX.
#     5. THE FUNCTION INITIALIZES THE `CLUSTERS` LIST, WHERE EACH DATA POINT INITIALLY BELONGS TO ITS OWN CLUSTER.
#     6. THE MAIN LOOP OF THE HIERARCHICAL CLUSTERING ALGORITHM STARTS. IT CONTINUES UNTIL THERE IS ONLY ONE CLUSTER LEFT IN THE `CLUSTERS` LIST.
#     7. WITHIN THE MAIN LOOP, THE FUNCTION FINDS THE TWO CLOSEST CLUSTERS TO MERGE. IT INITIALIZES VARIABLES `MIN_DISTANCE`, `MERGE_I`, AND `MERGE_J` TO KEEP TRACK OF THE MINIMUM DISTANCE AND THE INDICES OF THE CLUSTERS TO MERGE.
#     8. THE FUNCTION ITERATES OVER ALL PAIRS OF CLUSTERS USING NESTED LOOPS. FOR EACH PAIR, IT CALLS THE `__CALCULATE_MERGE_DISTANCE__` HELPER FUNCTION TO CALCULATE THE MERGE DISTANCE.
#     9. THE `__CALCULATE_MERGE_DISTANCE__` HELPER FUNCTION TAKES THE INDICES OF THE TWO CLUSTERS AND THE `DISTANCES` MATRIX AS INPUT. IT CALCULATES THE TOTAL DISTANCE BETWEEN THE DATA POINTS IN THE TWO CLUSTERS AND RETURNS THE AVERAGE DISTANCE.
#     10. THE FUNCTION CHECKS IF THE CALCULATED DISTANCE IS SMALLER THAN THE CURRENT MINIMUM DISTANCE. IF SO, IT UPDATES THE MINIMUM DISTANCE AND RECORDS THE INDICES OF THE CLUSTERS TO MERGE.
#     11. AFTER FINDING THE TWO CLOSEST CLUSTERS, THE FUNCTION MERGES THEM BY EXTENDING THE LIST OF DATA POINT INDICES IN ONE CLUSTER WITH THE INDICES FROM THE OTHER CLUSTER.
#     12. THE FUNCTION REMOVES THE MERGED CLUSTER FROM THE `CLUSTERS` LIST.
#     13. ONCE THE MAIN LOOP COMPLETES, THE FUNCTION RETURNS THE FINAL CLUSTERS, WHERE EACH CLUSTER IS REPRESENTED AS A LIST OF INDICES CORRESPONDING TO THE DATA POINTS IN THAT CLUSTER.
# THE `__EUCLIDEAN_DISTANCE__` HELPER FUNCTION CALCULATES THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS IN A MULTI-DIMENSIONAL SPACE. IT TAKES TWO INPUT ARRAYS, `X_1` AND `X_2`, REPRESENTING THE COORDINATES OF TWO POINTS. THE FUNCTION COMPUTES THE SQUARE ROOT OF THE SUM OF SQUARED DIFFERENCES ALONG EACH DIMENSION, YIELDING THE EUCLIDEAN DISTANCE BETWEEN THE TWO POINTS.
# OVERALL, THE `WARD_HIERARCHICAL_CLUSTERING` FUNCTION PERFORMS HIERARCHICAL CLUSTERING USING THE WARD'S LINKAGE METHOD, WHICH IS BASED ON THE MERGE DISTANCES BETWEEN CLUSTERS. IT ITERATIVELY MERGES THE CLOSEST CLUSTERS UNTIL ONLY ONE CLUSTER REMAINS, AND RETURNS THE RESULTING CLUSTERS AS A LIST OF INDICES.
def WARD_HIERARCHICAL_CLUSTERING(X):
    """THE `WARD_HIERARCHICAL_CLUSTERING` FUNCTION IS AN IMPLEMENTATION OF THE WARD'S LINKAGE ALGORITHM FOR HIERARCHICAL CLUSTERING. IT TAKES A DATASET AS INPUT AND GROUPS SIMILAR DATA POINTS INTO CLUSTERS BASED ON THEIR DISTANCES.
        1. EUCLIDEAN DISTANCE CALCULATION: CALCULATES THE PAIRWISE EUCLIDEAN DISTANCES BETWEEN DATA POINTS IN THE DATASET.
        2. CLUSTER INITIALIZATION: INITIALIZES EACH DATA POINT AS AN INDIVIDUAL CLUSTER.
        3. MERGE DISTANCE CALCULATION: DEFINES A HELPER FUNCTION TO CALCULATE THE MERGE DISTANCE BETWEEN TWO CLUSTERS BASED ON THEIR DATA POINTS AND PAIRWISE DISTANCES.
        4. HIERARCHICAL CLUSTERING:
            - ITERATIVELY MERGES THE TWO CLOSEST CLUSTERS BASED ON THE CALCULATED MERGE DISTANCES.
            - CONTINUES MERGING UNTIL THERE IS ONLY ONE CLUSTER REMAINING.
        5. RESULT: RETURNS THE FINAL CLUSTERS AS A LIST OF INDICES, WHERE EACH CLUSTER REPRESENTS A GROUP OF SIMILAR DATA POINTS.
    THE `WARD_HIERARCHICAL_CLUSTERING` FUNCTION UTILIZES THE WARD'S LINKAGE METHOD, WHICH COMBINES CLUSTERS BASED ON THE SMALLEST INCREASE IN VARIANCE WITHIN THE RESULTING MERGED CLUSTER. IT LEVERAGES THE CONCEPT OF EUCLIDEAN DISTANCE TO MEASURE THE SIMILARITY OR DISSIMILARITY BETWEEN DATA POINTS. BY ITERATIVELY MERGING CLUSTERS, THE ALGORITHM CONSTRUCTS A HIERARCHICAL STRUCTURE OF CLUSTERS, PROVIDING INSIGHTS INTO THE RELATIONSHIPS BETWEEN DIFFERENT GROUPS OF DATA POINTS.
    OVERALL, THE FUNCTION ENABLES THE APPLICATION OF HIERARCHICAL CLUSTERING USING WARD'S LINKAGE, ALLOWING DATA TO BE ORGANIZED INTO MEANINGFUL CLUSTERS BASED ON THEIR DISTANCES."""

    # THE `__CALCULATE_MERGE_DISTANCE__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `WARD_HIERARCHICAL_CLUSTERING` FUNCTION. ITS PURPOSE IS TO CALCULATE THE MERGE DISTANCE BETWEEN TWO CLUSTERS BASED ON THEIR DATA POINTS AND PAIRWISE DISTANCES.
    #     1. THE FUNCTION TAKES THREE INPUTS:
    #         - `CLUSTER_A` AND `CLUSTER_B`: LISTS OF INDICES REPRESENTING THE DATA POINTS IN TWO CLUSTERS.
    #         - `DISTANCES`: A MATRIX OF PAIRWISE DISTANCES BETWEEN ALL DATA POINTS.
    #     2. IT INITIALIZES A VARIABLE `TOTAL_DISTANCE` TO KEEP TRACK OF THE SUM OF DISTANCES BETWEEN DATA POINTS IN THE TWO CLUSTERS.
    #     3. THE FUNCTION USES NESTED LOOPS TO ITERATE OVER ALL PAIRS OF DATA POINTS, ONE FROM EACH CLUSTER.
    #     4. FOR EACH PAIR OF DATA POINTS, IT RETRIEVES THEIR INDICES AND ACCESSES THE CORRESPONDING DISTANCE VALUE FROM THE `DISTANCES` MATRIX.
    #     5. THE DISTANCE VALUE IS ADDED TO THE `TOTAL_DISTANCE` VARIABLE.
    #     6. ONCE ALL PAIRS OF DATA POINTS HAVE BEEN PROCESSED, THE FUNCTION CALCULATES THE AVERAGE DISTANCE BETWEEN THE CLUSTERS BY DIVIDING THE `TOTAL_DISTANCE` BY THE PRODUCT OF THE SIZES OF THE TWO CLUSTERS (I.E., THE NUMBER OF DATA POINTS IN `CLUSTER_A` MULTIPLIED BY THE NUMBER OF DATA POINTS IN `CLUSTER_B`).
    #     7. THE AVERAGE DISTANCE IS RETURNED AS THE OUTPUT OF THE FUNCTION.
    # IN SUMMARY, THE `__CALCULATE_MERGE_DISTANCE__` FUNCTION CALCULATES THE MERGE DISTANCE BETWEEN TWO CLUSTERS BY SUMMING UP THE DISTANCES BETWEEN ALL PAIRS OF DATA POINTS IN THE CLUSTERS AND DIVIDING THE TOTAL BY THE PRODUCT OF THE CLUSTER SIZES. IT PROVIDES A MEASURE OF DISSIMILARITY BETWEEN THE CLUSTERS AND IS USED WITHIN THE WARD'S LINKAGE ALGORITHM TO DETERMINE THE CLOSEST CLUSTERS FOR MERGING.
    def __CALCULATE_MERGE_DISTANCE__(CLUSTER_A, CLUSTER_B, DISTANCES):
        """THE `__CALCULATE_MERGE_DISTANCE__` FUNCTION IS A HELPER FUNCTION USED WITHIN THE `WARD_HIERARCHICAL_CLUSTERING` ALGORITHM. IT CALCULATES THE MERGE DISTANCE BETWEEN TWO CLUSTERS BASED ON THEIR DATA POINTS AND PAIRWISE DISTANCES.
            1. INPUT:
                - TAKES TWO CLUSTERS REPRESENTED AS LISTS OF INDICES (`CLUSTER_A` AND `CLUSTER_B`).
                - RECEIVES A MATRIX OF PAIRWISE DISTANCES BETWEEN DATA POINTS (`DISTANCES`).
            2. TOTAL DISTANCE CALCULATION:
                - INITIALIZES A VARIABLE TO STORE THE TOTAL DISTANCE BETWEEN THE CLUSTERS.
                - ITERATES OVER ALL PAIRS OF DATA POINTS FROM `CLUSTER_A` AND `CLUSTER_B`.
                - RETRIEVES THE PAIRWISE DISTANCE BETWEEN EACH PAIR OF DATA POINTS FROM THE `DISTANCES` MATRIX.
                - ACCUMULATES THE DISTANCE VALUES TO THE TOTAL DISTANCE.
            3. AVERAGE DISTANCE CALCULATION:
                - DIVIDES THE TOTAL DISTANCE BY THE PRODUCT OF THE SIZES OF `CLUSTER_A` AND `CLUSTER_B`.
                - CALCULATES THE AVERAGE DISTANCE BETWEEN THE CLUSTERS.
            4. RESULT: RETURNS THE AVERAGE DISTANCE AS THE OUTPUT OF THE FUNCTION.
        THE `__CALCULATE_MERGE_DISTANCE__` FUNCTION PROVIDES A MEASURE OF DISSIMILARITY BETWEEN TWO CLUSTERS BY COMPUTING THE AVERAGE DISTANCE BETWEEN THEIR DATA POINTS. IT PLAYS A CRUCIAL ROLE IN THE WARD'S LINKAGE ALGORITHM, WHERE IT HELPS IDENTIFY THE CLOSEST CLUSTERS FOR MERGING BASED ON THE SMALLEST INCREASE IN VARIANCE."""
        TOTAL_DISTANCE = 0.0
        for i in CLUSTER_A:
            for j in CLUSTER_B:
                TOTAL_DISTANCE += DISTANCES[i, j]
        return TOTAL_DISTANCE / (len(CLUSTER_A) * len(CLUSTER_B))

    N_SAMPLES = len(X)
    DISTANCES = np.zeros((N_SAMPLES, N_SAMPLES))
    for i in range(N_SAMPLES):
        for j in range(i + 1, N_SAMPLES):
            DISTANCES[i, j] = DISTANCES[j, i] = __EUCLIDEAN_DISTANCE__(X[i], X[j])
    CLUSTERS = [[i] for i in range(N_SAMPLES)]
    while len(CLUSTERS) > 1:
        MIN_DISTANCE = np.inf
        MERGE_I, MERGE_J = -1, -1
        for i, _ in enumerate(CLUSTERS):
            for j, _ in enumerate(CLUSTERS, start=i + 1):
                DISTANCE = __CALCULATE_MERGE_DISTANCE__(CLUSTERS[i], CLUSTERS[j], DISTANCES)
                if DISTANCE < MIN_DISTANCE:
                    MIN_DISTANCE = DISTANCE
                    MERGE_I, MERGE_J = i, j
        CLUSTERS[MERGE_I].extend(CLUSTERS[MERGE_J])
        del CLUSTERS[MERGE_J]
    return CLUSTERS

# THE `__EUCLIDEAN_DISTANCE__` FUNCTION CALCULATES THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS IN A MULTI-DIMENSIONAL SPACE. EUCLIDEAN DISTANCE IS A COMMON DISTANCE METRIC USED IN VARIOUS MACHINE LEARNING ALGORITHMS, INCLUDING K-MEANS CLUSTERING.
#     1. THE FUNCTION TAKES TWO INPUT ARRAYS, `X_1` AND `X_2`, WHICH REPRESENT THE COORDINATES OF TWO POINTS IN THE SAME DIMENSIONAL SPACE. EACH ARRAY REPRESENTS THE COORDINATES ALONG EACH DIMENSION OF THE SPACE.
#     2. THE DIFFERENCE BETWEEN THE TWO INPUT POINTS IS COMPUTED BY SUBTRACTING `X_2` FROM `X_1`. THIS OPERATION RESULTS IN A NEW ARRAY REPRESENTING THE VECTOR BETWEEN THE TWO POINTS. EACH ELEMENT OF THE VECTOR CORRESPONDS TO THE DIFFERENCE BETWEEN THE COORDINATES OF THE TWO POINTS ALONG A SPECIFIC DIMENSION.
#     3. THE SQUARE OF EACH ELEMENT IN THE VECTOR IS CALCULATED USING THE `** 2` OPERATOR. THIS OPERATION EFFECTIVELY SQUARES THE DIFFERENCES ALONG EACH DIMENSION. SQUARING THE DIFFERENCES ENSURES THAT NEGATIVE VALUES DO NOT CANCEL OUT POSITIVE VALUES WHEN CALCULATING THE DISTANCE.
#     4. THE SQUARED DIFFERENCES ALONG EACH DIMENSION ARE THEN SUMMED UP USING THE `NP.SUM` FUNCTION WITH THE `AXIS=0` ARGUMENT. THE `AXIS=0` ARGUMENT SPECIFIES THAT THE SUM SHOULD BE PERFORMED ALONG THE FIRST AXIS, WHICH CORRESPONDS TO SUMMING THE SQUARED DIFFERENCES ACROSS EACH DIMENSION. THE RESULT IS A SINGLE SCALAR VALUE REPRESENTING THE SUM OF SQUARED DIFFERENCES.
#     5. THE SQUARE ROOT OF THE SUM OF SQUARED DIFFERENCES IS TAKEN USING THE `NP.SQRT` FUNCTION. THIS STEP IS NECESSARY TO OBTAIN THE ACTUAL EUCLIDEAN DISTANCE. TAKING THE SQUARE ROOT ENSURES THAT THE DISTANCE IS IN THE SAME UNITS AS THE ORIGINAL COORDINATES AND PROVIDES A MEASURE OF THE MAGNITUDE OF THE VECTOR BETWEEN THE TWO POINTS.
#     6. FINALLY, THE EUCLIDEAN DISTANCE IS RETURNED AS THE OUTPUT OF THE FUNCTION.
# IN SUMMARY, THE `__EUCLIDEAN_DISTANCE__` FUNCTION CALCULATES THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS BY FINDING THE SQUARE ROOT OF THE SUM OF SQUARED DIFFERENCES ALONG EACH DIMENSION. THE RESULTING VALUE REPRESENTS THE DISTANCE BETWEEN THE TWO POINTS IN THE MULTI-DIMENSIONAL SPACE. EUCLIDEAN DISTANCE IS COMMONLY USED AS A MEASURE OF SIMILARITY OR DISSIMILARITY BETWEEN POINTS AND IS EMPLOYED IN VARIOUS ALGORITHMS FOR CLUSTERING, CLASSIFICATION, AND OTHER TASKS.
def __EUCLIDEAN_DISTANCE__(X_1, X_2):
    """THE `__EUCLIDEAN_DISTANCE__` FUNCTION IS USED TO CALCULATE THE EUCLIDEAN DISTANCE BETWEEN TWO POINTS IN A MULTI-DIMENSIONAL SPACE. EUCLIDEAN DISTANCE IS A MEASURE OF SIMILARITY OR DISSIMILARITY BETWEEN POINTS, AND IT IS WIDELY EMPLOYED IN VARIOUS MACHINE LEARNING ALGORITHMS, PARTICULARLY IN CLUSTERING AND CLASSIFICATION TASKS.
        1. INPUT: THE FUNCTION TAKES TWO INPUT ARRAYS, `X_1` AND `X_2`, WHICH REPRESENT THE COORDINATES OF THE TWO POINTS IN THE SAME DIMENSIONAL SPACE.
        2. VECTOR CALCULATION: THE FUNCTION COMPUTES THE DIFFERENCE BETWEEN THE TWO INPUT POINTS BY SUBTRACTING `X_2` FROM `X_1`. THIS CREATES A NEW ARRAY THAT REPRESENTS THE VECTOR CONNECTING THE TWO POINTS.
        3. SQUARED DIFFERENCES: EACH ELEMENT IN THE VECTOR IS SQUARED USING THE `** 2` OPERATOR. THIS STEP EFFECTIVELY SQUARES THE DIFFERENCES ALONG EACH DIMENSION, ENSURING THAT NEGATIVE VALUES DO NOT CANCEL OUT POSITIVE VALUES.
        4. SUMMATION: THE SQUARED DIFFERENCES ALONG EACH DIMENSION ARE SUMMED UP USING THE `NP.SUM` FUNCTION WITH THE `AXIS=0` ARGUMENT. THIS RESULTS IN A SINGLE SCALAR VALUE, WHICH REPRESENTS THE SUM OF SQUARED DIFFERENCES.
        5. SQUARE ROOT: THE SQUARE ROOT OF THE SUM OF SQUARED DIFFERENCES IS TAKEN USING THE `NP.SQRT` FUNCTION. THIS YIELDS THE EUCLIDEAN DISTANCE BETWEEN THE TWO POINTS. THE SQUARE ROOT OPERATION ENSURES THAT THE DISTANCE IS IN THE SAME UNITS AS THE ORIGINAL COORDINATES AND PROVIDES A MEASURE OF THE MAGNITUDE OF THE VECTOR BETWEEN THE POINTS.
        6. OUTPUT: THE FUNCTION RETURNS THE EUCLIDEAN DISTANCE AS THE FINAL OUTPUT.
    OVERALL, THE `__EUCLIDEAN_DISTANCE__` FUNCTION ENCAPSULATES THE COMPUTATION OF EUCLIDEAN DISTANCE IN A CONCISE MANNER. IT OFFERS A CONVENIENT WAY TO MEASURE THE SIMILARITY OR DISSIMILARITY BETWEEN POINTS IN A MULTI-DIMENSIONAL SPACE, MAKING IT VALUABLE FOR A RANGE OF MACHINE LEARNING TASKS SUCH AS CLUSTERING, CLASSIFICATION, AND OTHER ALGORITHMS THAT RELY ON DISTANCE METRICS."""
    return np.sqrt(np.sum((X_1 - X_2) ** 2, axis=0))