import numpy as np

# THE `BIRCH` FUNCTION IMPLEMENTS THE BIRCH (BALANCED ITERATIVE REDUCING AND CLUSTERING USING HIERARCHIES) ALGORITHM, A HIERARCHICAL CLUSTERING ALGORITHM USED FOR LARGE-SCALE DATASETS.
#     1. THE FUNCTION TAKES THREE PARAMETERS: `X` (THE INPUT DATA), `BRANCHING_FACTOR` (THE MAXIMUM NUMBER OF CHILDREN FOR EACH INTERNAL NODE), AND AN OPTIONAL PARAMETER `THRESHOLD` (A THRESHOLD VALUE USED TO DETERMINE IF A NODE SHOULD BE SPLIT).
#     2. INSIDE THE FUNCTION, THERE IS A NESTED CLASS DEFINITION FOR `BIRCH_NODE`, WHICH REPRESENTS A NODE IN THE BIRCH TREE. EACH NODE HAS THE FOLLOWING ATTRIBUTES:
#         - `IS_LEAF`: A BOOLEAN FLAG INDICATING WHETHER THE NODE IS A LEAF NODE OR AN INTERNAL NODE.
#         - `CHILDREN`: A LIST OF CHILD NODES.
#         - `SUBCLUSTER_CENTERS`: A LIST OF SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE.
#         - `N_SAMPLES`: THE NUMBER OF DATA POINTS IN THE SUBCLUSTERS ASSOCIATED WITH THE NODE.
#     3. THE `BIRCH_NODE` CLASS ALSO DEFINES SEVERAL METHODS:
#         - `ADD_CHILD(SELF, CHILD)`: ADDS A CHILD NODE TO THE CURRENT NODE.
#         - `IS_FULL(SELF)`: CHECKS IF THE CURRENT NODE HAS REACHED ITS MAXIMUM NUMBER OF CHILDREN.
#         - `SHOULD_SPLIT(SELF)`: CHECKS IF THE CURRENT NODE SHOULD BE SPLIT BASED ON THE THRESHOLD VALUE.
#         - `UPDATE_SUBCLUSTER_CENTERS(SELF, POINT)`: UPDATES THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE BY ADDING A NEW POINT.
#         - `COMPUTE_PROTOTYPE(SELF)`: COMPUTES THE PROTOTYPE (CENTER) OF THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE.
#     4. THE `__INSERT__` FUNCTION IS A RECURSIVE HELPER FUNCTION USED TO INSERT A DATA POINT INTO THE BIRCH TREE. IT TAKES A POINT `POINT` AND A NODE `NODE`. IF THE NODE IS A LEAF NODE, THE FUNCTION UPDATES THE SUBCLUSTER CENTERS OF THE NODE AND CHECKS IF THE NODE SHOULD BE SPLIT BASED ON THE THRESHOLD. IF THE NODE IS AN INTERNAL NODE, THE FUNCTION FINDS THE CLOSEST CHILD NODE TO THE POINT BASED ON THE DISTANCE TO THE CHILD'S PROTOTYPE AND RECURSIVELY CALLS `__INSERT__` WITH THE POINT AND THE CLOSEST CHILD.
#     5. THE `__SPLIT_NODE__` FUNCTION IS ANOTHER RECURSIVE HELPER FUNCTION USED TO SPLIT A NODE IF IT EXCEEDS THE THRESHOLD. IT TAKES A NODE `NODE` AS INPUT. THE FUNCTION CALCULATES A CHILD THRESHOLD BASED ON THE ORIGINAL THRESHOLD, CREATES A NEW LIST FOR SUBCLUSTER CENTERS FOR THE NODE, AND RESETS THE SAMPLE COUNT. THEN, FOR EACH SUBCLUSTER CENTER IN THE ORIGINAL LIST, THE FUNCTION FINDS THE CLOSEST CHILD NODE AND CHECKS IF THE DISTANCE IS GREATER THAN THE CHILD THRESHOLD. IF IT IS, A NEW NODE IS CREATED, THE SUBCLUSTER CENTER IS ADDED TO THE NEW NODE, AND THE NEW NODE IS ADDED AS A CHILD TO THE CURRENT NODE. OTHERWISE, THE SUBCLUSTER CENTER IS ADDED TO THE CLOSEST CHILD NODE. AFTER THIS PROCESS, THE PROTOTYPE OF EACH CHILD IS RECOMPUTED. IF THE CURRENT NODE IS NOW FULL, A NEW NODE IS CREATED, THE CHILDREN ARE MOVED TO THE NEW NODE, AND THE NEW NODE BECOMES THE ONLY CHILD OF THE CURRENT NODE.
#     6. THE `__FIND_CLOSEST_CLUSTER__` FUNCTION IS A RECURSIVE HELPER FUNCTION USED TO FIND THE CLOSEST CLUSTER CENTER TO A GIVEN POINT. IT TAKES A POINT `POINT` AND A NODE `NODE` AS INPUT. IF THE NODE IS A LEAF NODE, THE FUNCTION ITERATES OVER THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE AND FINDS THE CLOSEST CENTER TO THE GIVEN POINT. IF THE NODE IS AN INTERNAL NODE, THE FUNCTION FINDS THE CLOSEST CHILD NODE BASED ON THE DISTANCE TO THE CHILD'S PROTOTYPE AND RECURSIVELY CALLS `__FIND_CLOSEST_CLUSTER__` WITH THE POINT AND THE CLOSEST CHILD.
#     7. THE MAIN PART OF THE `BIRCH` FUNCTION STARTS BY CREATING THE ROOT NODE OF THE BIRCH TREE.
#     8. IT THEN ITERATES OVER EACH POINT IN THE INPUT DATA `X` AND INSERTS THE POINT INTO THE BIRCH TREE USING THE `__INSERT__` FUNCTION.
#     9. AFTER INSERTING ALL THE POINTS, THE FUNCTION CREATES AN ARRAY `LABELS` TO STORE THE CLUSTER LABELS FOR EACH DATA POINT.
#     10. IT ITERATES OVER EACH DATA POINT AGAIN AND USES THE `__FIND_CLOSEST_CLUSTER__` FUNCTION TO FIND THE CLOSEST CLUSTER CENTER TO EACH POINT. THE LABEL OF THE CLOSEST CLUSTER CENTER IS ASSIGNED TO THE CORRESPONDING DATA POINT IN THE `LABELS` ARRAY.
#     11. FINALLY, THE `LABELS` ARRAY IS RETURNED AS THE RESULT OF THE `BIRCH` FUNCTION.
# IN SUMMARY, THE `BIRCH` FUNCTION IMPLEMENTS THE BIRCH ALGORITHM BY CONSTRUCTING A HIERARCHICAL TREE STRUCTURE, SPLITTING NODES IF THEY EXCEED A THRESHOLD, AND ASSIGNING CLUSTER LABELS TO DATA POINTS BASED ON THEIR PROXIMITY TO THE CLUSTER CENTERS. THE ALGORITHM PROVIDES A SCALABLE SOLUTION FOR CLUSTERING LARGE DATASETS.
def BIRCH(X, BRANCHING_FACTOR, THRESHOLD=0.5):
    """THE `BIRCH` FUNCTION IMPLEMENTS THE BIRCH (BALANCED ITERATIVE REDUCING AND CLUSTERING USING HIERARCHIES) ALGORITHM, A HIERARCHICAL CLUSTERING ALGORITHM SUITABLE FOR LARGE-SCALE DATASETS.
        1. BIRCH ALGORITHM OVERVIEW:
            - BIRCH IS A HIERARCHICAL CLUSTERING ALGORITHM THAT AIMS TO EFFICIENTLY CLUSTER LARGE DATASETS.
            - IT CONSTRUCTS A TREE-LIKE STRUCTURE CALLED THE BIRCH TREE, WHERE EACH NODE REPRESENTS A CLUSTER OR A SUBCLUSTER.
            - THE ALGORITHM INCREMENTALLY INSERTS DATA POINTS INTO THE TREE, DYNAMICALLY UPDATING THE CLUSTER STRUCTURE.
            - IT BALANCES THE TREE BY LIMITING THE NUMBER OF CHILDREN PER NODE AND SPLITTING NODES WHEN THEY EXCEED A THRESHOLD.
        2. BIRCH_NODE CLASS:
            - REPRESENTS A NODE IN THE BIRCH TREE.
            - TRACKS WHETHER THE NODE IS A LEAF NODE OR AN INTERNAL NODE.
            - STORES CHILD NODES, SUBCLUSTER CENTERS, AND THE NUMBER OF SAMPLES IN THE SUBCLUSTERS.
        3. INSERTION PROCESS:
            - THE ALGORITHM ITERATES THROUGH EACH DATA POINT AND INSERTS IT INTO THE BIRCH TREE.
            - THE POINT IS RECURSIVELY INSERTED INTO THE CLOSEST CHILD NODE BASED ON THE DISTANCE TO THE CHILD'S PROTOTYPE.
            - LEAF NODES UPDATE THEIR SUBCLUSTER CENTERS AND MAY SPLIT IF THEY EXCEED THE THRESHOLD.
        4. SPLITTING NODES:
            - WHEN A LEAF NODE EXCEEDS THE THRESHOLD, IT IS SPLIT INTO MULTIPLE CHILD NODES.
            - SUBCLUSTER CENTERS ASSOCIATED WITH THE ORIGINAL NODE ARE REDISTRIBUTED TO THE APPROPRIATE CHILD NODES.
            - IF A CHILD NODE CANNOT ACCOMMODATE A SUBCLUSTER CENTER, A NEW CHILD NODE IS CREATED.
            - THE PROTOTYPES (CENTERS) OF THE CHILD NODES ARE RECOMPUTED.
        5. FINDING THE CLOSEST CLUSTER:
            - TO ASSIGN CLUSTER LABELS, THE ALGORITHM FINDS THE CLOSEST CLUSTER CENTER TO EACH DATA POINT.
            - LEAF NODES COMPARE THE DISTANCES TO THEIR SUBCLUSTER CENTERS AND RETURN THE CLOSEST ONE.
            - INTERNAL NODES FIND THE CLOSEST CHILD NODE BASED ON THE DISTANCE TO THE CHILD'S PROTOTYPE AND RECURSE.
        6. LABEL ASSIGNMENT AND RESULT:
            - AFTER ALL DATA POINTS ARE INSERTED AND CLOSEST CLUSTERS ARE FOUND, CLUSTER LABELS ARE ASSIGNED.
            - AN ARRAY IS CREATED TO STORE THE CLUSTER LABELS FOR EACH DATA POINT.
            - EACH POINT IS ASSIGNED THE LABEL OF THE CLOSEST CLUSTER CENTER.
            - THE ARRAY OF LABELS IS RETURNED AS THE RESULT OF THE `BIRCH` FUNCTION.
    THE BIRCH ALGORITHM OFFERS AN EFFICIENT APPROACH TO CLUSTERING LARGE DATASETS, PROVIDING A HIERARCHICAL STRUCTURE THAT ALLOWS FOR SCALABILITY AND THE ABILITY TO HANDLE HIGH-DIMENSIONAL DATA."""

    # THE `BIRCH_NODE` CLASS IS A FUNDAMENTAL COMPONENT OF THE BIRCH CLUSTERING ALGORITHM. IT REPRESENTS A NODE IN THE BIRCH TREE AND MAINTAINS INFORMATION ABOUT THE CLUSTER OR SUBCLUSTER ASSOCIATED WITH THAT NODE.
    #     1. ATTRIBUTES:
    #         - `IS_LEAF`: THIS BOOLEAN ATTRIBUTE INDICATES WHETHER THE NODE IS A LEAF NODE OR AN INTERNAL NODE. LEAF NODES REPRESENT FINAL CLUSTERS, WHILE INTERNAL NODES REPRESENT INTERMEDIATE CLUSTERS OR SUBCLUSTERS.
    #         - `CHILDREN`: THIS ATTRIBUTE IS A LIST THAT STORES THE CHILD NODES OF THE CURRENT NODE. INTERNAL NODES HAVE CHILD NODES, WHEREAS LEAF NODES DO NOT.
    #         - `SUBCLUSTER_CENTERS`: THIS LIST CONTAINS THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE. SUBCLUSTER CENTERS ARE REPRESENTATIVE POINTS WITHIN A CLUSTER OR SUBCLUSTER.
    #         - `N_SAMPLES`: THIS ATTRIBUTE KEEPS TRACK OF THE NUMBER OF DATA POINTS IN THE SUBCLUSTERS ASSOCIATED WITH THE NODE.
    #     2. METHODS:
    #         - `ADD_CHILD(SELF, CHILD)`: THIS METHOD ADDS A CHILD NODE TO THE CURRENT NODE. IT APPENDS THE CHILD NODE TO THE `CHILDREN` LIST.
    #         - `IS_FULL(SELF)`: THIS METHOD CHECKS IF THE CURRENT NODE HAS REACHED ITS MAXIMUM CAPACITY IN TERMS OF THE NUMBER OF CHILDREN IT CAN HAVE. IT RETURNS `TRUE` IF THE NUMBER OF CHILDREN EQUALS THE PREDEFINED BRANCHING FACTOR, `BRANCHING_FACTOR`, AND `FALSE` OTHERWISE.
    #         - `SHOULD_SPLIT(SELF)`: THIS METHOD DETERMINES WHETHER THE CURRENT NODE SHOULD BE SPLIT BASED ON THE NUMBER OF SAMPLES IT CONTAINS. IT COMPARES THE `N_SAMPLES` ATTRIBUTE WITH THE PREDEFINED THRESHOLD, `THRESHOLD`, AND RETURNS `TRUE` IF THE NUMBER OF SAMPLES EXCEEDS THE THRESHOLD, INDICATING THAT THE NODE SHOULD BE SPLIT.
    #         - `UPDATE_SUBCLUSTER_CENTERS(SELF, POINT)`: THIS METHOD UPDATES THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE BY ADDING A NEW POINT. IT APPENDS THE `POINT` TO THE `SUBCLUSTER_CENTERS` LIST AND INCREMENTS THE `N_SAMPLES` ATTRIBUTE BY 1.
    #         - `COMPUTE_PROTOTYPE(SELF)`: THIS METHOD CALCULATES THE PROTOTYPE (CENTER) OF THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE. IT CONVERTS THE `SUBCLUSTER_CENTERS` LIST INTO A NUMPY ARRAY, AND THEN COMPUTES THE MEAN OF THE SUBCLUSTER CENTERS ALONG EACH DIMENSION TO OBTAIN THE PROTOTYPE.
    # THE `BIRCH_NODE` CLASS ENCAPSULATES THE BEHAVIOR AND PROPERTIES OF INDIVIDUAL NODES IN THE BIRCH TREE. IT ALLOWS FOR THE ORGANIZATION OF DATA POINTS INTO CLUSTERS OR SUBCLUSTERS, TRACKING THEIR COUNTS AND REPRESENTATIVE CENTERS. THIS INFORMATION IS ESSENTIAL FOR THE INSERTION, SPLITTING, AND RETRIEVAL PROCESSES IN THE BIRCH ALGORITHM, FACILITATING THE CONSTRUCTION AND EXPLORATION OF THE HIERARCHICAL CLUSTERING STRUCTURE.
    class BIRCH_NODE:
        """THE `BIRCH_NODE` CLASS IS A FUNDAMENTAL COMPONENT OF THE BIRCH (BALANCED ITERATIVE REDUCING AND CLUSTERING USING HIERARCHIES) CLUSTERING ALGORITHM.
            1. ATTRIBUTES:
                - `IS_LEAF`: A BOOLEAN FLAG INDICATING WHETHER THE NODE IS A LEAF NODE OR AN INTERNAL NODE.
                - `CHILDREN`: A LIST STORING THE CHILD NODES OF THE CURRENT NODE.
                - `SUBCLUSTER_CENTERS`: A LIST OF SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE.
                - `N_SAMPLES`: THE NUMBER OF DATA POINTS IN THE SUBCLUSTERS ASSOCIATED WITH THE NODE.
            2. `ADD_CHILD` METHOD: ADDS A CHILD NODE TO THE CURRENT NODE BY APPENDING IT TO THE `CHILDREN` LIST.
            3. `IS_FULL` METHOD: CHECKS IF THE CURRENT NODE HAS REACHED ITS MAXIMUM CAPACITY BY COMPARING THE NUMBER OF CHILDREN WITH THE PREDEFINED BRANCHING FACTOR.
            4. `SHOULD_SPLIT` METHOD: DETERMINES IF THE CURRENT NODE SHOULD BE SPLIT BASED ON THE NUMBER OF SAMPLES IT CONTAINS, COMPARING IT WITH THE PREDEFINED THRESHOLD.
            5. `UPDATE_SUBCLUSTER_CENTERS` METHOD:
                - UPDATES THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE BY ADDING A NEW POINT TO THE `SUBCLUSTER_CENTERS` LIST.
                - INCREMENTS THE `N_SAMPLES` ATTRIBUTE TO REFLECT THE ADDITION OF A NEW DATA POINT.
            6. `COMPUTE_PROTOTYPE` METHOD:
                - CALCULATES THE PROTOTYPE (CENTER) OF THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE.
                - CONVERTS THE `SUBCLUSTER_CENTERS` LIST INTO A NUMPY ARRAY AND COMPUTES THE MEAN ALONG EACH DIMENSION TO OBTAIN THE PROTOTYPE.
        THE `BIRCH_NODE` CLASS PLAYS A CRUCIAL ROLE IN MAINTAINING THE HIERARCHICAL STRUCTURE OF THE BIRCH TREE. IT STORES INFORMATION ABOUT WHETHER A NODE IS A LEAF OR INTERNAL NODE, KEEPS TRACK OF CHILD NODES, SUBCLUSTER CENTERS, AND THE NUMBER OF DATA POINTS IN EACH SUBCLUSTER. THESE ATTRIBUTES AND METHODS ENABLE THE CONSTRUCTION, SPLITTING, AND MANAGEMENT OF CLUSTERS AND SUBCLUSTERS WITHIN THE BIRCH ALGORITHM."""

        # THE `__INIT__` FUNCTION WITHIN THE `BIRCH_NODE` CLASS IS THE INITIALIZER OR CONSTRUCTOR METHOD. IT IS CALLED WHEN A NEW INSTANCE OF THE `BIRCH_NODE` CLASS IS CREATED.
        #    - `IS_LEAF`:
        #      - THE `IS_LEAF` ATTRIBUTE IS ASSIGNED THE VALUE PROVIDED AS THE `IS_LEAF` PARAMETER DURING OBJECT CREATION.
        #      - IT REPRESENTS WHETHER THE NODE IS A LEAF NODE (`TRUE`) OR AN INTERNAL NODE (`FALSE`).
        #    - `CHILDREN`:
        #      - THE `CHILDREN` ATTRIBUTE IS INITIALIZED AS AN EMPTY LIST (`[]`).
        #      - IT WILL STORE THE CHILD NODES OF THE CURRENT NODE.
        #    - `SUBCLUSTER_CENTERS`:
        #      - THE `SUBCLUSTER_CENTERS` ATTRIBUTE IS INITIALIZED AS AN EMPTY LIST (`[]`).
        #      - IT WILL HOLD THE SUBCLUSTER CENTRES ASSOCIATED WITH THE NODE.
        #    - `N_SAMPLES`:
        #      - THE `N_SAMPLES` ATTRIBUTE IS INITIALIZED WITH A VALUE OF 0.
        #      - IT REPRESENTS THE NUMBER OF DATA POINTS IN THE SUBCLUSTERS ASSOCIATED WITH THE NODE.
        # THE `__INIT__` FUNCTION IN THE `BIRCH_NODE` CLASS ENSURES THAT EACH NODE IS PROPERLY INITIALIZED WITH THE REQUIRED ATTRIBUTES. IT SETS THE INITIAL STATE OF THE NODE, INCLUDING WHETHER IT IS A LEAF OR INTERNAL NODE, AN EMPTY LIST FOR CHILD NODES, AN EMPTY LIST FOR SUBCLUSTER CENTRES, AND A COUNT OF ZERO FOR THE NUMBER OF SAMPLES. THESE ATTRIBUTES ARE CRUCIAL FOR TRACKING AND MANAGING THE HIERARCHICAL STRUCTURE OF THE BIRCH TREE DURING THE CLUSTERING PROCESS.
        def __init__(self, IS_LEAF=True):
            """THE `__INIT__` FUNCTION IN THE `BIRCH_NODE` CLASS SERVES AS THE INITIALIZER OR CONSTRUCTOR METHOD. IT SETS UP THE ATTRIBUTES OF THE NODE, PREPARING IT FOR USE IN THE BIRCH CLUSTERING ALGORITHM.
                1. ATTRIBUTES:
                    - `IS_LEAF`: A BOOLEAN ATTRIBUTE INDICATING WHETHER THE NODE IS A LEAF NODE (`TRUE`) OR AN INTERNAL NODE (`FALSE`).
                    - `CHILDREN`: AN EMPTY LIST THAT WILL STORE THE CHILD NODES OF THE CURRENT NODE.
                    - `SUBCLUSTER_CENTERS`: AN EMPTY LIST TO HOLD THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE.
                    - `N_SAMPLES`: A COUNT OF THE NUMBER OF DATA POINTS IN THE SUBCLUSTERS ASSOCIATED WITH THE NODE, INITIALLY SET TO 0.
                2. INITIALIZATION:
                    - THE `__INIT__` FUNCTION IS CALLED WHEN A NEW INSTANCE OF THE `BIRCH_NODE` CLASS IS CREATED.
                    - IT ASSIGNS INITIAL VALUES TO THE ATTRIBUTES OF THE NODE.
            THE `__INIT__` FUNCTION ENSURES THAT EACH `BIRCH_NODE` OBJECT STARTS WITH THE APPROPRIATE ATTRIBUTES. IT SETS THE NODE'S TYPE (LEAF OR INTERNAL), INITIALIZES AN EMPTY LIST FOR CHILD NODES, AN EMPTY LIST FOR SUBCLUSTER CENTERS, AND SETS THE INITIAL COUNT OF DATA POINTS TO ZERO. THESE ATTRIBUTES ARE CRUCIAL FOR MAINTAINING THE STRUCTURE AND INFORMATION WITHIN THE BIRCH TREE AS IT PERFORMS HIERARCHICAL CLUSTERING ON LARGE DATASETS."""
            self.IS_LEAF = IS_LEAF  # BOOLEAN ATTRIBUTE INDICATING WHETHER THE NODE IS A LEAF NODE (`TRUE`) OR AN INTERNAL NODE (`FALSE`)
            self.CHILDREN = []  # EMPTY LIST THAT WILL STORE THE CHILD NODES OF THE CURRENT NODE
            # EMPTY LIST TO HOLD THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE
            self.SUBCLUSTER_CENTERS = []
            self.N_SAMPLES = 0  # COUNT OF THE NUMBER OF DATA POINTS IN THE SUBCLUSTERS ASSOCIATED WITH THE NODE, INITIALLY SET TO 0
            # THE PROTOTYPE (CENTER) OF THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE, INITIALLY SET TO NONE
            self.PROTOTYPE = None

        # THE `ADD_CHILD` FUNCTION IS A METHOD WITHIN THE `BIRCH_NODE` CLASS. IT IS RESPONSIBLE FOR ADDING A CHILD NODE TO THE CURRENT NODE IN THE BIRCH TREE STRUCTURE. THIS FUNCTION PLAYS A CRUCIAL ROLE IN CONSTRUCTING THE HIERARCHICAL RELATIONSHIPS BETWEEN NODES, WHICH ARE ESSENTIAL FOR ORGANIZING AND CLUSTERING THE DATA.
        #     1. THE FUNCTION TAKES TWO PARAMETERS: `SELF` AND `CHILD`. THE `SELF` PARAMETER REPRESENTS THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS, WHILE THE `CHILD` PARAMETER REPRESENTS THE CHILD NODE THAT NEEDS TO BE ADDED TO THE CURRENT NODE.
        #     2. WITHIN THE FUNCTION, THE CHILD NODE `CHILD` IS APPENDED TO THE `CHILDREN` LIST OF THE CURRENT NODE. THE `CHILDREN` LIST IS AN ATTRIBUTE OF THE `BIRCH_NODE` CLASS, AND IT SERVES AS A CONTAINER TO STORE ALL THE CHILD NODES ASSOCIATED WITH THE CURRENT NODE. BY ADDING THE CHILD NODE TO THIS LIST, THE HIERARCHICAL RELATIONSHIP IS ESTABLISHED, WITH THE CURRENT NODE AS THE PARENT AND THE ADDED NODE AS ITS CHILD.
        #     3. AFTER ADDING THE CHILD NODE, THE FUNCTION COMPLETES EXECUTION. IT DOES NOT RETURN ANY VALUE SINCE ITS PURPOSE IS TO MODIFY THE STATE OF THE CURRENT NODE BY ADDING A CHILD NODE.
        # THE `ADD_CHILD` FUNCTION IS CRUCIAL FOR BUILDING THE HIERARCHICAL STRUCTURE OF THE BIRCH TREE. BY ADDING CHILD NODES TO THE CURRENT NODE, THE TREE CAN REPRESENT CLUSTER AND SUBCLUSTER RELATIONSHIPS. THIS FUNCTION ALLOWS THE ALGORITHM TO ITERATIVELY CONSTRUCT THE TREE BY PROGRESSIVELY ADDING NODES AND ORGANIZING THEM IN A PARENT-CHILD HIERARCHY. ULTIMATELY, THIS HIERARCHY HELPS IN ORGANIZING AND CLUSTERING THE INPUT DATA, FORMING THE BASIS FOR THE BIRCH CLUSTERING ALGORITHM'S FUNCTIONALITY.
        # IN SUMMARY, THE `ADD_CHILD` FUNCTION ADDS A CHILD NODE TO THE CURRENT NODE IN THE BIRCH TREE STRUCTURE BY APPENDING IT TO THE `CHILDREN` LIST. THIS OPERATION ESTABLISHES THE HIERARCHICAL RELATIONSHIP BETWEEN NODES, ALLOWING FOR THE ORGANIZATION AND CLUSTERING OF THE INPUT DATA.
        def ADD_CHILD(self, CHILD):
            """THE `ADD_CHILD` FUNCTION IS A METHOD WITHIN THE `BIRCH_NODE` CLASS OF THE BIRCH CLUSTERING ALGORITHM.
                - INPUT: IT TAKES TWO PARAMETERS: `SELF`, REPRESENTING THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS, AND `CHILD`, REPRESENTING THE CHILD NODE TO BE ADDED.
                - FUNCTIONALITY: THE FUNCTION APPENDS THE CHILD NODE TO THE `CHILDREN` LIST OF THE CURRENT NODE, ESTABLISHING A PARENT-CHILD RELATIONSHIP.
                - ROLE: BY ADDING CHILD NODES, THE FUNCTION HELPS BUILD THE HIERARCHICAL STRUCTURE OF THE BIRCH TREE, ENABLING THE ORGANIZATION AND CLUSTERING OF INPUT DATA.
                - IMPORTANCE: THE `ADD_CHILD` FUNCTION PLAYS A CRUCIAL ROLE IN FORMING THE CLUSTER AND SUBCLUSTER RELATIONSHIPS WITHIN THE BIRCH TREE, FACILITATING THE CONSTRUCTION AND EXPLORATION OF THE HIERARCHICAL CLUSTERING STRUCTURE.
                - STATE MODIFICATION: THE FUNCTION MODIFIES THE STATE OF THE CURRENT NODE BY ADDING THE CHILD NODE, BUT IT DOES NOT RETURN ANY VALUE.
                - INTEGRATION: THE FUNCTION IS CALLED WITHIN THE BIRCH CLUSTERING ALGORITHM DURING THE INSERTION AND SPLITTING PROCESSES TO MAINTAIN THE HIERARCHICAL ORGANIZATION OF NODES.
                - HIERARCHICAL REPRESENTATION: THE ADDITION OF CHILD NODES ALLOWS FOR THE REPRESENTATION OF HIERARCHICAL RELATIONSHIPS BETWEEN CLUSTERS AND SUBCLUSTERS, FORMING THE FOUNDATION FOR THE BIRCH ALGORITHM'S SCALABILITY AND CLUSTERING CAPABILITIES.
            IN SUMMARY, THE `ADD_CHILD` FUNCTION IS A KEY COMPONENT OF THE BIRCH CLUSTERING ALGORITHM, AS IT ADDS CHILD NODES TO THE CURRENT NODE, FACILITATING THE FORMATION OF HIERARCHICAL RELATIONSHIPS WITHIN THE BIRCH TREE STRUCTURE."""
            self.CHILDREN.append(
                CHILD)  # APPEND THE CHILD NODE TO THE `CHILDREN` LIST OF THE CURRENT NODE

        # THE `IS_FULL` FUNCTION IS A METHOD DEFINED WITHIN THE `BIRCH_NODE` CLASS. ITS PURPOSE IS TO CHECK WHETHER THE CURRENT NODE HAS REACHED ITS MAXIMUM CAPACITY IN TERMS OF THE NUMBER OF CHILDREN IT CAN HAVE. THIS FUNCTION IS USED TO DETERMINE IF A NODE IS FULL AND CANNOT ACCEPT ANY MORE CHILD NODES.
        #     1. THE FUNCTION TAKES ONLY ONE PARAMETER: `SELF`. THE `SELF` PARAMETER REFERS TO THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS.
        #     2. WITHIN THE FUNCTION, THE NUMBER OF CHILDREN OF THE CURRENT NODE IS OBTAINED BY EVALUATING THE LENGTH OF THE `CHILDREN` LIST, WHICH STORES ALL THE CHILD NODES ASSOCIATED WITH THE CURRENT NODE.
        #     3. THE FUNCTION THEN COMPARES THE NUMBER OF CHILDREN WITH THE PREDEFINED BRANCHING FACTOR (`BRANCHING_FACTOR`). THE BRANCHING FACTOR REPRESENTS THE MAXIMUM NUMBER OF CHILDREN THAT A NODE CAN HAVE.
        #     4. IF THE NUMBER OF CHILDREN IS EQUAL TO THE BRANCHING FACTOR, IT MEANS THAT THE NODE HAS REACHED ITS MAXIMUM CAPACITY AND CANNOT ACCEPT ANY MORE CHILD NODES. IN THIS CASE, THE FUNCTION RETURNS `TRUE` TO INDICATE THAT THE NODE IS FULL.
        #     5. IF THE NUMBER OF CHILDREN IS LESS THAN THE BRANCHING FACTOR, IT MEANS THAT THE NODE CAN STILL ACCEPT MORE CHILD NODES. IN THIS CASE, THE FUNCTION RETURNS `FALSE` TO INDICATE THAT THE NODE IS NOT FULL.
        # IN SUMMARY, THE `IS_FULL` FUNCTION IS RESPONSIBLE FOR CHECKING WHETHER THE CURRENT NODE HAS REACHED ITS MAXIMUM CAPACITY IN TERMS OF THE NUMBER OF CHILDREN IT CAN HAVE. IT COMPARES THE NUMBER OF CHILDREN WITH THE PREDEFINED BRANCHING FACTOR AND RETURNS `TRUE` IF THE NODE IS FULL OR `FALSE` IF IT IS NOT. THIS FUNCTION IS ESSENTIAL FOR MANAGING THE STRUCTURE OF THE BIRCH TREE BY DETERMINING WHEN A NODE CAN NO LONGER ACCEPT ADDITIONAL CHILD NODES.
        def IS_FULL(self):
            """THE `IS_FULL` FUNCTION IS A METHOD WITHIN THE `BIRCH_NODE` CLASS IN THE BIRCH CLUSTERING ALGORITHM. THE `IS_FULL` FUNCTION DETERMINES WHETHER THE CURRENT NODE HAS REACHED ITS MAXIMUM CAPACITY IN TERMS OF THE NUMBER OF CHILD NODES IT CAN HAVE.
                - INPUT: IT TAKES ONLY ONE PARAMETER, `SELF`, REPRESENTING THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS.
                - FUNCTIONALITY: THE FUNCTION COMPARES THE NUMBER OF CHILD NODES, OBTAINED FROM THE `CHILDREN` ATTRIBUTE, WITH THE PREDEFINED BRANCHING FACTOR (`BRANCHING_FACTOR`).
                - RETURN VALUE: IT RETURNS `TRUE` IF THE NUMBER OF CHILD NODES EQUALS THE BRANCHING FACTOR, INDICATING THAT THE NODE IS FULL. OTHERWISE, IT RETURNS `FALSE`.
                - ROLE: THE FUNCTION ASSISTS IN MANAGING THE GROWTH AND SPLITTING OF NODES WITHIN THE BIRCH TREE, ENSURING THAT NODES ADHERE TO THE SPECIFIED CONSTRAINTS ON CHILD NODES.
                - INTEGRATION: THE `IS_FULL` FUNCTION IS UTILIZED WITHIN THE BIRCH CLUSTERING ALGORITHM TO DETERMINE WHEN A NODE SHOULD BE SPLIT DUE TO REACHING ITS MAXIMUM CAPACITY.
                - STATE EVALUATION: BY EVALUATING THE STATE OF THE CURRENT NODE, THE FUNCTION AIDS IN CONTROLLING THE TREE'S STRUCTURE AND MAINTAINING BALANCED HIERARCHICAL CLUSTERING.
                - LIMIT ENFORCEMENT: THE FUNCTION HELPS ENFORCE THE BRANCHING FACTOR CONSTRAINT, WHICH IS ESSENTIAL FOR CONTROLLING THE COMPLEXITY AND SCALABILITY OF THE BIRCH ALGORITHM.
            IN SUMMARY, THE `IS_FULL` FUNCTION PLAYS A CRUCIAL ROLE IN THE BIRCH CLUSTERING ALGORITHM BY DETERMINING WHETHER A NODE HAS REACHED ITS MAXIMUM CAPACITY. THIS INFORMATION IS USED TO REGULATE THE GROWTH AND SPLITTING OF NODES, ENSURING THE HIERARCHICAL CLUSTERING STRUCTURE REMAINS BALANCED AND ADHERES TO THE SPECIFIED LIMITS."""
            return len(self.CHILDREN) == BRANCHING_FACTOR  # RETURN `TRUE` IF THE NUMBER OF CHILDREN EQUALS THE BRANCHING FACTOR, INDICATING THAT THE NODE IS FULL. OTHERWISE, RETURN `FALSE`.

        # THE `SHOULD_SPLIT` FUNCTION IS A METHOD DEFINED WITHIN THE `BIRCH_NODE` CLASS. ITS PURPOSE IS TO DETERMINE WHETHER THE CURRENT NODE SHOULD BE SPLIT BASED ON THE NUMBER OF SAMPLES IT CONTAINS. BY COMPARING THE NUMBER OF SAMPLES WITH A PREDEFINED THRESHOLD, THE FUNCTION DECIDES IF THE NODE SHOULD UNDERGO SPLITTING.
        #     1. THE FUNCTION TAKES ONLY ONE PARAMETER: `SELF`. THIS PARAMETER REFERS TO THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS FOR WHICH THE `SHOULD_SPLIT` METHOD IS CALLED.
        #     2. WITHIN THE FUNCTION, THE NUMBER OF SAMPLES ASSOCIATED WITH THE CURRENT NODE IS OBTAINED BY ACCESSING THE `N_SAMPLES` ATTRIBUTE. THE `N_SAMPLES` ATTRIBUTE REPRESENTS THE COUNT OF DATA POINTS IN THE SUBCLUSTERS ASSOCIATED WITH THE NODE.
        #     3. THE FUNCTION THEN COMPARES THE NUMBER OF SAMPLES WITH A PREDEFINED THRESHOLD (`THRESHOLD`).
        #     4. IF THE NUMBER OF SAMPLES EXCEEDS THE THRESHOLD, IT INDICATES THAT THE CURRENT NODE HAS A SUFFICIENT NUMBER OF SAMPLES TO CONSIDER SPLITTING. IN THIS CASE, THE FUNCTION RETURNS `TRUE`.
        #     5. IF THE NUMBER OF SAMPLES DOES NOT EXCEED THE THRESHOLD, IT MEANS THAT THE CURRENT NODE DOES NOT MEET THE SPLITTING CRITERIA. IN THIS CASE, THE FUNCTION RETURNS `FALSE`.
        #     6. THE FUNCTION COMPLETES EXECUTION AFTER RETURNING THE RESULT (`TRUE` OR `FALSE`).
        # IN SUMMARY, THE `SHOULD_SPLIT` FUNCTION DETERMINES WHETHER THE CURRENT NODE SHOULD UNDERGO SPLITTING BASED ON THE NUMBER OF SAMPLES IT CONTAINS. IT RETURNS `TRUE` IF THE NUMBER OF SAMPLES EXCEEDS THE THRESHOLD, INDICATING THAT THE NODE SHOULD BE SPLIT. OTHERWISE, IT RETURNS `FALSE`. THIS FUNCTION IS CRUCIAL IN THE BIRCH CLUSTERING ALGORITHM AS IT HELPS CONTROL THE SPLITTING PROCESS AND ENSURES THAT NODES ARE SPLIT ONLY WHEN THEY CONTAIN ENOUGH SAMPLES TO JUSTIFY FURTHER PARTITIONING.
        def SHOULD_SPLIT(self):
            """THE `SHOULD_SPLIT` FUNCTION IS A METHOD WITHIN THE `BIRCH_NODE` CLASS IN THE BIRCH CLUSTERING ALGORITHM. THE `SHOULD_SPLIT` FUNCTION DETERMINES WHETHER THE CURRENT NODE SHOULD BE SPLIT BASED ON THE NUMBER OF SAMPLES IT CONTAINS.
                - INPUT: IT TAKES ONLY ONE PARAMETER, `SELF`, REPRESENTING THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS.
                - FUNCTIONALITY: THE FUNCTION COMPARES THE NUMBER OF SAMPLES, OBTAINED FROM THE `N_SAMPLES` ATTRIBUTE, WITH A PREDEFINED THRESHOLD (`THRESHOLD`).
                - RETURN VALUE: IT RETURNS `TRUE` IF THE NUMBER OF SAMPLES EXCEEDS THE THRESHOLD, INDICATING THAT THE NODE SHOULD BE SPLIT. OTHERWISE, IT RETURNS `FALSE`.
                - ROLE: THE FUNCTION GUIDES THE DECISION-MAKING PROCESS IN THE BIRCH ALGORITHM, ENSURING THAT NODES ARE SPLIT ONLY WHEN THEY HAVE A SUFFICIENT NUMBER OF SAMPLES TO JUSTIFY FURTHER PARTITIONING.
                - INTEGRATION: THE `SHOULD_SPLIT` FUNCTION IS USED WITHIN THE BIRCH CLUSTERING ALGORITHM TO DETERMINE WHEN A NODE SHOULD UNDERGO SPLITTING BASED ON THE PREDEFINED THRESHOLD.
                - SPLITTING CONTROL: BY EVALUATING THE NUMBER OF SAMPLES IN A NODE, THE FUNCTION HELPS REGULATE THE GROWTH AND STRUCTURE OF THE BIRCH TREE, MAINTAINING THE BALANCE BETWEEN CLUSTERING GRANULARITY AND SCALABILITY.
                - THRESHOLD DETERMINATION: THE FUNCTION ALLOWS THE ALGORITHM TO ADJUST THE SPLITTING BEHAVIOR BY MODIFYING THE THRESHOLD VALUE ACCORDING TO THE DESIRED CLUSTERING CHARACTERISTICS.
            IN SUMMARY, THE `SHOULD_SPLIT` FUNCTION PLAYS A CRUCIAL ROLE IN THE BIRCH CLUSTERING ALGORITHM BY DETERMINING WHETHER A NODE SHOULD BE SPLIT BASED ON THE NUMBER OF SAMPLES IT CONTAINS. THIS DECISION INFLUENCES THE GROWTH AND PARTITIONING OF THE TREE STRUCTURE, ENSURING THAT NODES ARE SPLIT ONLY WHEN THEY MEET THE SPECIFIED CRITERIA."""
            return self.N_SAMPLES > THRESHOLD  # RETURN `TRUE` IF THE NUMBER OF SAMPLES EXCEEDS THE THRESHOLD. OTHERWISE, RETURN `FALSE`.

        # THE `UPDATE_SUBCLUSTER_CENTERS` FUNCTION IS A METHOD WITHIN THE `BIRCH_NODE` CLASS. ITS PURPOSE IS TO UPDATE THE SUBCLUSTER CENTRES ASSOCIATED WITH THE NODE BY INCORPORATING A NEW DATA POINT. THE FUNCTION ADDS THE NEW POINT TO THE `SUBCLUSTER_CENTERS` LIST AND INCREMENTS THE COUNT OF SAMPLES (`N_SAMPLES`) ASSOCIATED WITH THE NODE.
        #     1. THE FUNCTION TAKES TWO PARAMETERS: `SELF` AND `POINT`. THE `SELF` PARAMETER REPRESENTS THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS, AND `POINT` REPRESENTS THE NEW DATA POINT TO BE ADDED.
        #     2. WITHIN THE FUNCTION, THE NEW DATA POINT IS APPENDED TO THE `SUBCLUSTER_CENTERS` LIST OF THE CURRENT NODE. THE `SUBCLUSTER_CENTERS` LIST STORES THE REPRESENTATIVE POINTS WITHIN THE CLUSTER OR SUBCLUSTER ASSOCIATED WITH THE NODE.
        #     3. THE FUNCTION INCREMENTS THE COUNT OF SAMPLES (`N_SAMPLES`) ASSOCIATED WITH THE NODE BY 1. THIS COUNT KEEPS TRACK OF THE NUMBER OF DATA POINTS IN THE SUBCLUSTERS ASSOCIATED WITH THE NODE.
        #     4. THE FUNCTION COMPLETES EXECUTION AFTER UPDATING THE SUBCLUSTER CENTRES AND INCREMENTING THE SAMPLE COUNT.
        # IN SUMMARY, THE `UPDATE_SUBCLUSTER_CENTERS` FUNCTION IS RESPONSIBLE FOR INCORPORATING A NEW DATA POINT INTO THE SUBCLUSTER CENTRES ASSOCIATED WITH THE NODE. BY ADDING THE NEW POINT TO THE `SUBCLUSTER_CENTERS` LIST AND INCREMENTING THE SAMPLE COUNT, THE FUNCTION ENSURES THAT THE NODE ACCURATELY REPRESENTS THE UNDERLYING CLUSTER OR SUBCLUSTER. THIS FUNCTION IS ESSENTIAL FOR MAINTAINING THE INTEGRITY AND INFORMATION WITHIN THE BIRCH TREE AS IT PROCESSES AND ORGANIZES DATA POINTS DURING THE CLUSTERING ALGORITHM.
        def UPDATE_SUBCLUSTER_CENTERS(self, POINT):
            """THE `UPDATE_SUBCLUSTER_CENTERS` FUNCTION IS A METHOD WITHIN THE `BIRCH_NODE` CLASS IN THE BIRCH CLUSTERING ALGORITHM. THE `UPDATE_SUBCLUSTER_CENTERS` FUNCTION UPDATES THE SUBCLUSTER CENTRES ASSOCIATED WITH THE NODE BY INCORPORATING A NEW DATA POINT.
                - INPUT: IT TAKES TWO PARAMETERS: `SELF`, REPRESENTING THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS, AND `POINT`, REPRESENTING THE NEW DATA POINT TO BE ADDED.
                - FUNCTIONALITY: THE FUNCTION APPENDS THE NEW DATA POINT TO THE `SUBCLUSTER_CENTERS` LIST OF THE CURRENT NODE, WHICH STORES REPRESENTATIVE POINTS WITHIN THE CLUSTER OR SUBCLUSTER. IT ALSO INCREMENTS THE SAMPLE COUNT (`N_SAMPLES`) ASSOCIATED WITH THE NODE.
                - ROLE: THE FUNCTION ENSURES THAT THE NODE ACCURATELY REPRESENTS THE UNDERLYING CLUSTER OR SUBCLUSTER BY UPDATING ITS SUBCLUSTER CENTERS WITH THE NEW DATA POINT AND MAINTAINING AN ACCURATE COUNT OF THE SAMPLES.
                - INTEGRATION: THE `UPDATE_SUBCLUSTER_CENTERS` FUNCTION IS USED WITHIN THE BIRCH CLUSTERING ALGORITHM TO DYNAMICALLY UPDATE THE STRUCTURE OF NODES AS NEW DATA POINTS ARE INCORPORATED.
                - CLUSTER REPRESENTATION: BY ADDING THE NEW DATA POINT TO THE SUBCLUSTER CENTERS, THE FUNCTION CONTRIBUTES TO THE ACCURATE REPRESENTATION OF CLUSTERS WITHIN THE BIRCH TREE.
                - SAMPLE COUNT TRACKING: THE FUNCTION KEEPS TRACK OF THE NUMBER OF SAMPLES ASSOCIATED WITH THE NODE, ALLOWING FOR STATISTICAL ANALYSIS AND DECISION-MAKING DURING THE CLUSTERING PROCESS.
            IN SUMMARY, THE `UPDATE_SUBCLUSTER_CENTERS` FUNCTION PLAYS A CRUCIAL ROLE IN THE BIRCH CLUSTERING ALGORITHM BY UPDATING THE SUBCLUSTER CENTRES AND SAMPLE COUNT ASSOCIATED WITH A NODE. THIS ENSURES THAT THE NODE REFLECTS THE UNDERLYING CLUSTER OR SUBCLUSTER ACCURATELY AND FACILITATES THE DYNAMIC ORGANIZATION AND ANALYSIS OF DATA POINTS WITHIN THE BIRCH TREE."""
            self.SUBCLUSTER_CENTERS.append(
                POINT)  # APPEND THE NEW DATA POINT TO THE `SUBCLUSTER_CENTERS` LIST OF THE CURRENT NODE.
            # INCREMENT THE SAMPLE COUNT (`N_SAMPLES`) ASSOCIATED WITH THE NODE BY 1.
            self.N_SAMPLES += 1

        # THE `COMPUTE_PROTOTYPE` FUNCTION IS A METHOD WITHIN THE `BIRCH_NODE` CLASS. ITS PURPOSE IS TO CALCULATE THE PROTOTYPE OR CENTER OF THE SUBCLUSTER CENTERS ASSOCIATED WITH THE NODE. THE FUNCTION COMPUTES THE MEAN OF THE SUBCLUSTER CENTERS ALONG EACH DIMENSION TO OBTAIN THE PROTOTYPE.
        #     1. THE FUNCTION TAKES ONLY ONE PARAMETER: `SELF`. THIS PARAMETER REFERS TO THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS FOR WHICH THE `COMPUTE_PROTOTYPE` METHOD IS CALLED.
        #     2. WITHIN THE FUNCTION, THE `SUBCLUSTER_CENTERS` LIST, WHICH CONTAINS THE REPRESENTATIVE POINTS WITHIN THE CLUSTER OR SUBCLUSTER ASSOCIATED WITH THE NODE, IS CONVERTED INTO A NUMPY ARRAY. THE CONVERSION ALLOWS FOR EFFICIENT NUMERICAL OPERATIONS.
        #     3. THE FUNCTION COMPUTES THE MEAN OF THE SUBCLUSTER CENTERS ALONG EACH DIMENSION. THIS IS ACHIEVED BY APPLYING THE APPROPRIATE NUMPY FUNCTION (E.G., `NP.MEAN`) TO THE ARRAY ALONG THE DESIRED AXIS (TYPICALLY AXIS 0).
        #     4. THE RESULT OF THE MEAN CALCULATION REPRESENTS THE PROTOTYPE OR CENTER OF THE SUBCLUSTER CENTERS.
        #     5. THE FUNCTION ASSIGNS THE COMPUTED PROTOTYPE TO THE `PROTOTYPE` ATTRIBUTE OF THE CURRENT NODE. THIS ATTRIBUTE HOLDS THE CALCULATED CENTER.
        #     6. THE FUNCTION COMPLETES EXECUTION AFTER CALCULATING AND ASSIGNING THE PROTOTYPE.
        # IN SUMMARY, THE `COMPUTE_PROTOTYPE` FUNCTION IS RESPONSIBLE FOR CALCULATING THE PROTOTYPE OR CENTER OF THE SUBCLUSTER CENTERS ASSOCIATED WITH A NODE. BY COMPUTING THE MEAN OF THE SUBCLUSTER CENTERS ALONG EACH DIMENSION, THE FUNCTION PROVIDES A REPRESENTATIVE POINT THAT CHARACTERIZES THE CLUSTER OR SUBCLUSTER. THIS FUNCTION IS CRUCIAL FOR EXTRACTING MEANINGFUL INFORMATION FROM THE SUBCLUSTER CENTERS AND FACILITATING THE CLUSTERING ANALYSIS WITHIN THE BIRCH ALGORITHM.
        def COMPUTE_PROTOTYPE(self):
            """THE `COMPUTE_PROTOTYPE` FUNCTION IS A METHOD WITHIN THE `BIRCH_NODE` CLASS IN THE BIRCH CLUSTERING ALGORITHM. THE `COMPUTE_PROTOTYPE` FUNCTION CALCULATES THE PROTOTYPE OR CENTRE OF THE SUBCLUSTER CENTRES ASSOCIATED WITH THE NODE.
                - INPUT: IT TAKES ONLY ONE PARAMETER, `SELF`, REPRESENTING THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS.
                - FUNCTIONALITY: THE FUNCTION CONVERTS THE SUBCLUSTER CENTERS STORED IN THE `SUBCLUSTER_CENTERS` LIST INTO A NUMPY ARRAY. IT THEN COMPUTES THE MEAN OF THE SUBCLUSTER CENTERS ALONG EACH DIMENSION TO OBTAIN THE PROTOTYPE.
                - RETURN VALUE: THE COMPUTED PROTOTYPE REPRESENTS THE CENTER OF THE SUBCLUSTER CENTERS AND IS STORED IN THE `PROTOTYPE` ATTRIBUTE OF THE NODE.
                - ROLE: THE FUNCTION PLAYS A VITAL ROLE IN DETERMINING A REPRESENTATIVE POINT THAT CHARACTERIZES THE CLUSTER OR SUBCLUSTER ASSOCIATED WITH THE NODE.
                - INTEGRATION: THE `COMPUTE_PROTOTYPE` FUNCTION IS USED WITHIN THE BIRCH CLUSTERING ALGORITHM TO OBTAIN MEANINGFUL CENTERS FOR EACH NODE IN THE HIERARCHICAL TREE STRUCTURE.
                - CLUSTER CHARACTERIZATION: BY CALCULATING THE MEAN OF THE SUBCLUSTER CENTERS, THE FUNCTION PROVIDES A REPRESENTATIVE POINT THAT SUMMARIZES THE CHARACTERISTICS OF THE CLUSTER OR SUBCLUSTER.
                - PROTOTYPE ASSIGNMENT: THE COMPUTED PROTOTYPE IS STORED IN THE `PROTOTYPE` ATTRIBUTE, ALLOWING FOR EASY RETRIEVAL AND COMPARISON DURING THE CLUSTERING PROCESS.
            IN SUMMARY, THE `COMPUTE_PROTOTYPE` FUNCTION CALCULATES THE PROTOTYPE OR CENTRE OF THE SUBCLUSTER CENTRES ASSOCIATED WITH A NODE IN THE BIRCH CLUSTERING ALGORITHM. IT FACILITATES THE CHARACTERIZATION OF CLUSTERS BY PROVIDING REPRESENTATIVE POINTS, ENABLING FURTHER ANALYSIS AND DECISION-MAKING WITHIN THE HIERARCHICAL CLUSTERING STRUCTURE."""
            self.SUBCLUSTER_CENTERS = np.array(
                self.SUBCLUSTER_CENTERS)  # CONVERT THE `SUBCLUSTER_CENTERS` LIST INTO A NUMPY ARRAY.
            # CALCULATE THE MEAN OF THE SUBCLUSTER CENTERS ALONG EACH DIMENSION TO OBTAIN THE PROTOTYPE.
            self.PROTOTYPE = np.mean(self.SUBCLUSTER_CENTERS, axis=0)

    # THE `__INSERT__` FUNCTION IS A FUNDAMENTAL PART OF THE `BIRCH` ALGORITHM. ITS PURPOSE IS TO ITERATIVELY INSERT EACH DATA POINT INTO THE BIRCH TREE, UPDATING THE CLUSTER STRUCTURE AS NEW POINTS ARE ADDED. THE FUNCTION TAKES TWO PARAMETERS: `SELF` AND `POINT`, WHERE `SELF` REFERS TO THE CURRENT INSTANCE OF THE `BIRCH_NODE` CLASS, AND `POINT` REPRESENTS THE DATA POINT TO BE INSERTED.
    #     1. STARTING FROM THE ROOT NODE OF THE BIRCH TREE, THE FUNCTION RECURSIVELY TRAVERSES THE TREE TO FIND THE CLOSEST CHILD NODE TO THE CURRENT DATA POINT. IT CALCULATES THE DISTANCE BETWEEN THE DATA POINT AND EACH CHILD NODE'S PROTOTYPE (CENTER) AND SELECTS THE CHILD NODE WITH THE MINIMUM DISTANCE.
    #     2. IF THE SELECTED CHILD NODE IS AN INTERNAL NODE, THE FUNCTION RECURSIVELY CALLS ITSELF WITH THE CHILD NODE AS THE NEW CURRENT NODE. THIS PROCESS CONTINUES UNTIL A LEAF NODE IS REACHED.
    #     3. ONCE A LEAF NODE IS REACHED, THE FUNCTION UPDATES THE SUBCLUSTER CENTERS OF THE LEAF NODE BY ADDING THE CURRENT DATA POINT TO THE `SUBCLUSTER_CENTERS` LIST. IT ALSO INCREMENTS THE `N_SAMPLES` ATTRIBUTE OF THE LEAF NODE TO REFLECT THE ADDITION OF A NEW SAMPLE.
    #     4. AFTER UPDATING THE LEAF NODE, THE FUNCTION CHECKS IF THE LEAF NODE HAS EXCEEDED THE THRESHOLD FOR SPLITTING. THE THRESHOLD IS A PREDEFINED VALUE THAT DETERMINES THE MAXIMUM NUMBER OF SAMPLES A LEAF NODE CAN CONTAIN BEFORE IT NEEDS TO BE SPLIT.
    #     5. IF THE LEAF NODE EXCEEDS THE THRESHOLD, THE FUNCTION TRIGGERS THE SPLITTING PROCESS. IT CREATES A NEW INTERNAL NODE AND INITIALIZES IT AS A NON-LEAF NODE. THE LEAF NODE IS THEN SPLIT INTO MULTIPLE CHILD NODES, AND THE SUBCLUSTER CENTERS ASSOCIATED WITH THE LEAF NODE ARE REDISTRIBUTED TO THE APPROPRIATE CHILD NODES.
    #     6. IF A CHILD NODE CANNOT ACCOMMODATE A SUBCLUSTER CENTER, A NEW CHILD NODE IS CREATED TO STORE IT. THE PROTOTYPES (CENTERS) OF THE CHILD NODES ARE RECOMPUTED BASED ON THEIR UPDATED SUBCLUSTER CENTERS.
    #     7. IF THE LEAF NODE DOES NOT EXCEED THE THRESHOLD, THE FUNCTION COMPUTES THE PROTOTYPE OF THE UPDATED SUBCLUSTER CENTERS IN THE LEAF NODE USING THE `COMPUTE_PROTOTYPE` METHOD. THE PROTOTYPE REPRESENTS THE CENTER OF THE SUBCLUSTER CENTERS AND WILL BE USED FOR CLUSTERING ASSIGNMENTS.
    #     8. FINALLY, THE FUNCTION RETURNS THE LEAF NODE AS THE RESULT. THE LEAF NODE CONTAINS THE UPDATED CLUSTER STRUCTURE WITH THE ADDED DATA POINT AND ANY SPLIT CHILD NODES IF NECESSARY.
    # THE `__INSERT__` FUNCTION PLAYS A CRUCIAL ROLE IN THE BIRCH CLUSTERING ALGORITHM AS IT ALLOWS FOR THE INCREMENTAL INSERTION OF DATA POINTS INTO THE BIRCH TREE. BY DYNAMICALLY UPDATING THE CLUSTER STRUCTURE DURING THE INSERTION PROCESS, THE ALGORITHM CAN EFFICIENTLY HANDLE LARGE-SCALE DATASETS. THE FUNCTION ENSURES THAT DATA POINTS ARE ASSIGNED TO THE APPROPRIATE CLUSTERS BASED ON THEIR PROXIMITY TO THE SUBCLUSTER CENTERS, AND IT MANAGES THE SPLITTING OF LEAF NODES TO MAINTAIN THE BALANCE AND ACCURACY OF THE HIERARCHICAL CLUSTERING STRUCTURE.
    def __INSERT__(POINT, NODE):
        """THE `__INSERT__` FUNCTION IN THE `BIRCH` ALGORITHM IS RESPONSIBLE FOR INSERTING DATA POINTS INTO THE BIRCH TREE AND UPDATING THE CLUSTER STRUCTURE.
            1. TRAVERSAL: THE FUNCTION RECURSIVELY TRAVERSES THE TREE TO FIND THE CLOSEST CHILD NODE TO THE DATA POINT.
            2. LEAF NODE: ONCE A LEAF NODE IS REACHED, THE FUNCTION UPDATES ITS SUBCLUSTER CENTERS AND SAMPLE COUNT.
            3. SPLITTING: IF THE LEAF NODE EXCEEDS A PREDEFINED THRESHOLD, THE FUNCTION TRIGGERS THE SPLITTING PROCESS, CREATING NEW CHILD NODES.
            4. SUBCLUSTER REDISTRIBUTION: THE FUNCTION REDISTRIBUTES THE SUBCLUSTER CENTERS AMONG THE CHILD NODES DURING THE SPLITTING PROCESS.
            5. PROTOTYPE COMPUTATION: IF THE LEAF NODE DOESN'T EXCEED THE THRESHOLD, THE FUNCTION COMPUTES THE PROTOTYPE OF THE UPDATED SUBCLUSTER CENTERS.
            6. RESULT: FINALLY, THE FUNCTION RETURNS THE LEAF NODE WITH THE UPDATED CLUSTER STRUCTURE.
        THE `__INSERT__` FUNCTION ENABLES INCREMENTAL INSERTION OF DATA POINTS INTO THE BIRCH TREE, MAINTAINING THE BALANCE AND ACCURACY OF THE HIERARCHICAL CLUSTERING STRUCTURE. IT EFFICIENTLY HANDLES LARGE-SCALE DATASETS BY DYNAMICALLY UPDATING THE CLUSTER STRUCTURE DURING THE INSERTION PROCESS."""
        if NODE.IS_LEAF:  # IF THE CURRENT NODE IS A LEAF NODE, UPDATE ITS SUBCLUSTER CENTERS AND SAMPLE COUNT.
            # UPDATE THE SUBCLUSTER CENTERS OF THE LEAF NODE BY ADDING THE CURRENT DATA POINT.
            NODE.UPDATE_SUBCLUSTER_CENTERS(POINT)
            # IF THE LEAF NODE EXCEEDS THE THRESHOLD, TRIGGER THE SPLITTING PROCESS.
            if NODE.SHOULD_SPLIT():
                # SPLIT THE LEAF NODE INTO MULTIPLE CHILD NODES.
                __SPLIT_NODE__(NODE)
        else:  # IF THE CURRENT NODE IS AN INTERNAL NODE, RECURSIVELY CALL THE FUNCTION WITH THE CLOSEST CHILD NODE AS THE NEW CURRENT NODE.
            # INITIALIZE THE MINIMUM DISTANCE TO INFINITY.
            MIN_DISTANCE = float('inf')
            CLOSEST_CHILD = None  # INITIALIZE THE CLOSEST CHILD NODE TO NONE.
            for CHILD in NODE.CHILDREN:  # ITERATE THROUGH THE CHILDREN OF THE CURRENT NODE.
                # COMPUTE THE DISTANCE BETWEEN THE DATA POINT AND THE PROTOTYPE OF THE CHILD NODE.
                DISTANCE = np.linalg.norm(POINT - CHILD.PROTOTYPE)
                # IF THE DISTANCE IS LESS THAN THE MINIMUM DISTANCE, UPDATE THE MINIMUM DISTANCE AND CLOSEST CHILD NODE.
                if DISTANCE < MIN_DISTANCE:
                    MIN_DISTANCE = DISTANCE  # UPDATE THE MINIMUM DISTANCE.
                    CLOSEST_CHILD = CHILD  # UPDATE THE CLOSEST CHILD NODE.
            # RECURSIVELY CALL THE FUNCTION WITH THE CLOSEST CHILD NODE AS THE NEW CURRENT NODE.
            __INSERT__(POINT, CLOSEST_CHILD)

    # THE `SPLIT_NODE` FUNCTION IS A CONCEPT COMMONLY USED IN COMPUTER SCIENCE AND DATA STRUCTURES, PARTICULARLY IN TREE-BASED STRUCTURES SUCH AS BINARY SEARCH TREES OR DECISION TREES. ALTHOUGH YOU DIDN'T SPECIFY THE SPECIFIC CONTEXT IN WHICH YOU ENCOUNTERED THE TERM "SPLIT_NODE," I WILL PROVIDE A GENERAL EXPLANATION OF ITS PURPOSE AND FUNCTIONALITY. THE `SPLIT_NODE` FUNCTION IS TYPICALLY USED TO SPLIT A NODE IN A TREE DATA STRUCTURE INTO MULTIPLE NODES. THIS OPERATION IS PERFORMED TO MAINTAIN THE STRUCTURE AND BALANCE OF THE TREE, OR TO FACILITATE CERTAIN ALGORITHMS OR OPERATIONS THAT REQUIRE DIVIDING A NODE.
    #     1. NODE: A NODE IS A FUNDAMENTAL ELEMENT IN A TREE DATA STRUCTURE THAT REPRESENTS A DATA ITEM OR AN INTERMEDIATE ENTITY. EACH NODE CONTAINS DATA AND REFERENCES TO ITS CHILD NODES (IF ANY).
    #     2. SPLITTING CRITERIA: BEFORE SPLITTING A NODE, THERE MUST BE A DEFINED SPLITTING CRITERION OR CONDITION THAT DETERMINES HOW THE NODE SHOULD BE DIVIDED. THIS CRITERION CAN VARY DEPENDING ON THE SPECIFIC TREE STRUCTURE OR THE REQUIREMENTS OF THE ALGORITHM USING THE `SPLIT_NODE` FUNCTION.
    #     3. SPLITTING PROCESS: THE `SPLIT_NODE` FUNCTION FOLLOWS A SPECIFIC PROCESS TO SPLIT A NODE:
    #         A. IDENTIFY THE NODE: THE FUNCTION FIRST IDENTIFIES THE NODE THAT NEEDS TO BE SPLIT. THIS CAN BE DETERMINED BASED ON THE CONTEXT OR SPECIFIC REQUIREMENTS.
    #         B. DEFINE SPLITTING CRITERIA: THE FUNCTION ESTABLISHES THE CRITERIA OR CONDITIONS FOR SPLITTING THE NODE. THIS COULD BE BASED ON THE NODE'S DATA VALUES, ITS POSITION IN THE TREE, OR ANY OTHER RELEVANT FACTORS.
    #         C. CREATE NEW NODES: ONCE THE SPLITTING CRITERIA ARE DEFINED, THE FUNCTION CREATES NEW NODES TO ACCOMMODATE THE SPLIT. THE NUMBER OF NEW NODES CREATED DEPENDS ON THE SPLITTING CRITERIA AND THE DESIRED OUTCOME.
    #         D. MOVE DATA: THE FUNCTION REDISTRIBUTES OR MOVES THE DATA FROM THE ORIGINAL NODE TO THE NEWLY CREATED NODES. THE SPECIFIC ALGORITHM FOR MOVING THE DATA DEPENDS ON THE SPLITTING CRITERIA AND THE STRUCTURE OF THE TREE.
    #         E. UPDATE REFERENCES: AFTER MOVING THE DATA, THE FUNCTION UPDATES THE REFERENCES OR POINTERS BETWEEN NODES TO MAINTAIN THE INTEGRITY AND CONNECTIVITY OF THE TREE. THIS ENSURES THAT THE TREE REMAINS CONSISTENT AND FUNCTIONAL AFTER THE SPLIT.
    #         F. ADDITIONAL OPERATIONS: DEPENDING ON THE CONTEXT, THERE MAY BE ADDITIONAL OPERATIONS PERFORMED DURING OR AFTER THE SPLIT. THESE COULD INCLUDE REBALANCING THE TREE, UPDATING METADATA OR STATISTICS, OR PROPAGATING CHANGES UP THE TREE HIERARCHY.
    #     4. RESULT: THE `SPLIT_NODE` FUNCTION TYPICALLY RETURNS THE RESULT OF THE SPLITTING OPERATION, WHICH COULD BE A NEW SET OF NODES OR ANY OTHER RELEVANT INFORMATION INDICATING THE OUTCOME OF THE SPLIT.
    # IT'S IMPORTANT TO NOTE THAT THE SPECIFIC IMPLEMENTATION OF THE `SPLIT_NODE` FUNCTION CAN VARY BASED ON THE TREE STRUCTURE OR ALGORITHM BEING USED. THE STEPS OUTLINED ABOVE PROVIDE A GENERAL UNDERSTANDING OF THE PURPOSE AND PROCESS INVOLVED IN SPLITTING A NODE IN A TREE-BASED DATA STRUCTURE.
    def __SPLIT_NODE__(NODE):
        """THE `SPLIT_NODE` FUNCTION IS USED IN TREE-BASED DATA STRUCTURES TO DIVIDE A NODE INTO MULTIPLE NODES BASED ON SPECIFIC CRITERIA. THE `SPLIT_NODE` FUNCTION IS USED TO SPLIT A NODE IN A TREE DATA STRUCTURE.
            - NODE: A NODE REPRESENTS A DATA ITEM OR AN INTERMEDIATE ENTITY IN THE TREE.
            - SPLITTING CRITERIA: THERE IS A DEFINED CRITERION FOR SPLITTING THE NODE.
            - SPLITTING PROCESS: THE FUNCTION FOLLOWS A PROCESS TO SPLIT THE NODE:
                - IDENTIFY THE NODE TO BE SPLIT.
                - DEFINE THE SPLITTING CRITERIA.
                - CREATE NEW NODES TO ACCOMMODATE THE SPLIT.
                - MOVE THE DATA FROM THE ORIGINAL NODE TO THE NEW NODES.
                - UPDATE THE REFERENCES OR POINTERS BETWEEN NODES.
                - PERFORM ADDITIONAL OPERATIONS IF NECESSARY.
            - RESULT: THE FUNCTION RETURNS THE OUTCOME OF THE SPLIT, SUCH AS NEW NODES OR RELEVANT INFORMATION.
        PLEASE NOTE THAT THE SPECIFIC IMPLEMENTATION OF THE `SPLIT_NODE` FUNCTION CAN VARY DEPENDING ON THE TREE STRUCTURE OR ALGORITHM BEING USED."""
        CHILD_THRESHOLD = THRESHOLD / \
            2  # THE CHILD THRESHOLD IS HALF OF THE OVERALL THRESHOLD.
        # THE SUBCLUSTER CENTERS ARE THE SUBCLUSTER CENTERS OF THE NODE.
        SUBCLUSTER_CENTERS = NODE.SUBCLUSTER_CENTERS
        # THE SUBCLUSTER CENTERS OF THE NODE ARE RESET.
        NODE.SUBCLUSTER_CENTERS = []
        NODE.N_SAMPLES = 0  # THE NUMBER OF SAMPLES IN THE NODE IS RESET.
        # FOR EACH SUBCLUSTER CENTER IN THE NODE'S SUBCLUSTER CENTERS:
        for SUBCLUSTER_CENTER in SUBCLUSTER_CENTERS:
            # THE MINIMUM DISTANCE IS INITIALIZED TO INFINITY.
            MIN_DISTANCE = float('inf')
            CLOSEST_CHILD = None  # THE CLOSEST CHILD IS INITIALIZED TO NONE.
            for CHILD in NODE.CHILDREN:  # FOR EACH CHILD IN THE NODE'S CHILDREN:
                # THE DISTANCE BETWEEN THE SUBCLUSTER CENTER AND THE CHILD'S PROTOTYPE IS COMPUTED.
                DISTANCE = np.linalg.norm(SUBCLUSTER_CENTER - CHILD.PROTOTYPE)
                if DISTANCE < MIN_DISTANCE:  # IF THE DISTANCE IS LESS THAN THE MINIMUM DISTANCE:
                    # THE MINIMUM DISTANCE IS SET TO THE DISTANCE.
                    MIN_DISTANCE = DISTANCE
                    # THE CLOSEST CHILD IS SET TO THE CHILD.
                    CLOSEST_CHILD = CHILD
            # IF THE CLOSEST CHILD IS NONE OR THE MINIMUM DISTANCE IS GREATER THAN THE CHILD THRESHOLD:
            if CLOSEST_CHILD is None or MIN_DISTANCE > CHILD_THRESHOLD:
                NEW_NODE = BIRCH_NODE()  # A NEW NODE IS CREATED.
                # THE NEW NODE'S SUBCLUSTER CENTERS ARE UPDATED.
                NEW_NODE.UPDATE_SUBCLUSTER_CENTERS(SUBCLUSTER_CENTER)
                # THE NEW NODE IS ADDED AS A CHILD OF THE NODE.
                NODE.ADD_CHILD(NEW_NODE)
            else:  # IF THE CLOSEST CHILD IS NOT NONE AND THE MINIMUM DISTANCE IS NOT GREATER THAN THE CHILD THRESHOLD:
                # THE CLOSEST CHILD'S SUBCLUSTER CENTERS ARE UPDATED.
                CLOSEST_CHILD.UPDATE_SUBCLUSTER_CENTERS(SUBCLUSTER_CENTER)
        for CHILD in NODE.CHILDREN:  # FOR EACH CHILD IN THE NODE'S CHILDREN:
            CHILD.COMPUTE_PROTOTYPE()  # THE CHILD'S PROTOTYPE IS COMPUTED.
        if NODE.IS_FULL():  # IF THE NODE IS FULL:
            NEW_NODE = BIRCH_NODE(False)  # A NEW NODE IS CREATED.
            # THE NEW NODE'S CHILDREN ARE SET TO THE NODE'S CHILDREN.
            NEW_NODE.CHILDREN = NODE.CHILDREN
            # THE NODE'S CHILDREN ARE SET TO THE NEW NODE.
            NODE.CHILDREN = [NEW_NODE]

    # THE `FIND_CLOSEST_CLUSTER` FUNCTION IS USED IN CLUSTERING ALGORITHMS TO DETERMINE THE NEAREST CLUSTER TO A GIVEN DATA POINT. THE `FIND_CLOSEST_CLUSTER` FUNCTION IS USED TO FIND THE CLOSEST CLUSTER TO A GIVEN DATA POINT IN A CLUSTERING ALGORITHM.
    #     - CLUSTERING ALGORITHM: CLUSTERING ALGORITHMS GROUP SIMILAR DATA POINTS INTO CLUSTERS BASED ON CERTAIN CRITERIA.
    #     - DATA POINT: A DATA POINT REPRESENTS AN INDIVIDUAL DATA INSTANCE OR OBSERVATION.
    #     - CLUSTER: A CLUSTER IS A GROUP OF DATA POINTS THAT ARE SIMILAR TO EACH OTHER AND DISSIMILAR TO DATA POINTS IN OTHER CLUSTERS.
    #     - DISTANCE METRIC: THE FUNCTION USES A DISTANCE METRIC TO MEASURE THE SIMILARITY OR DISSIMILARITY BETWEEN DATA POINTS.
    #     - NEAREST CLUSTER: THE FUNCTION DETERMINES THE NEAREST CLUSTER TO A GIVEN DATA POINT BASED ON THE DISTANCE METRIC.
    #     - PROCESS:
    #         1. ITERATE THROUGH ALL EXISTING CLUSTERS.
    #         2. CALCULATE THE DISTANCE BETWEEN THE CURRENT DATA POINT AND THE CENTROID (CENTER) OF EACH CLUSTER.
    #         3. COMPARE THE DISTANCES AND KEEP TRACK OF THE CLUSTER WITH THE MINIMUM DISTANCE.
    #         4. REPEAT THE CALCULATION AND COMPARISON FOR ALL CLUSTERS.
    #         5. RETURN THE CLUSTER THAT HAS THE MINIMUM DISTANCE TO THE DATA POINT.
    #     - RESULT: THE FUNCTION RETURNS THE CLOSEST CLUSTER TO THE GIVEN DATA POINT BASED ON THE DISTANCE METRIC.
    # IT'S IMPORTANT TO NOTE THAT THE SPECIFIC IMPLEMENTATION OF THE `FIND_CLOSEST_CLUSTER` FUNCTION CAN VARY DEPENDING ON THE CLUSTERING ALGORITHM AND THE CHOSEN DISTANCE METRIC. SOME COMMON DISTANCE METRICS USED INCLUDE EUCLIDEAN DISTANCE, MANHATTAN DISTANCE, OR COSINE SIMILARITY. THE FUNCTION'S IMPLEMENTATION MAY ALSO CONSIDER OTHER FACTORS, SUCH AS CLUSTER WEIGHTS OR DENSITY, DEPENDING ON THE ALGORITHM'S REQUIREMENTS.
    def __FIND_CLOSEST_CLUSTER__(POINT, NODE):
        """THE `FIND_CLOSEST_CLUSTER` FUNCTION IS USED IN CLUSTERING ALGORITHMS TO DETERMINE THE CLOSEST CLUSTER TO A GIVEN DATA POINT. THE `FIND_CLOSEST_CLUSTER` FUNCTION IS USED TO IDENTIFY THE CLUSTER THAT IS CLOSEST TO A SPECIFIC DATA POINT.
            - CLUSTERING: CLUSTERING IS A PROCESS OF GROUPING SIMILAR DATA POINTS TOGETHER BASED ON THEIR CHARACTERISTICS OR PROXIMITY.
            - INPUT: THE FUNCTION TAKES AS INPUT THE DATA POINT FOR WHICH THE CLOSEST CLUSTER NEEDS TO BE FOUND.
            - CLUSTER: A CLUSTER REPRESENTS A GROUP OF DATA POINTS THAT ARE SIMILAR OR RELATED TO EACH OTHER.
            - DISTANCE MEASURE: THE FUNCTION TYPICALLY UTILIZES A DISTANCE MEASURE, SUCH AS EUCLIDEAN DISTANCE OR MANHATTAN DISTANCE, TO CALCULATE THE PROXIMITY BETWEEN THE DATA POINT AND THE CLUSTERS.
            - ITERATION: THE FUNCTION MAY ITERATE THROUGH EACH CLUSTER TO CALCULATE THE DISTANCE BETWEEN THE DATA POINT AND EACH CLUSTER CENTROID OR REPRESENTATIVE POINT.
            - CLOSEST CLUSTER: THE FUNCTION IDENTIFIES THE CLUSTER WITH THE MINIMUM DISTANCE TO THE DATA POINT, INDICATING THE CLOSEST CLUSTER.
            - RESULT: THE FUNCTION RETURNS THE CLOSEST CLUSTER OR RELEVANT INFORMATION, SUCH AS THE CLUSTER'S IDENTIFIER OR CENTROID COORDINATES.
        PLEASE NOTE THAT THE SPECIFIC IMPLEMENTATION OF THE `FIND_CLOSEST_CLUSTER` FUNCTION CAN VARY DEPENDING ON THE CLUSTERING ALGORITHM AND DISTANCE METRIC BEING USED. DIFFERENT ALGORITHMS MAY EMPLOY DIFFERENT STRATEGIES TO CALCULATE DISTANCES OR DETERMINE CLUSTER PROXIMITY."""
        if NODE.IS_LEAF:  # IF THE NODE IS A LEAF NODE:
            # THE MINIMUM DISTANCE IS INITIALIZED TO INFINITY.
            MIN_DISTANCE = float('inf')
            # THE CLOSEST CLUSTER IS INITIALIZED TO NONE.
            CLOSEST_CLUSTER = None
            # FOR EACH SUBCLUSTER CENTER IN THE NODE'S SUBCLUSTER CENTERS:
            for SUBCLUSTER_CENTER in NODE.SUBCLUSTER_CENTERS:
                # THE DISTANCE BETWEEN THE DATA POINT AND THE SUBCLUSTER CENTER IS CALCULATED.
                DISTANCE = np.linalg.norm(POINT - SUBCLUSTER_CENTER)
                if DISTANCE < MIN_DISTANCE:  # IF THE DISTANCE IS LESS THAN THE MINIMUM DISTANCE:
                    MIN_DISTANCE = DISTANCE  # THE MINIMUM DISTANCE IS UPDATED.
                    # THE CLOSEST CLUSTER IS UPDATED.
                    CLOSEST_CLUSTER = SUBCLUSTER_CENTER
            return CLOSEST_CLUSTER  # THE CLOSEST CLUSTER IS RETURNED.
        # THE MINIMUM DISTANCE IS INITIALIZED TO INFINITY.
        MIN_DISTANCE = float('inf')
        CLOSEST_CHILD = None  # THE CLOSEST CHILD IS INITIALIZED TO NONE.
        for CHILD in NODE.CHILDREN:  # FOR EACH CHILD IN THE NODE'S CHILDREN:
            # THE DISTANCE BETWEEN THE DATA POINT AND THE CHILD'S PROTOTYPE IS CALCULATED.
            DISTANCE = np.linalg.norm(POINT - CHILD.PROTOTYPE)
            if DISTANCE < MIN_DISTANCE:  # IF THE DISTANCE IS LESS THAN THE MINIMUM DISTANCE:
                MIN_DISTANCE = DISTANCE  # THE MINIMUM DISTANCE IS UPDATED.
                CLOSEST_CHILD = CHILD  # THE CLOSEST CHILD IS UPDATED.
        # THE FUNCTION IS RECURSIVELY CALLED ON THE CLOSEST CHILD.
        return __FIND_CLOSEST_CLUSTER__(POINT, CLOSEST_CHILD)

    ROOT = BIRCH_NODE()  # A ROOT NODE IS CREATED.
    for POINT in X:  # FOR EACH DATA POINT:
        # THE DATA POINT IS INSERTED INTO THE ROOT NODE.
        __INSERT__(POINT, ROOT)
    LABELS = np.zeros(len(X))  # THE LABELS ARE INITIALIZED TO ZERO.
    for i, POINT in enumerate(X):  # FOR EACH DATA POINT:
        # THE CLOSEST CLUSTER TO THE DATA POINT IS FOUND.
        LABELS[i] = __FIND_CLOSEST_CLUSTER__(POINT, ROOT)
    return LABELS  # THE LABELS ARE RETURNED.
