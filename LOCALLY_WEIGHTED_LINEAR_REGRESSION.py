import numpy as np

# LOCALLY_WEIGHTED_LINEAR_REGRESSION: CLASS THAT IMPLEMENTS THE LOCALLY WEIGHTED LINEAR REGRESSION MODEL
class LOCALLY_WEIGHTED_LINEAR_REGRESSION:
    # INITIALIZES THE LOCALLY WEIGHTED LINEAR REGRESSION MODEL
    def __init__(self, TAU=0.001):
        self.TAU = TAU # TAU: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE TAU OF THE LOCALLY WEIGHTED LINEAR REGRESSION MODEL.

    # WEIGHT_MATRIX(): [PRIVATE FUNCTION] RETURNS THE WEIGHT MATRIX OF THE LOCALLY WEIGHTED LINEAR REGRESSION MODEL. IT'S A DIAGONAL MATRIX.
    def __WEIGHT_MATRIX__(self, POINT, X):
        NUMBER_OF_TRAINING_EXAMPLES = X.shape[0] # NUMBER OF TRAINING EXAMPLES
        WEIGHT_MATRIX = np.mat(np.eye(NUMBER_OF_TRAINING_EXAMPLES)) # INITIALIZES THE WEIGHT MATRIX AS AN IDENTITY MATRIX
        for EXAMPLE_INDEX in range(NUMBER_OF_TRAINING_EXAMPLES): # CALCULATES THE WEIGHTS FOR EACH TRAINING EXAMPLE
            DENOMINATOR = (-2 * self.TAU * self.TAU) # CALCULATES THE DENOMINATOR OF THE GAUSSIAN KERNEL
            WEIGHT_MATRIX[EXAMPLE_INDEX, EXAMPLE_INDEX] = np.exp(np.dot((X[EXAMPLE_INDEX] - POINT), (X[EXAMPLE_INDEX] - POINT).T) / DENOMINATOR) # CALCULATES THE WEIGHT FOR THE TRAINING EXAMPLE
        return WEIGHT_MATRIX # RETURNS THE WEIGHT MATRIX

    # PREDICT(): RETURNS THE PREDICTIONS OF THE LOCALLY WEIGHTED LINEAR REGRESSION MODEL
    def PREDICT(self, X, Y, POINT):
        NUMBER_OF_TRAINING_EXAMPLES = X.shape[0] # NUMBER OF TRAINING EXAMPLES
        X_ = np.append(X, np.ones(NUMBER_OF_TRAINING_EXAMPLES).reshape(NUMBER_OF_TRAINING_EXAMPLES, 1), axis=1) # ADDS A COLUMN OF ONES TO THE X MATRIX
        POINT_ = np.array([POINT, 1]) # ADDS A ONE TO THE POINT
        WEIGHT_MATRIX = self.__WEIGHT_MATRIX__(POINT_, X_, self.TAU) # CALCULATES THE WEIGHT MATRIX
        THETA = np.linalg.pinv(X_.T*(WEIGHT_MATRIX * X_))*(X_.T*(WEIGHT_MATRIX * Y)) # CALCULATES THE PARAMETERS, THETA, OF THE LOCALLY WEIGHTED LINEAR REGRESSION MODEL: THETA IS A VECTOR OF WEIGHTS, THETA_0 IS THE BIAS (SCALAR).
        PREDICTION = np.dot(POINT_, THETA) # CALCULATES THE PREDICTION OF THE LOCALLY WEIGHTED LINEAR REGRESSION MODEL
        return THETA, PREDICTION # RETURNS THE PARAMETERS AND THE PREDICTION OF THE LOCALLY WEIGHTED LINEAR REGRESSION MODEL