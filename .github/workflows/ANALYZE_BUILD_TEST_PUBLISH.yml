name: 'ANALYZE_BUILD_TEST_PUBLISH'
on: [ push, pull_request ]
jobs:
  ANALYZE_BUILD_TEST_PUBLISH:
    name: 'ANALYZE_BUILD_TEST_PUBLISH'
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write
      packages: write
    strategy:
      matrix: 
        LANGUAGE: [ "python" ]
      fail-fast: true
    steps:
    - name: 'CHECKOUT'
      uses: actions/checkout@v3
    - name: 'EXECUTE DEPENDENCY REVIEW'
      uses: actions/dependency-review-action@v2
      if: github.event.pull_request.base.ref == 'develop'
    - name: 'SET-UP PYTHON'
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: 'SET-UP DEPENDENCIES'
      run: |
        python -m pip install --upgrade pip
        pip install pylint build
        if [ -f REQUIREMENTS.txt ]; then pip install -r REQUIREMENTS.txt; else pip install numpy autograd; fi
    - name: 'INITIALIZE'
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.LANGUAGE }}
        config-file: ./.github/workflows/codeql-config.yml
    - name: 'BUILD (FOR TEST PURPOSES)'
      uses: github/codeql-action/autobuild@v2
    - name: 'ANALYZE (QUALITY & SECURITY)'
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
    - name: 'ANALYZE (FORMATTING & SYNTAX)'
      run: | 
          pylint --disable=invalid-name,missing-docstring,missing-function-docstring,missing-class-docstring,missing-module-docstring,missing-final-newline,line-too-long,too-many-nested-blocks,too-many-instance-attributes,too-many-arguments,trailing-whitespace,unnecessary-pass,too-many-locals,too-few-public-methods,similarities,too-many-statements --ignore-paths=NEURAL_NETWORKS $(git ls-files '*.py')
    # - name: 'BUILD'
    #   run: python -m build
    - name: 'PUBLISH'
      if: github.ref == 'refs/heads/nightly'
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin
        docker build . --file Dockerfile --tag "${{ github.repository }}" --label "runnumber=${GITHUB_RUN_ID}"
        IMAGE_ID="ghcr.io/${{ github.repository }}"
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        docker tag "${{ github.repository }}" $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION