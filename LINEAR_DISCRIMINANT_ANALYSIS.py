import numpy as np

# LINEAR_DISCRIMINANT_ANALYSIS: IMPLEMENTS LINEAR DISCRIMINANT ANALYSIS MODEL. LINEAR DISCRIMINANT ANALYSIS (LDA) IS A STATISTICAL METHOD USED TO FIND A LINEAR COMBINATION OF FEATURES THAT CHARACTERIZES OR SEPARATES TWO OR MORE CLASSES OF OBJECTS OR EVENTS. IT IS A DISCRIMINANT APPROACH THAT ATTEMPTS TO MODEL DIFFERENCES AMONG SAMPLES ASSIGNED TO CERTAIN GROUPS. THE AIM OF THE METHOD IS TO MAXIMIZE THE RATIO OF THE BETWEEN-GROUP VARIANCE AND THE WITHIN-GROUP VARIANCE.
class LINEAR_DISCRIMINANT_ANALYSIS:
    # INITIALIZES THE LINEAR DISCRIMINANT ANALYSIS MODEL
    def __init__(self):
        # CLASSES: IT'S THE ARRAY THAT CONTAINS THE CLASSES OF THE DATASET.
        self.CLASSES = None
        # PRIORS: IT'S THE DICTIONARY THAT CONTAINS THE PRIORS OF THE CLASSES.
        self.PRIORS = None
        # MEANS: IT'S THE DICTIONARY THAT CONTAINS THE MEANS OF THE CLASSES.
        self.MEANS = None
        # COVS: IT'S THE DICTIONARY THAT CONTAINS THE COVARIANCES OF THE CLASSES.
        self.COVS = None

    # FIT(): METHOD THAT TRAINS THE LINEAR DISCRIMINANT ANALYSIS MODEL
    def FIT(self, X, Y):
        # CLASSES: IT'S THE ARRAY THAT CONTAINS THE CLASSES OF THE DATASET.
        self.CLASSES = np.unique(Y)
        # PRIORS: IT'S THE DICTIONARY THAT CONTAINS THE PRIORS OF THE CLASSES.
        self.PRIORS = {}
        # MEANS: IT'S THE DICTIONARY THAT CONTAINS THE MEANS OF THE CLASSES.
        self.MEANS = {}
        # COVS: IT'S THE DICTIONARY THAT CONTAINS THE COVARIANCES OF THE CLASSES.
        self.COVS = np.cov(X, rowvar=False)
        # FOR LOOP THAT ITERATES THROUGH THE CLASSES
        for C in self.CLASSES:
            # X_C: IT'S THE ARRAY THAT CONTAINS THE DATA OF THE CLASS C.
            X_C = X[Y == C]
            # PRIOR: IT'S THE PRIOR OF THE CLASS C.
            self.PRIORS[C] = X_C.shape[0] / X.shape[0]
            # MEAN: IT'S THE MEAN OF THE CLASS C.
            self.MEANS[C] = np.mean(X_C, axis=0)

    # PREDICT(): METHOD THAT USES THE LINEAR DISCRIMINANT ANALYSIS MODEL TO MAKE PREDICTIONS
    def PREDICT(self, X):
        # PREDS: IT'S THE ARRAY THAT WILL CONTAIN THE PREDICTIONS.
        PREDS = []
        # FOR LOOP THAT ITERATES THROUGH THE DATA
        for _X in X:
            # POSTS: IT'S THE ARRAY THAT WILL CONTAIN THE POSTERIORS.
            POSTS = []
            # FOR LOOP THAT ITERATES THROUGH THE CLASSES
            for C in self.CLASSES:
                # PRIOR: IT'S THE PRIOR OF THE CLASS C.
                PRIOR = np.log(self.PRIORS[C])
                # INV_COV: IT'S THE INVERSE OF THE COVARIANCE OF THE CLASS C.
                INV_COV = np.linalg.inv(self.COVS)
                # INV_COV_DET: IT'S THE DETERMINANT OF THE INVERSE OF THE COVARIANCE OF THE CLASS C.
                INV_COV_DET = np.linalg.det(INV_COV)
                # DIFF: IT'S THE DIFFERENCE BETWEEN THE DATA AND THE MEAN OF THE CLASS C.
                DIFF = _X - self.MEANS[C]
                # LIKELIHOOD: IT'S THE LIKELIHOOD OF THE CLASS C.
                LIKELIHOOD = 0.5 * np.log(INV_COV_DET) - \
                    0.5 * DIFF.T @ INV_COV @ DIFF
                # POST: IT'S THE POSTERIOR OF THE CLASS C.
                POST = PRIOR + LIKELIHOOD
                # APPEND THE POSTERIOR TO THE ARRAY OF POSTERIORS
                POSTS.append(POST)
            # PRED: IT'S THE PREDICTION OF THE DATA.
            PRED = self.CLASSES[np.argmax(POSTS)]
            # APPEND THE PREDICTION TO THE ARRAY OF PREDICTIONS
            PREDS.append(PRED)
        # RETURN THE ARRAY OF PREDICTIONS
        return np.array(PREDS)
