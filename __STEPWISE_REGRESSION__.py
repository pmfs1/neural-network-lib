import numpy as np

# STEPWISE_REGRESSION: IMPLEMENTS STEPWISE REGRESSION. STEPWISE REGRESSION IS A METHOD OF FITTING REGRESSION MODELS IN WHICH THE CHOICE OF PREDICTOR VARIABLES IS CARRIED OUT BY AN AUTOMATIC PROCEDURE. IN EACH STEP, A VARIABLE IS CONSIDERED FOR ADDITION TO OR SUBTRACTION FROM THE SET OF PREDICTORS BASED ON SOME PREDETERMINED CRITERION. USUALLY, THE CRITERION IS THE MAXIMIZATION OF AN ESTIMATED MEASURE OF PREDICTIVE VALIDITY. THE PROCEDURE IS CONTINUED UNTIL NO FURTHER IMPROVEMENT IS OBTAINED. STEPWISE REGRESSION IS A GENERALIZATION OF FORWARD SELECTION AND BACKWARD ELIMINATION. IT IS ALSO KNOWN AS STEPWISE VARIABLE SELECTION.
class STEPWISE_REGRESSION:
    # INITIALIZES THE STEPWISE REGRESSION MODEL.
    def __init__(self, N_ITER=300):
        # N_ITER: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF ITERATIONS FOR THE OPTIMIZATION. THE DEFAULT VALUE IS 300.
        self.N_ITER = N_ITER
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE STEPWISE REGRESSION MODEL.
        self.WEIGHTS = None

    # FIT(): IT'S THE FUNCTION THAT TRAINS THE STEPWISE REGRESSION MODEL.
    def FIT(self, X, Y):
        # W: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE STEPWISE REGRESSION MODEL.
        W = np.random.randn(X.shape[1])
        # LOOP OVER THE NUMBER OF ITERATIONS.
        for _ in range(self.N_ITER):
            # LOOP OVER THE NUMBER OF FEATURES.
            for i in range(X.shape[1]):
                # PREDICT THE OUTPUT VALUE.
                Y_PRED = np.dot(X, W)
                # COMPUTE THE GRADIENT.
                GRAD = -2 * np.dot(X[:, i], (Y - Y_PRED))
                # UPDATE THE WEIGHT.
                W[i] = W[i] - 0.01 * GRAD
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE STEPWISE REGRESSION MODEL.
        self.WEIGHTS = W

    # TRANSFORM(): IT'S THE FUNCTION THAT USES THE STEPWISE REGRESSION MODEL IN ORDER TO PREDICT NEW OUTPUT VALUES.
    def TRANSFORM(self, X):
        # RETURN THE PREDICTED OUTPUT VALUE.
        return np.dot(X, self.WEIGHTS)