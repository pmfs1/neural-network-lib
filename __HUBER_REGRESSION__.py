import numpy as np

# HUBER_REGRESSION: IMPLEMENTATION OF HUBER REGRESSION. THE HUBER REGRESSOR IS DIFFERENT TO RIDGE BECAUSE IT APPLIES A LINEAR LOSS TO SAMPLES THAT ARE CLASSIFIED AS OUTLIERS. A SAMPLE IS CLASSIFIED AS AN INLIER IF THE ABSOLUTE ERROR OF THAT SAMPLE IS LESSER THAN A CERTAIN THRESHOLD.
class HUBER_REGRESSION:
    # INITIALIZES THE HUBER REGRESSION MODEL.
    def __init__(self, EPSILON=1.35, N_ITER=100):
        # EPSILON: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE THRESHOLD. THE DEFAULT VALUE IS 1.35.
        self.EPSILON = EPSILON
        # N_ITER: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF ITERATIONS. THE DEFAULT VALUE IS 1000.
        self.N_ITER = N_ITER
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE HUBER REGRESSION MODEL.
        self.WEIGHTS = None
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE HUBER REGRESSION MODEL.
        self.BIAS = 0

    # FIT(): IT'S THE FUNCTION THAT TRAINS THE HUBER REGRESSION MODEL.
    def FIT(self, X, Y):
        # X: IT'S THE MATRIX OF FEATURES.
        X = np.array(X)
        # Y: IT'S THE VECTOR OF TARGETS.
        Y = np.array(Y)
        # N: IT'S THE NUMBER OF SAMPLES.
        N = len(X)
        # D: IT'S THE NUMBER OF FEATURES.
        D = len(X[0])
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE HUBER REGRESSION MODEL.
        self.WEIGHTS = np.zeros(D)
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE HUBER REGRESSION MODEL.
        self.BIAS = 0
        # FOR EACH ITERATION.
        for _ in range(self.N_ITER):
            # FOR EACH SAMPLE.
            for i in range(N):
                # PREDICTION: IT'S THE PREDICTION OF THE HUBER REGRESSION MODEL.
                PREDICTION = np.dot(self.WEIGHTS, X[i]) + self.BIAS
                # ERROR: IT'S THE ERROR OF THE HUBER REGRESSION MODEL.
                ERROR = Y[i] - PREDICTION
                # IF THE ABSOLUTE ERROR IS LESSER THAN THE THRESHOLD.
                if abs(ERROR) <= self.EPSILON:
                    # TAU: IT'S THE PARAMETER THAT CORRESPONDS TO THE TAU OF THE HUBER REGRESSION MODEL.
                    TAU = ERROR
                # IF THE ABSOLUTE ERROR IS GREATER THAN THE THRESHOLD.
                else:
                    # TAU: IT'S THE PARAMETER THAT CORRESPONDS TO THE TAU OF THE HUBER REGRESSION MODEL.
                    TAU = self.EPSILON * np.sign(ERROR)
                # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE HUBER REGRESSION MODEL.
                self.WEIGHTS += TAU * X[i]
                # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE HUBER REGRESSION MODEL.
                self.BIAS += TAU
        
    # PREDICT(): IT'S THE FUNCTION THAT USES THE HUBER REGRESSION MODEL TO MAKE PREDICTIONS.
    def PREDICT(self, X):
        # N: IT'S THE NUMBER OF SAMPLES.
        N = len(X)
        # PREDICTIONS: IT'S THE VECTOR OF PREDICTIONS.
        PREDICTIONS = np.zeros(N)
        # FOR EACH SAMPLE.
        for SAMPLE in range(N):
            # PREDICTIONS: IT'S THE VECTOR OF PREDICTIONS.
            PREDICTIONS[SAMPLE] = np.dot(self.WEIGHTS, X[SAMPLE]) + self.BIAS
        # RETURNS THE VECTOR OF PREDICTIONS.
        return PREDICTIONS