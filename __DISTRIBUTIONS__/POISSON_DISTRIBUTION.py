import math

# POISSON_DISTRIBUTION: IMPLEMENTATION OF POISSON DISTRIBUTION. THE POISSON DISTRIBUTION, WHICH DESCRIBES A VERY LARGE NUMBER OF INDIVIDUALLY UNLIKELY EVENTS THAT HAPPEN IN A CERTAIN TIME INTERVAL. THE POISSON DISTRIBUTION, WHICH TAKES VALUE K WITH PROBABILITY LAMBDA^K * E^-LAMBDA / K!, WHERE LAMBDA IS THE EXPECTED VALUE OF THE DISTRIBUTION.
class POISSON_DISTRIBUTION:
    # PROBABILITY_MASS_FUNCTION [STATIC]: IN PROBABILITY AND STATISTICS, A PROBABILITY MASS FUNCTION IS A FUNCTION THAT GIVES THE PROBABILITY THAT A DISCRETE RANDOM VARIABLE IS EXACTLY EQUAL TO SOME VALUE. THE PROBABILITY MASS FUNCTION IS OFTEN THE PRIMARY MEANS OF DEFINING A DISCRETE PROBABILITY DISTRIBUTION, AND SUCH FUNCTIONS EXIST FOR EITHER DISCRETE RANDOM VARIABLES OR CONTINUOUS RANDOM VARIABLES WHOSE CUMULATIVE DISTRIBUTION FUNCTION IS DISCONTINUOUS. THE PROBABILITY MASS FUNCTION IS SOMETIMES ALSO CALLED THE PROBABILITY FUNCTION, OR THE PROBABILITY DISTRIBUTION FUNCTION.
    @staticmethod
    def PROBABILITY_MASS_FUNCTION(K: int, LAMBDA: float) -> float:
        assert LAMBDA >= 0, "LAMBDA MUST BE GREATER THAN OR EQUAL TO 0" # ASSERT LAMBDA IS GREATER THAN OR EQUAL TO 0
        if K < 0: # IF K IS LESS THAN 0
            return 0 # RETURN 0
        else: # ELSE K IS GREATER THAN OR EQUAL TO 0
            return (LAMBDA ** K) * (math.e ** (-LAMBDA)) / math.factorial(K) # RETURN LAMBDA^K * E^-LAMBDA / K!
        
    # CUMULATIVE_DISTRIBUTION_FUNCTION [STATIC]: IN PROBABILITY THEORY AND STATISTICS, THE CUMULATIVE DISTRIBUTION FUNCTION (CDF) OF A REAL-VALUED RANDOM VARIABLE X, OR JUST DISTRIBUTION FUNCTION OF X, EVALUATED AT X, IS THE PROBABILITY THAT X WILL TAKE A VALUE LESS THAN OR EQUAL TO X.
    @staticmethod
    def CUMULATIVE_DISTRIBUTION_FUNCTION(K: int, LAMBDA: float) -> float:
        assert LAMBDA >= 0, "LAMBDA MUST BE GREATER THAN OR EQUAL TO 0" # ASSERT LAMBDA IS GREATER THAN OR EQUAL TO 0
        if K < 0: # IF K IS LESS THAN 0
            return 0 # RETURN 0
        else: # ELSE K IS GREATER THAN OR EQUAL TO 0
            return sum([POISSON_DISTRIBUTION.PROBABILITY_MASS_FUNCTION(_K, LAMBDA) for _K in range(0, K + 1)]) # RETURN SUMMATION OF PROBABILITY_MASS_FUNCTION(I, LAMBDA) FOR I = 0 TO K