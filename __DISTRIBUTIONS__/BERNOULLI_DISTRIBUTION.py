# BERNOULLI_DISTRIBUTION [STATIC]: IMPLEMENTATION OF BERNOULLI DISTRIBUTION. THE BERNOULLI DISTRIBUTION, WHICH TAKES VALUE 1 WITH PROBABILITY P AND VALUE 0 WITH PROBABILITY Q = 1 âˆ’ P. IT IS A SPECIAL CASE OF A BINOMIAL DISTRIBUTION WHERE N = 1.
class BERNOULLI_DISTRIBUTION:
    # PROBABILITY_MASS_FUNCTION [STATIC]: IN PROBABILITY AND STATISTICS, A PROBABILITY MASS FUNCTION IS A FUNCTION THAT GIVES THE PROBABILITY THAT A DISCRETE RANDOM VARIABLE IS EXACTLY EQUAL TO SOME VALUE. THE PROBABILITY MASS FUNCTION IS OFTEN THE PRIMARY MEANS OF DEFINING A DISCRETE PROBABILITY DISTRIBUTION, AND SUCH FUNCTIONS EXIST FOR EITHER DISCRETE RANDOM VARIABLES OR CONTINUOUS RANDOM VARIABLES WHOSE CUMULATIVE DISTRIBUTION FUNCTION IS DISCONTINUOUS. THE PROBABILITY MASS FUNCTION IS SOMETIMES ALSO CALLED THE PROBABILITY FUNCTION, OR THE PROBABILITY DISTRIBUTION FUNCTION.
    @staticmethod
    def PROBABILITY_MASS_FUNCTION(K: int, P: float) -> float:
        assert P >= 0 and P <= 1, "P MUST BE GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO 1"  # ASSERT P IS GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO 1
        if K == 1:  # IF K IS EQUAL TO 1
            return P  # RETURN P
        elif K == 0:  # IF K IS EQUAL TO 0
            return 1 - P  # RETURN 1 - P
        else:  # ELSE K IS NOT EQUAL TO 0 OR 1 (K IS NOT A VALID VALUE)
            raise ValueError("K MUST BE 0 OR 1")  # RAISE VALUE ERROR

    # CUMULATIVE_DISTRIBUTION_FUNCTION [STATIC]: IN PROBABILITY THEORY AND STATISTICS, THE CUMULATIVE DISTRIBUTION FUNCTION (CDF) OF A REAL-VALUED RANDOM VARIABLE X, OR JUST DISTRIBUTION FUNCTION OF X, EVALUATED AT X, IS THE PROBABILITY THAT X WILL TAKE A VALUE LESS THAN OR EQUAL TO X.
    @staticmethod
    def CUMULATIVE_DISTRIBUTION_FUNCTION(K: int, P: float) -> float:
        assert P >= 0 and P <= 1, "P MUST BE GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO 1"  # ASSERT P IS GREATER THAN OR EQUAL TO 0 AND LESS THAN OR EQUAL TO 1
        if K < 0:  # IF K IS LESS THAN 0
            return 0  # RETURN 0
        elif K >= 0 and K < 1:  # IF K IS GREATER THAN OR EQUAL TO 0 AND LESS THAN 1
            return 1 - P  # RETURN 1 - P
        elif K >= 1:  # IF K IS GREATER THAN OR EQUAL TO 1
            return 1  # RETURN 1
        else:  # ELSE K IS NOT A VALID VALUE (K IS NOT AN INTEGER)
            raise ValueError("K MUST BE AN INTEGER")  # RAISE VALUE ERROR