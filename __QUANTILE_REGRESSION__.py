import numpy as np

# QUANTILE_REGRESSION: IMPLEMENTATION OF QUANTILE REGRESSION. QUANTILE REGRESSION IS A TYPE OF REGRESSION ANALYSIS USED IN STATISTICS AND ECONOMETRICS. WHEREAS THE METHOD OF LEAST SQUARES ESTIMATES THE CONDITIONAL MEAN OF THE RESPONSE VARIABLE ACROSS VALUES OF THE PREDICTOR VARIABLES, QUANTILE REGRESSION ESTIMATES THE CONDITIONAL MEDIAN (OR OTHER QUANTILES) OF THE RESPONSE VARIABLE. QUANTILE REGRESSION IS AN EXTENSION OF LINEAR REGRESSION USED WHEN THE CONDITIONS OF LINEAR REGRESSION ARE NOT MET.
class QUANTILE_REGRESSION:
    # INITIALIZES THE QUANTILE REGRESSION MODEL.
    def __init__(self, QUANTILE=0.5, ALPHA=1):
        # QUANTILE: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE QUANTILE. THE DEFAULT VALUE IS 0.5.
        self.QUANTILE = QUANTILE
        # ALPHA: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE REGULARIZATION CONSTANT THAT MULTIPLIES THE L1 PENALTY TERM. THE DEFAULT VALUE IS 1.
        self.ALPHA = ALPHA
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE QUANTILE REGRESSION MODEL.
        self.WEIGHTS = None
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE QUANTILE REGRESSION MODEL.
        self.BIAS = 0

    # FIT(): IT'S THE FUNCTION THAT TRAINS THE QUANTILE REGRESSION MODEL.
    def FIT(self, X, Y):
        # N: NUMBER OF SAMPLES.
        # D: NUMBER OF FEATURES.
        _, D = X.shape
        # W: WEIGHTS OF THE QUANTILE REGRESSION MODEL.
        W = np.zeros(D)
        # B: BIAS OF THE QUANTILE REGRESSION MODEL.
        B = 0
        # QUANTILE: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE QUANTILE.
        QUANTILE = self.QUANTILE
        # ALPHA: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE REGULARIZATION CONSTANT THAT MULTIPLIES THE L1 PENALTY TERM.
        ALPHA = self.ALPHA
        # ITERATIONS: NUMBER OF ITERATIONS.
        ITERATIONS = 1000
        # EPSILON: IT'S THE TOLERANCE.
        EPSILON = 1e-3
        # LAMBDA: IT'S THE LEARNING RATE.
        LAMBDA = 1e-3
        # PREVIOUS_LOSS: IT'S THE LOSS OF THE PREVIOUS ITERATION.
        PREVIOUS_LOSS = 0
        # LOSS: IT'S THE LOSS OF THE CURRENT ITERATION.
        LOSS = 0
        # GRADIENT_W: IT'S THE PARTIAL DERIVATIVE OF THE LOSS WITH RESPECT TO THE WEIGHTS.
        GRADIENT_W = 0
        # GRADIENT_B: IT'S THE PARTIAL DERIVATIVE OF THE LOSS WITH RESPECT TO THE BIAS.
        GRADIENT_B = 0
        # DIFFERENCE: IT'S THE DIFFERENCE BETWEEN THE PREVIOUS AND CURRENT LOSS.
        DIFFERENCE = 0
        # I: ITERATION COUNTER.
        I = 0
        # WHILE THE DIFFERENCE BETWEEN THE PREVIOUS AND CURRENT LOSS IS GREATER THAN THE TOLERANCE AND THE ITERATION COUNTER IS LESS THAN THE NUMBER OF ITERATIONS.
        while DIFFERENCE > EPSILON and I < ITERATIONS:
            # PREDICTIONS: IT'S THE PREDICTIONS OF THE QUANTILE REGRESSION MODEL.
            PREDICTIONS = np.dot(X, W) + B
            # ERRORS: IT'S THE ERRORS OF THE QUANTILE REGRESSION MODEL.
            ERRORS = Y - PREDICTIONS
            # LOSS: IT'S THE LOSS OF THE QUANTILE REGRESSION MODEL.
            LOSS = np.sum(np.maximum(QUANTILE * ERRORS, (QUANTILE - 1) * ERRORS)) + ALPHA * np.sum(np.abs(W))
            # GRADIENT_W: IT'S THE PARTIAL DERIVATIVE OF THE LOSS WITH RESPECT TO THE WEIGHTS.
            GRADIENT_W = -np.sum(np.where(ERRORS > 0, (1 - QUANTILE) * X, -QUANTILE * X), axis=0) + ALPHA * np.where(W > 0, 1, -1)
            # GRADIENT_B: IT'S THE PARTIAL DERIVATIVE OF THE LOSS WITH RESPECT TO THE BIAS.
            GRADIENT_B = -np.sum(np.where(ERRORS > 0, (1 - QUANTILE), -QUANTILE))
            # W: WEIGHTS OF THE QUANTILE REGRESSION MODEL.
            W -= LAMBDA * GRADIENT_W
            # B: BIAS OF THE QUANTILE REGRESSION MODEL.
            B -= LAMBDA * GRADIENT_B
            # DIFFERENCE: IT'S THE DIFFERENCE BETWEEN THE PREVIOUS AND CURRENT LOSS.
            DIFFERENCE = abs(PREVIOUS_LOSS - LOSS)
            # PREVIOUS_LOSS: IT'S THE LOSS OF THE PREVIOUS ITERATION.
            PREVIOUS_LOSS = LOSS
            # I: ITERATION COUNTER.
            I += 1
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE QUANTILE REGRESSION MODEL.
        self.WEIGHTS = W
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE QUANTILE REGRESSION MODEL.
        self.BIAS = B

    # PREDICT(): IT'S THE FUNCTION THAT USES THE QUANTILE REGRESSION MODEL TO MAKE PREDICTIONS.
    def PREDICT(self, X):
        # RETURNS THE PREDICTIONS OF THE QUANTILE REGRESSION MODEL.
        return np.dot(X, self.WEIGHTS) + self.BIAS