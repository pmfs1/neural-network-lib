import numpy as np

# PASSIVE_AGRESSIVE_REGRESSOR: IMPLEMENTATION OF PASSIVE AGRESSIVE REGRESSOR. 
class PASSIVE_AGRESSIVE_REGRESSOR:
    # INITIALIZES THE PASSIVE AGRESSIVE REGRESSOR MODEL.
    def __init__(self, C=1, N_ITER=1000):
        # C: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE PENALTY TERM. THE DEFAULT VALUE IS 1.
        self.C = C
        # N_ITER: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF ITERATIONS. THE DEFAULT VALUE IS 1000.
        self.N_ITER = N_ITER
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
        self.WEIGHTS = None
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
        self.BIAS = 0

    # FIT(): IT'S THE FUNCTION THAT TRAINS THE PASSIVE AGRESSIVE REGRESSOR MODEL.
    def FIT(self, X, Y):
        # X: IT'S THE MATRIX OF FEATURES.
        X = np.array(X)
        # Y: IT'S THE VECTOR OF TARGETS.
        Y = np.array(Y)
        # N: IT'S THE NUMBER OF SAMPLES.
        N = len(X)
        # D: IT'S THE NUMBER OF FEATURES.
        D = len(X[0])
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
        self.WEIGHTS = np.zeros(D)
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
        self.BIAS = 0
        # FOR EACH ITERATION.
        for _ in range(self.N_ITER):
            # FOR EACH SAMPLE.
            for i in range(N):
                # PREDICTION: IT'S THE PREDICTION OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
                PREDICTION = np.dot(self.WEIGHTS, X[i]) + self.BIAS
                # LOSS: IT'S THE LOSS OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
                LOSS = max(0, abs(Y[i] - PREDICTION) - self.C)
                # IF THE LOSS IS EQUAL TO 0.
                if LOSS == 0:
                    # CONTINUE.
                    continue
                # IF THE LOSS IS NOT EQUAL TO 0.
                else:
                    # TAU: IT'S THE TAU OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
                    TAU = min(self.C, LOSS / np.dot(X[i], X[i]))
                    # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
                    self.WEIGHTS += TAU * Y[i] * X[i]
                    # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
                    self.BIAS += TAU * Y[i]
        
    # PREDICT(): IT'S THE FUNCTION THAT USES THE PASSIVE AGRESSIVE REGRESSOR MODEL TO MAKE A PREDICTION.
    def PREDICT(self, X):
        # PREDICTIONS: IT'S THE VECTOR OF PREDICTIONS.
        PREDICTIONS = []
        # FOR EACH SAMPLE.
        for _X in X:
            # PREDICTION: IT'S THE PREDICTION OF THE PASSIVE AGRESSIVE REGRESSOR MODEL.
            PREDICTION = np.dot(self.WEIGHTS, _X) + self.BIAS
            # APPEND THE PREDICTION TO THE PREDICTIONS VECTOR.
            PREDICTIONS.append(PREDICTION)
        # RETURN THE PREDICTIONS VECTOR.
        return np.array(PREDICTIONS)