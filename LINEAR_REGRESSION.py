import numpy as np

# IMPLEMENTATION OF LINEAR REGRESSION 
class LINEAR_REGRESSION():
    # INITIALIZES THE LINEAR REGRESSION MODEL
    def __init__(self, LEARNING_RATE, ITERATIONS):
        self.LEARNING_RATE = LEARNING_RATE # LEARNING RATE: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE LEARNING RATE OF THE ALGORITHM.
        self.ITERATIONS = ITERATIONS # NUMBER OF ITERATIONS: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF ITERATIONS THAT THE ALGORITHM PASS THROUGH THE TRAINING DATA.
        self.WEIGHTS = None # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE LINEAR REGRESSION MODEL.
        self.BIAS = None # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE LINEAR REGRESSION MODEL.
        self.BIAS = None # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE LINEAR REGRESSION MODEL.

    def FIT(self, X, Y):
        M, N = X.shape # M: NUMBER OF TRAINING EXAMPLES, N: NUMBER OF FEATURES
        self.WEIGHTS = np.zeros((N,1)) # INITIALIZES THE WEIGHTS TO ZERO
        self.BIAS = 0 # INITIALIZES THE BIAS TO ZERO
        Y = Y.reshape(M,1) # RESHAPES THE Y VECTOR TO A COLUMN VECTOR
        LOSSES = [] # LIST THAT WILL CONTAIN THE LOSS FOR EACH ITERATION
        for _ in range(self.ITERATIONS):
            Y_HAT = np.dot(X, self.WEIGHTS) + self.BIAS # PREDICTS THE OUTPUT FOR THE CURRENT WEIGHTS AND BIAS
            loss = np.mean((Y_HAT - Y) ** 2) # CALCULATES THE LOSS FOR THE CURRENT WEIGHTS AND BIAS
            LOSSES.append(loss) # APPENDS THE LOSS TO THE LOSSES LIST
            DERIVATIVE_WEIGHTS = (1/M) * np.dot(X.T, (Y_HAT - Y)) # CALCULATES THE DERIVATIVE OF THE LOSS WITH RESPECT TO THE WEIGHTS
            DERIVATIVE_BIAS = (1/M) * np.sum((Y_HAT - Y)) # CALCULATES THE DERIVATIVE OF THE LOSS WITH RESPECT TO THE BIAS
            self.WEIGHTS -= self.LEARNING_RATE * DERIVATIVE_WEIGHTS # UPDATES THE WEIGHTS
            self.BIAS -= self.LEARNING_RATE * DERIVATIVE_BIAS # UPDATES THE BIAS

    # PREDICT(): PREDICTS THE OUTPUT FOR THE GIVEN INPUT
    def PREDICT(self, X):
        return np.dot(X, self.WEIGHTS) + self.BIAS # RETURNS THE PREDICTED OUTPUT