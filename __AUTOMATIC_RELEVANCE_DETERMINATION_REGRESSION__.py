import numpy as np

# AUTOMATIC_RELEVANCE_DETERMINATION_REGRESSION: IMPLEMENTATION OF THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM. AUTOMATIC RELEVANCE DETERMINATION (ARD) REGRESSION IS A REGRESSION ALGORITHM THAT USES THE BAYESIAN FRAMEWORK IN ORDER TO DETERMINE THE RELEVANCE OF THE FEATURES. IT'S A REGULARIZED VERSION OF THE LINEAR REGRESSION ALGORITHM. IN CONTRAST TO THE BAYESIAN RIDGE REGRESSION, EACH COORDINATE OF WEIGHT HAS ITS OWN STANDARD DEVIATION. THE PRIOR OVER ALL LAMBDAS IS CHOSEN TO BE THE SAME GAMMA DISTRIBUTION GIVEN BY THE HYPERPARAMETERS LAMBDA_1 AND LAMBDA_2.
class AUTOMATIC_RELEVANCE_DETERMINATION_REGRESSION:
    # INITIALIZES THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM.
    def __init__(self, LAMBDA_1=1e-6, LAMBDA_2=1e-6):
        # LAMBDA_1: IT'S THE HYPERPARAMETER THAT CONTROLS THE SHAPE OF THE GAMMA DISTRIBUTION.
        self.LAMBDA_1 = LAMBDA_1
        # LAMBDA_2: IT'S THE HYPERPARAMETER THAT CONTROLS THE SCALE OF THE GAMMA DISTRIBUTION.
        self.LAMBDA_2 = LAMBDA_2
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM.
        self.WEIGHTS = None
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM.
        self.BIAS = 0

    # FIT(): IT'S THE FUNCTION THAT TRAINS THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM.
    def FIT(self, X, Y):
        # X: IT'S THE MATRIX OF FEATURES.
        X = np.array(X)
        # Y: IT'S THE VECTOR OF TARGETS.
        Y = np.array(Y)
        # N: IT'S THE NUMBER OF SAMPLES.
        N = len(X)
        # D: IT'S THE NUMBER OF FEATURES.
        D = len(X[0])
        # LAMBDA: IT'S THE VECTOR OF HYPERPARAMETERS THAT CONTROLS THE STANDARD DEVIATION OF EACH WEIGHT.
        LAMBDA = np.ones(D)
        # MU: IT'S THE VECTOR OF MEANS OF THE WEIGHTS.
        MU = np.zeros(D)
        # SIGMA: IT'S THE MATRIX OF COVARIANCES OF THE WEIGHTS.
        SIGMA = np.eye(D)
        # SIGMA_INV: IT'S THE MATRIX OF INVERSE COVARIANCES OF THE WEIGHTS.
        SIGMA_INV = np.eye(D)
        # FOR EACH SAMPLE.
        for _ in range(N):
            # SIGMA_INV: IT'S THE MATRIX OF INVERSE COVARIANCES OF THE WEIGHTS.
            SIGMA_INV = np.linalg.inv(SIGMA)
            # MU: IT'S THE VECTOR OF MEANS OF THE WEIGHTS.
            MU = np.dot(SIGMA_INV, np.dot(X.T, Y))
            # LAMBDA: IT'S THE VECTOR OF HYPERPARAMETERS THAT CONTROLS THE STANDARD DEVIATION OF EACH WEIGHT.
            LAMBDA = self.LAMBDA_1 + np.sum(SIGMA_INV, axis=1)
            # SIGMA: IT'S THE MATRIX OF COVARIANCES OF THE WEIGHTS.
            SIGMA = np.linalg.inv(np.diag(LAMBDA) + np.dot(X.T, X))
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM.
        self.WEIGHTS = MU
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM.
        self.BIAS = np.mean(Y) - np.dot(np.mean(X, axis=0), MU)

    # PREDICT(): IT'S THE FUNCTION THAT USES THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM IN ORDER TO MAKE A PREDICTION.
    def PREDICT(self, X):
        # RETURNS THE PREDICTIONS OF THE AUTOMATIC RELEVANCE DETERMINATION REGRESSION ALGORITHM.
        return np.dot(X, self.WEIGHTS) + self.BIAS