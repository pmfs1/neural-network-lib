import numpy as np

# BAYESIAN_RIDGE_REGRESSION: IMPLEMENTS AN ALGORITHM FOR REGULARIZED BAYESIAN LINEAR REGRESSION FIT. IT USES A HYPERPARAMETER TO SPECIFY REGULARIZATION STRENGTH AND PERFORMS FULL HYPERPARAMETER REGULARIZATION WITH AN APPROXIMATELY NONINFORMATIVE PRIOR.
class BAYESIAN_RIDGE_REGRESSION():
    # INITIALIZES THE BAYESIAN RIDGE REGRESSION MODEL
    def __init__(self, FIT_INTERCEPT=True, ALPHA_1=1e-6, ALPHA_2=1e-6, LAMBDA_1=1e-6, LAMBDA_2=1e-6, N_ITER=300):
        # FIT_INTERCEPT: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO WHETHER TO CALCULATE THE INTERCEPT FOR THIS MODEL. IF SET TO FALSE, NO INTERCEPT WILL BE USED IN CALCULATIONS (E.G. DATA IS EXPECTED TO BE ALREADY CENTERED).
        self.FIT_INTERCEPT = FIT_INTERCEPT
        # ALPHA_1: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE SHAPE PARAMETER FOR THE GAMMA DISTRIBUTION USED FOR THE PRECISION OF THE WEIGHTS.
        self.ALPHA_1 = ALPHA_1
        # ALPHA_2: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE RATE PARAMETER FOR THE GAMMA DISTRIBUTION USED FOR THE PRECISION OF THE WEIGHTS.
        self.ALPHA_2 = ALPHA_2
        # LAMBDA_1: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE SHAPE PARAMETER FOR THE GAMMA DISTRIBUTION USED FOR THE PRECISION OF THE NOISE.
        self.LAMBDA_1 = LAMBDA_1
        # LAMBDA_2: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE RATE PARAMETER FOR THE GAMMA DISTRIBUTION USED FOR THE PRECISION OF THE NOISE.
        self.LAMBDA_2 = LAMBDA_2
        # N_ITER: IT'S THE HYPERPARAMETER THAT CORRESPONDS TO THE NUMBER OF ITERATIONS FOR THE OPTIMIZATION.
        self.N_ITER = N_ITER
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE LINEAR REGRESSION MODEL.
        self.WEIGHTS = None
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE LINEAR REGRESSION MODEL.
        self.BIAS = None

    # FIT(): FITS THE BAYESIAN RIDGE REGRESSION MODEL TO THE TRAINING DATA
    def FIT(self, X, Y):
        # INITIALIZES THE WEIGHTS AND THE BIAS
        # WEIGHTS: IT'S THE PARAMETER THAT CORRESPONDS TO THE WEIGHTS OF THE LINEAR REGRESSION MODEL.
        self.WEIGHTS = np.zeros(X.shape[1])
        # BIAS: IT'S THE PARAMETER THAT CORRESPONDS TO THE BIAS OF THE LINEAR REGRESSION MODEL.
        self.BIAS = 0
        # IMPLEMENTS THE GRADIENT DESCENT ALGORITHM
        for _ in range(self.N_ITER):
            # UPDATES THE WEIGHTS
            self.WEIGHTS = np.linalg.inv(
                self.ALPHA_2 * np.identity(X.shape[1]) + self.LAMBDA_2 * np.dot(X.T, X)).dot(
                self.LAMBDA_2 * np.dot(X.T, Y) + self.ALPHA_2 * self.WEIGHTS)
            # UPDATES THE BIAS
            self.BIAS = (Y - np.dot(X, self.WEIGHTS)).sum() / \
                (X.shape[0] * self.LAMBDA_2 + self.ALPHA_2)

    # TRANSFORM(): PREDICTS THE LABELS OF THE DATA
    def TRANSFORM(self, X):
        # RETURNS THE PREDICTED LABELS
        return np.dot(X, self.WEIGHTS) + self.BIAS